/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/augmentConfig.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const configurationError=require("./utils/configurationError"),getModulePath=require("./utils/getModulePath"),globjoin=require("globjoin"),micromatch=require("micromatch"),normalizeAllRuleSettings=require("./normalizeAllRuleSettings"),normalizePath=require("normalize-path"),path=require("path");async function augmentConfigBasic(e,o,s,r,i,t){let n=o;r&&(n=addOptions(e,n)),t&&(n=applyOverrides(n,i,t)),n=await extendConfig(e,n,s,i,t);return absolutizePaths(n,s,e._options.cwd)}function augmentConfigExtended(e){return async o=>{if(!o)return null;const s=path.dirname(o.filepath||""),{config:r}=o;return{config:absolutizePaths(r,s,e),filepath:o.filepath}}}async function augmentConfigFull(e,o,s){if(!s)return null;const r=s.config,i=s.filepath,t=e._options.configBasedir||path.dirname(i||"");let n=await augmentConfigBasic(e,r,t,!0,t,o);if(n=addPluginFunctions(n),n=addProcessorFunctions(n),!n.rules)throw configurationError('No rules found within configuration. Have you provided a "rules" property?');return n=normalizeAllRuleSettings(n),{config:n,filepath:s.filepath}}function absolutizePaths(e,o,s){return e.ignoreFiles&&(e.ignoreFiles=[e.ignoreFiles].flat().map((e=>path.isAbsolute(e.replace(/^!/,""))?e:globjoin(o,e)))),e.plugins&&(e.plugins=[e.plugins].flat().map((e=>getModulePath(o,e,s)))),e.processors&&(e.processors=absolutizeProcessors(e.processors,o)),e}function absolutizeProcessors(e,o){return(Array.isArray(e)?e:[e]).map((e=>"string"==typeof e?getModulePath(o,e):[getModulePath(o,e[0]),e[1]]))}async function extendConfig(e,o,s,r,i){if(void 0===o.extends)return o;const{extends:t,...n}=o,l=[t].flat();let a=n;for(const o of l){const t=await loadExtendedConfig(e,s,o);if(t){let o=t.config;const s=path.dirname(t.filepath||"");o=await augmentConfigBasic(e,o,s,!1,r,i),a=mergeConfigs(a,o)}}return mergeConfigs(a,n)}function loadExtendedConfig(e,o,s){const r=getModulePath(o,s,e._options.cwd);return e._extendExplorer.load(r)}function mergeConfigs(e,o){const s={};(e.plugins||o.plugins)&&(s.plugins=[],e.plugins&&(s.plugins=s.plugins.concat(e.plugins)),o.plugins&&(s.plugins=[...new Set(s.plugins.concat(o.plugins))]));const r={};(e.processors||o.processors)&&(r.processors=[],e.processors&&(r.processors=r.processors.concat(e.processors)),o.processors&&(r.processors=[...new Set(r.processors.concat(o.processors))]));const i={};(e.overrides||o.overrides)&&(i.overrides=[],e.overrides&&(i.overrides=i.overrides.concat(e.overrides)),o.overrides&&(i.overrides=[...new Set(i.overrides.concat(o.overrides))]));const t={};(e.rules||o.rules)&&(t.rules={...e.rules,...o.rules});return{...e,...o,...r,...s,...i,...t}}function addPluginFunctions(e){if(!e.plugins)return e;const o=[e.plugins].flat(),s={};for(const e of o){let o=require(e);o=o.default||o;const r=[o].flat();for(const o of r){if(!o.ruleName)throw configurationError(`stylelint requires plugins to expose a ruleName. The plugin "${e}" is not doing this, so will not work with stylelint. Please file an issue with the plugin.`);if(!o.ruleName.includes("/"))throw configurationError(`stylelint requires plugin rules to be namespaced, i.e. only \`plugin-namespace/plugin-rule-name\` plugin rule names are supported. The plugin rule "${o.ruleName}" does not do this, so will not work. Please file an issue with the plugin.`);s[o.ruleName]=o.rule}}return e.pluginFunctions=s,e}const processorCache=new Map;function addProcessorFunctions(e){if(!e.processors)return e;const o=[],s=[];for(const r of[e.processors].flat()){const e=JSON.stringify(r);let i;if(processorCache.has(e))i=processorCache.get(e);else{const o="string"==typeof r?r:r[0],s="string"==typeof r?void 0:r[1];let t=require(o);t=t.default||t,i=t(s),processorCache.set(e,i)}i&&i.code&&o.push(i.code),i&&i.result&&s.push(i.result)}return e.codeProcessors=o,e.resultProcessors=s,e}function applyOverrides(e,o,s){let{overrides:r,...i}=e;if(!r)return i;if(!Array.isArray(r))throw new TypeError('The `overrides` configuration property should be an array, e.g. { "overrides": [{ "files": "*.css", "rules": {} }] }.');for(const e of r){const{files:r,...t}=e;if(!r)throw new Error('Every object in the `overrides` configuration property should have a `files` property with globs, e.g. { "overrides": [{ "files": "*.css", "rules": {} }] }.');const n=[r].flat().map((e=>path.isAbsolute(e.replace(/^!/,""))?e:globjoin(o,e))).map((e=>normalizePath(e)));micromatch.isMatch(s,n,{dot:!0})&&(i=mergeConfigs(i,t))}return i}function addOptions(e,o){const s={...o};return e._options.ignoreDisables&&(s.ignoreDisables=e._options.ignoreDisables),e._options.quiet&&(s.quiet=e._options.quiet),e._options.reportNeedlessDisables&&(s.reportNeedlessDisables=e._options.reportNeedlessDisables),e._options.reportInvalidScopeDisables&&(s.reportInvalidScopeDisables=e._options.reportInvalidScopeDisables),e._options.reportDescriptionlessDisables&&(s.reportDescriptionlessDisables=e._options.reportDescriptionlessDisables),e._options.customSyntax&&(s.customSyntax=e._options.customSyntax),s}module.exports={augmentConfigExtended:augmentConfigExtended,augmentConfigFull:augmentConfigFull,applyOverrides:applyOverrides};
//# sourceMappingURL=/sm/9675c41e879de2fb987d32982c8f54e66f7acec34c4ccb53b229961ef0e2fc67.map