/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/getPostcssResult.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const LazyResult=require("postcss/lib/lazy-result").default,path=require("path"),{default:postcss}=require("postcss"),{promises:fs}=require("fs"),postcssProcessor=postcss();function getCustomSyntax(s){let t;if("string"==typeof s){try{t=require(s)}catch(t){if(t&&"object"==typeof t&&"MODULE_NOT_FOUND"===t.code&&t.message.includes(s))throw new Error(`Cannot resolve custom syntax module "${s}". Check that module "${s}" is available and spelled correctly.\n\nCaused by: ${t}`);throw t}return t.parse||(t={parse:t,stringify:postcss.stringify}),t}if("object"==typeof s){if("function"!=typeof s.parse)throw new TypeError('An object provided to the "customSyntax" option must have a "parse" property. Ensure the "parse" property exists and its value is a function.');return t={...s},t}throw new Error("Custom syntax must be a string or a Syntax object")}module.exports=async function(s,t={}){const e=t.filePath?s._postcssResultCache.get(t.filePath):void 0;if(e)return e;if(s._options.syntax){let t='The "syntax" option is no longer available. ';return t+="css"===s._options.syntax?'You can remove the "--syntax" CLI flag as stylelint will now parse files as CSS by default':'You should install an appropriate syntax, e.g. postcss-scss, and use the "customSyntax" option',Promise.reject(new Error(t))}const o=t.customSyntax?getCustomSyntax(t.customSyntax):cssSyntax(s,t.filePath),r={from:t.filePath,syntax:o};let n;if(void 0!==t.code?n=t.code:t.filePath&&(n=await fs.readFile(t.filePath,"utf8")),void 0===n)return Promise.reject(new Error("code or filePath required"));if(t.codeProcessors&&t.codeProcessors.length){s._options.fix&&(console.warn("Autofix is incompatible with processors and will be disabled. Are you sure you need a processor?"),s._options.fix=!1);const e=t.code?t.codeFilename:t.filePath;for(const s of t.codeProcessors)n=s(n,e)}const i=await new LazyResult(postcssProcessor,n,r);return t.filePath&&s._postcssResultCache.set(t.filePath,i),i};const previouslyInferredExtensions={html:"postcss-html",js:"@stylelint/postcss-css-in-js",jsx:"@stylelint/postcss-css-in-js",less:"postcss-less",md:"postcss-markdown",sass:"postcss-sass",sss:"sugarss",scss:"postcss-scss",svelte:"postcss-html",ts:"@stylelint/postcss-css-in-js",tsx:"@stylelint/postcss-css-in-js",vue:"postcss-html",xml:"postcss-html",xst:"postcss-html"};function cssSyntax(s,t){const e=t?path.extname(t).slice(1).toLowerCase():"";return previouslyInferredExtensions[e]&&console.warn(`${t}: When linting something other than CSS, you should install an appropriate syntax, e.g. "${previouslyInferredExtensions[e]}", and use the "customSyntax" option`),{parse:s._options.fix&&["css","pcss","postcss"].includes(e)?require("postcss-safe-parser"):postcss.parse,stringify:postcss.stringify}}
//# sourceMappingURL=/sm/fb1acd5a7b38481cab243710c157651b9a1255dee5d6a98ab1989ce22f55eb0c.map