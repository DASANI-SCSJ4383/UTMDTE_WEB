/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/standalone.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const debug=require("debug")("stylelint:standalone"),fastGlob=require("fast-glob"),fs=require("fs"),globby=require("globby"),normalizePath=require("normalize-path"),path=require("path"),createStylelint=require("./createStylelint"),createStylelintResult=require("./createStylelintResult"),FileCache=require("./utils/FileCache"),filterFilePaths=require("./utils/filterFilePaths"),formatters=require("./formatters"),getFileIgnorer=require("./utils/getFileIgnorer"),getFormatterOptionsText=require("./utils/getFormatterOptionsText"),hash=require("./utils/hash"),NoFilesFoundError=require("./utils/noFilesFoundError"),AllFilesIgnoredError=require("./utils/allFilesIgnoredError"),pkg=require("../package.json"),prepareReturnValue=require("./prepareReturnValue"),ALWAYS_IGNORED_GLOBS=["**/node_modules/**"],writeFileAtomic=require("write-file-atomic");async function standalone({allowEmptyInput:e=!1,cache:t=!1,cacheLocation:r,code:i,codeFilename:o,config:n,configBasedir:a,configFile:s,customSyntax:l,cwd:c=process.cwd(),disableDefaultIgnores:u,files:p,fix:g,formatter:h,globbyOptions:d,ignoreDisables:f,ignorePath:m,ignorePattern:y,maxWarnings:F,quiet:b,reportDescriptionlessDisables:w,reportInvalidScopeDisables:S,reportNeedlessDisables:q,syntax:P}){let x;const E=Date.now(),D="string"==typeof i;if(!p&&!D||p&&(i||D))return Promise.reject(new Error("You must pass stylelint a `files` glob or a `code` string, though not both"));let R,I;try{R=getFileIgnorer({cwd:c,ignorePath:m,ignorePattern:y})}catch(e){return Promise.reject(e)}try{I=getFormatterFunction(h)}catch(e){return Promise.reject(e)}const v=createStylelint({config:n,configFile:s,configBasedir:a,cwd:c,ignoreDisables:f,ignorePath:m,reportNeedlessDisables:q,reportInvalidScopeDisables:S,reportDescriptionlessDisables:w,syntax:P,customSyntax:l,fix:g,quiet:b});if(!p){const e=void 0===o||path.isAbsolute(o)?o:path.join(c,o);if(e&&!filterFilePaths(R,[path.relative(c,e)]).length)return prepareReturnValue([],F,I,c);let t;try{const r=await v._lintSource({code:i,codeFilename:e});t=await v._createStylelintResult(r,e)}catch(e){t=await handleError(v,e)}const r=t._postcssResult,n=prepareReturnValue([t],F,I,c);return g&&r&&!r.stylelint.ignored&&!r.stylelint.ruleDisableFix&&(n.output=!r.stylelint.disableWritingFix&&r.opts?r.root.toString(r.opts.syntax):i),n}let A=[p].flat().map((e=>{const t=d&&d.cwd||c,r=path.isAbsolute(e)?path.normalize(e):path.join(t,e);return fs.existsSync(r)?fastGlob.escapePath(normalizePath(e)):e}));if(u||(A=A.concat(ALWAYS_IGNORED_GLOBS.map((e=>`!${e}`)))),t){const e=pkg.version,t=hash(`${e}_${JSON.stringify(n||{})}`);x=new FileCache(r,c,t)}else x=new FileCache(r,c),x.destroy();const _={cwd:c,...d||{},absolute:!0},j=_.cwd;let O=await globby(A,_);const N=O.length;let $;if(O=filterFilePaths(R,O.map((e=>path.relative(j,e)))),O.length){let e=O.map((e=>path.isAbsolute(e)?path.normalize(e):path.join(j,e)));t&&(e=e.filter(x.hasFileChanged.bind(x)));const r=e.map((async e=>{debug(`Processing ${e}`);try{const r=await v._lintSource({filePath:e});if(r.stylelint.stylelintError&&t&&(debug(`${e} contains linting errors and will not be cached.`),x.removeEntry(e)),r.root&&r.opts&&!r.stylelint.ignored&&g&&!r.stylelint.disableWritingFix){const t=r.root.toString(r.opts.syntax);r.root&&r.root.source&&r.root.source.input.css!==t&&await writeFileAtomic(e,t)}return v._createStylelintResult(r,e)}catch(t){return x.removeEntry(e),handleError(v,t,e)}}));$=await Promise.all(r)}else $=e?await Promise.all([]):N?await Promise.reject(new AllFilesIgnoredError):await Promise.reject(new NoFilesFoundError(A));t&&x.reconcile();const C=prepareReturnValue($,F,I,c);return debug(`Linting complete in ${Date.now()-E}ms`),C}function getFormatterFunction(e){let t;if("string"==typeof e){if(t=formatters[e],void 0===t)throw new Error(`You must use a valid formatter option: ${getFormatterOptionsText()} or a function`)}else t="function"==typeof e?e:formatters.json;return t}function handleError(e,t,r){if("CssSyntaxError"===t.name)return createStylelintResult(e,void 0,r,t);throw t}module.exports=standalone;
//# sourceMappingURL=/sm/3f8d3126951b18d6079f41450f17085ca7f92975d5dd1d3fa25de28fc0fa7bc9.map