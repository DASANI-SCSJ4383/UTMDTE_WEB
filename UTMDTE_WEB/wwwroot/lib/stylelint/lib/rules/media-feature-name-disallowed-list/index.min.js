/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/media-feature-name-disallowed-list/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const atRuleParamIndex=require("../../utils/atRuleParamIndex"),isCustomMediaQuery=require("../../utils/isCustomMediaQuery"),isRangeContextMediaFeature=require("../../utils/isRangeContextMediaFeature"),isStandardSyntaxMediaFeatureName=require("../../utils/isStandardSyntaxMediaFeatureName"),matchesStringOrRegExp=require("../../utils/matchesStringOrRegExp"),mediaParser=require("postcss-media-query-parser").default,rangeContextNodeParser=require("../rangeContextNodeParser"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="media-feature-name-disallowed-list",messages=ruleMessages(ruleName,{rejected:e=>`Unexpected media feature name "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/media-feature-name-disallowed-list"},rule=e=>(a,r)=>{validateOptions(r,ruleName,{actual:e,possible:[isString,isRegExp]})&&a.walkAtRules(/^media$/i,(a=>{mediaParser(a.params).walk(/^media-feature$/i,(s=>{const t=s.parent;let i,u;if(isRangeContextMediaFeature(t.value)){const e=rangeContextNodeParser(s);i=e.name.value,u=e.name.sourceIndex}else i=s.value,u=s.sourceIndex;isStandardSyntaxMediaFeatureName(i)&&!isCustomMediaQuery(i)&&matchesStringOrRegExp(i,e)&&report({index:atRuleParamIndex(a)+u,message:messages.rejected(i),node:a,ruleName:ruleName,result:r})}))}))};rule.primaryOptionArray=!0,rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/89d0c51878209c707434b7d3bdae38b25cf146acfe6f43122a61922282189355.map