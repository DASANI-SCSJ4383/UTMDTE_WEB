/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/media-query-list-comma-newline-after/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const atRuleParamIndex=require("../../utils/atRuleParamIndex"),mediaQueryListCommaWhitespaceChecker=require("../mediaQueryListCommaWhitespaceChecker"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),whitespaceChecker=require("../../utils/whitespaceChecker"),ruleName="media-query-list-comma-newline-after",messages=ruleMessages(ruleName,{expectedAfter:()=>'Expected newline after ","',expectedAfterMultiLine:()=>'Expected newline after "," in a multi-line list',rejectedAfterMultiLine:()=>'Unexpected whitespace after "," in a multi-line list'}),meta={url:"https://stylelint.io/user-guide/rules/list/media-query-list-comma-newline-after"},rule=(e,a,t)=>{const s=whitespaceChecker("newline",e,messages);return(a,r)=>{if(!validateOptions(r,ruleName,{actual:e,possible:["always","always-multi-line","never-multi-line"]}))return;let i;if(mediaQueryListCommaWhitespaceChecker({root:a,result:r,locationChecker:s.afterOneOnly,checkedRuleName:ruleName,allowTrailingComments:e.startsWith("always"),fix:t.fix?(e,a)=>{const t=a-atRuleParamIndex(e);i=i||new Map;const s=i.get(e)||[];return s.push(t),i.set(e,s),!0}:null}),i)for(const[a,s]of i.entries()){let r=a.raws.params?a.raws.params.raw:a.params;for(const a of s.sort(((e,a)=>a-e))){const s=r.slice(0,a+1),i=r.slice(a+1);e.startsWith("always")?r=/^\s*\n/.test(i)?s+i.replace(/^[^\S\r\n]*/,""):s+t.newline+i:e.startsWith("never")&&(r=s+i.replace(/^\s*/,""))}a.raws.params?a.raws.params.raw=r:a.params=r}}};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/e40624d262a6c04f1a5907ffce0466a3976da7c02037311e31cca72d34bfb662.map