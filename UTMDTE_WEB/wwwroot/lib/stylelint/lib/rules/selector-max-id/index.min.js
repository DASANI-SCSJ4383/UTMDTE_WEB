/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-max-id/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isContextFunctionalPseudoClass=require("../../utils/isContextFunctionalPseudoClass"),isNonNegativeInteger=require("../../utils/isNonNegativeInteger"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),optionsMatches=require("../../utils/optionsMatches"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),resolvedNestedSelector=require("postcss-resolve-nested-selector"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="selector-max-id",messages=ruleMessages(ruleName,{expected:(e,s)=>`Expected "${e}" to have no more than ${s} ID ${1===s?"selector":"selectors"}`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-max-id"},rule=(e,s)=>(t,r)=>{function o(t,i){const l=t.reduce(((e,t)=>{var r;return("selector"===t.type||isContextFunctionalPseudoClass(t)&&("pseudo"!==(r=t).type||!optionsMatches(s,"ignoreContextFunctionalPseudoClasses",r.value)))&&o(t,i),"id"===t.type&&(e+=1),e}),0);if("root"!==t.type&&"pseudo"!==t.type&&l>e){const s=t.toString();report({ruleName:ruleName,result:r,node:i,message:messages.expected(s,e),word:s})}}validateOptions(r,ruleName,{actual:e,possible:isNonNegativeInteger},{actual:s,possible:{ignoreContextFunctionalPseudoClasses:[isString,isRegExp]},optional:!0})&&t.walkRules((e=>{if(isStandardSyntaxRule(e))for(const s of e.selectors)for(const t of resolvedNestedSelector(s,e))parseSelector(t,r,e,(s=>o(s,e)))}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/61045322faa9cffac6b3c8a0fa7e285ce248fee694a015f951164c98b546eb9a.map