/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-max-attribute/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isContextFunctionalPseudoClass=require("../../utils/isContextFunctionalPseudoClass"),isNonNegativeInteger=require("../../utils/isNonNegativeInteger"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),optionsMatches=require("../../utils/optionsMatches"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),resolvedNestedSelector=require("postcss-resolve-nested-selector"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="selector-max-attribute",messages=ruleMessages(ruleName,{expected:(e,t)=>`Expected "${e}" to have no more than ${t} attribute ${1===t?"selector":"selectors"}`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-max-attribute"},rule=(e,t)=>(s,r)=>{function i(s,o){const l=s.reduce(((e,s)=>(("selector"===s.type||isContextFunctionalPseudoClass(s))&&i(s,o),"attribute"!==s.type||optionsMatches(t,"ignoreAttributes",s.attribute)?e:e+=1)),0);if("root"!==s.type&&"pseudo"!==s.type&&l>e){const t=s.toString();report({ruleName:ruleName,result:r,node:o,message:messages.expected(t,e),word:t})}}validateOptions(r,ruleName,{actual:e,possible:isNonNegativeInteger},{actual:t,possible:{ignoreAttributes:[isString,isRegExp]},optional:!0})&&s.walkRules((e=>{if(isStandardSyntaxRule(e))for(const t of e.selectors)for(const s of resolvedNestedSelector(t,e))parseSelector(s,r,e,(t=>i(t,e)))}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/332399ee4476db89386e572f723c3664b3776c8ee3d9ccb01675a85715269d80.map