/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-combinator-disallowed-list/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isStandardSyntaxCombinator=require("../../utils/isStandardSyntaxCombinator"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isString:isString}=require("../../utils/validateTypes"),ruleName="selector-combinator-disallowed-list",messages=ruleMessages(ruleName,{rejected:e=>`Unexpected combinator "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-combinator-disallowed-list"},rule=e=>(r,t)=>{validateOptions(t,ruleName,{actual:e,possible:[isString]})&&r.walkRules((r=>{if(!isStandardSyntaxRule(r))return;const s=r.selector;parseSelector(s,t,r,(s=>{s.walkCombinators((s=>{if(!isStandardSyntaxCombinator(s))return;const a=normalizeCombinator(s.value);e.includes(a)&&report({result:t,ruleName:ruleName,message:messages.rejected(a),node:r,index:s.sourceIndex})}))}))}))};function normalizeCombinator(e){return e.replace(/\s+/g," ")}rule.primaryOptionArray=!0,rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/436df1be8108f56dffdd8c3305feb15eaa6c309e6c7c483465a7a8a665958ceb.map