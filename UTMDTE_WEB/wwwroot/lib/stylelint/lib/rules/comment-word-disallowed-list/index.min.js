/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/comment-word-disallowed-list/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const containsString=require("../../utils/containsString"),matchesStringOrRegExp=require("../../utils/matchesStringOrRegExp"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="comment-word-disallowed-list",messages=ruleMessages(ruleName,{rejected:e=>`Unexpected word matching pattern "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/comment-word-disallowed-list"},rule=e=>(r,t)=>{validateOptions(t,ruleName,{actual:e,possible:[isString,isRegExp]})&&r.walkComments((r=>{const s=r.text;if("/*# "===r.toString().slice(0,4))return;const i=matchesStringOrRegExp(s,e)||containsString(s,e);i&&report({message:messages.rejected(i.pattern),node:r,result:t,ruleName:ruleName})}))};rule.primaryOptionArray=!0,rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/e3cf2eb8485859795d632b0bafe4539374148bb47220295a9a9f417be09faa71.map