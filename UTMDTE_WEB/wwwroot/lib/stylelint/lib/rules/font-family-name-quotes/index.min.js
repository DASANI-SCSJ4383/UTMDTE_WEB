/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/font-family-name-quotes/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const findFontFamily=require("../../utils/findFontFamily"),isStandardSyntaxValue=require("../../utils/isStandardSyntaxValue"),isVariable=require("../../utils/isVariable"),keywordSets=require("../../reference/keywordSets"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),ruleName="font-family-name-quotes",messages=ruleMessages(ruleName,{expected:e=>`Expected quotes around "${e}"`,rejected:e=>`Unexpected quotes around "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/font-family-name-quotes"};function isSystemFontKeyword(e){return!!e.startsWith("-apple-")||"BlinkMacSystemFont"===e}function quotesRecommended(e){return!/^[-a-zA-Z]+$/.test(e)}function quotesRequired(e){return e.split(/\s+/).some((e=>/^(?:-?\d|--)/.test(e)||!/^[-\w\u{00A0}-\u{10FFFF}]+$/u.test(e)))}const makeMutableFontFamilies=(e,s)=>{const t=[];return e.forEach(((e,r)=>{const a="quote"in e&&e.quote,u=e.value,i={name:u,rawName:a?`${a}${u}${a}`:u,sourceIndex:e.sourceIndex,hasQuotes:Boolean(a),resetIndexes(e){t.slice(r+1).forEach((s=>s.sourceIndex+=e))},removeQuotes(){if(!1===this.hasQuotes)return;const e=this.sourceIndex,t=e+this.name.length+2;this.hasQuotes=!1,s.value=s.value.slice(0,e)+this.name+s.value.substring(t),this.resetIndexes(-2)},addQuotes(){if(!0===this.hasQuotes)return;const e=this.sourceIndex,t=e+this.name.length;this.hasQuotes=!0;const r=`"${this.name}"`;s.value=s.value.slice(0,e)+r+s.value.substring(t),this.resetIndexes(2)}};t.push(i)})),t},rule=(e,s,t)=>(s,r)=>{function a(s,r){const{name:a,rawName:i,hasQuotes:o}=s;if(!isStandardSyntaxValue(i))return;if(isVariable(i))return;if(keywordSets.fontFamilyKeywords.has(a.toLowerCase())||isSystemFontKeyword(a))return o?t.fix?void s.removeQuotes():u(messages.rejected(a),i,r):void 0;const n=quotesRequired(a),l=quotesRecommended(a);switch(e){case"always-unless-keyword":return o?void 0:t.fix?void s.addQuotes():u(messages.expected(a),i,r);case"always-where-recommended":return!l&&o?t.fix?void s.removeQuotes():u(messages.rejected(a),i,r):l&&!o?t.fix?void s.addQuotes():u(messages.expected(a),i,r):void 0;case"always-where-required":if(!n&&o)return t.fix?void s.removeQuotes():u(messages.rejected(a),i,r);if(n&&!o)return t.fix?void s.addQuotes():u(messages.expected(a),i,r)}}function u(e,s,t){report({result:r,ruleName:ruleName,message:e,node:t,word:s})}validateOptions(r,ruleName,{actual:e,possible:["always-where-required","always-where-recommended","always-unless-keyword"]})&&s.walkDecls(/^font(-family)?$/i,(e=>{let s=makeMutableFontFamilies(findFontFamily(e.value),e);if(0!==s.length)for(const t of s)a(t,e)}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/0901511af90b6d655d7aa4347390ca9acef6a00ba3b03be12dd34da4ae5ee33c.map