/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/no-invalid-position-at-import-rule/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isStandardSyntaxAtRule=require("../../utils/isStandardSyntaxAtRule"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),optionsMatches=require("../../utils/optionsMatches"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="no-invalid-position-at-import-rule",messages=ruleMessages(ruleName,{rejected:"Unexpected invalid position @import rule"}),meta={url:"https://stylelint.io/user-guide/rules/list/no-invalid-position-at-import-rule"},rule=(e,t)=>(s,r)=>{if(!validateOptions(r,ruleName,{actual:e},{actual:t,possible:{ignoreAtRules:[isString,isRegExp]},optional:!0}))return;let i=!1;s.walk((e=>{const s="name"in e&&e.name&&e.name.toLowerCase()||"";"atrule"===e.type&&"charset"!==s&&"import"!==s&&!optionsMatches(t,"ignoreAtRules",e.name)&&isStandardSyntaxAtRule(e)||"rule"===e.type&&isStandardSyntaxRule(e)?i=!0:"atrule"===e.type&&"import"===s&&i&&report({message:messages.rejected,node:e,result:r,ruleName:ruleName})}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/61cc769f38c4f12c34215d41f3ca750378fd0c1cefc183a4a5d5125a966b8cbb.map