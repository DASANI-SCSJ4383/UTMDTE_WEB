/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/color-named/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const declarationValueIndex=require("../../utils/declarationValueIndex"),isStandardSyntaxFunction=require("../../utils/isStandardSyntaxFunction"),isStandardSyntaxValue=require("../../utils/isStandardSyntaxValue"),optionsMatches=require("../../utils/optionsMatches"),propertySets=require("../../reference/propertySets"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),valueParser=require("postcss-value-parser"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),{colord:colord}=require("./colordUtils"),ruleName="color-named",messages=ruleMessages(ruleName,{expected:(e,r)=>`Expected "${r}" to be "${e}"`,rejected:e=>`Unexpected named color "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/color-named"},NODE_TYPES=new Set(["word","function"]),rule=(e,r)=>(t,s)=>{function a(e,r,t){report({result:s,ruleName:ruleName,message:e,node:r,index:t})}validateOptions(s,ruleName,{actual:e,possible:["never","always-where-possible"]},{actual:r,possible:{ignoreProperties:[isString,isRegExp],ignore:["inside-function"]},optional:!0})&&t.walkDecls((t=>{propertySets.acceptCustomIdents.has(t.prop)||optionsMatches(r,"ignoreProperties",t.prop)||valueParser(t.value).walk((s=>{const i=s.value,n=s.type,o=s.sourceIndex;if(optionsMatches(r,"ignore","inside-function")&&"function"===n)return!1;if(!isStandardSyntaxFunction(s))return!1;if(!isStandardSyntaxValue(i))return;if(!NODE_TYPES.has(n))return;if("never"===e&&"word"===n&&/^[a-z]+$/iu.test(i)&&"transparent"!==i.toLowerCase()&&colord(i).isValid())return void a(messages.rejected(i),t,declarationValueIndex(t)+o);if("always-where-possible"!==e)return;let l=null;if("function"===n)l=valueParser.stringify(s).replace(/\s*([,/()])\s*/g,"$1").replace(/\s{2,}/g," ");else{if("word"!==n||!i.startsWith("#"))return;l=i}const u=colord(l);if(!u.isValid())return;const d=u.toName();d&&"transparent"!==d.toLowerCase()&&a(messages.expected(d,l),t,declarationValueIndex(t)+o)}))}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/22c8b346dff94193a17ecdb8bafd35a07381267209de5ef0cc5be7fa8062234d.map