/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/function-max-empty-lines/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const getDeclarationValue=require("../../utils/getDeclarationValue"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),setDeclarationValue=require("../../utils/setDeclarationValue"),validateOptions=require("../../utils/validateOptions"),valueParser=require("postcss-value-parser"),{isNumber:isNumber}=require("../../utils/validateTypes"),ruleName="function-max-empty-lines",messages=ruleMessages(ruleName,{expected:e=>`Expected no more than ${e} empty ${1===e?"line":"lines"}`}),meta={url:"https://stylelint.io/user-guide/rules/list/function-max-empty-lines"};function placeIndexOnValueStart(e){if(null==e.raws.between)throw new Error("`between` must be present");return e.prop.length+e.raws.between.length-1}const rule=(e,r,t)=>{const s=e+1;return(r,l)=>{if(!validateOptions(l,ruleName,{actual:e,possible:isNumber}))return;const a=new RegExp(`(?:\r\n){${s+1},}`),u=new RegExp(`\n{${s+1},}`),n=t.fix?"\n".repeat(s):"",i=t.fix?"\r\n".repeat(s):"";r.walkDecls((r=>{if(!r.value.includes("("))return;const s=getDeclarationValue(r),o=[];let c=0;if(valueParser(s).walk((p=>{if("function"!==p.type||0===p.value.length)return;const m=valueParser.stringify(p);if(u.test(m)||a.test(m))if(t.fix){const e=m.replace(new RegExp(u,"gm"),n).replace(new RegExp(a,"gm"),i);o.push([s.slice(c,p.sourceIndex),e]),c=p.sourceIndex+m.length}else report({message:messages.expected(e),node:r,index:placeIndexOnValueStart(r)+p.sourceIndex,result:l,ruleName:ruleName})})),t.fix&&o.length>0){const e=o.reduce(((e,r)=>e+r[0]+r[1]),"")+s.slice(c);setDeclarationValue(r,e)}}))}};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/f50e97961be87c5c62a4d3b29ed3114f65e42a6098bc0b266a62f1a9fe659461.map