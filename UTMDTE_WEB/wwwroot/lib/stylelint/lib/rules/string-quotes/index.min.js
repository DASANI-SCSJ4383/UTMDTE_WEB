/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/string-quotes/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const atRuleParamIndex=require("../../utils/atRuleParamIndex"),declarationValueIndex=require("../../utils/declarationValueIndex"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),valueParser=require("postcss-value-parser"),{isBoolean:isBoolean,assertString:assertString}=require("../../utils/validateTypes"),ruleName="string-quotes",messages=ruleMessages(ruleName,{expected:e=>`Expected ${e} quotes`}),meta={url:"https://stylelint.io/user-guide/rules/list/string-quotes"},singleQuote="'",doubleQuote='"',rule=(e,s,r)=>{const t="single"===e?"'":'"',a="single"===e?'"':"'";return(u,l)=>{if(!validateOptions(l,ruleName,{actual:e,possible:["single","double"]},{actual:s,possible:{avoidEscape:[isBoolean]},optional:!0}))return;const i=!s||void 0===s.avoidEscape||s.avoidEscape;function o(s,u,o){const n=[];if(u.includes(a)&&("atrule"!==s.type||"charset"!==s.name)){valueParser(u).walk((u=>{if("string"===u.type&&u.quote===a){const c=u.value.includes(t);if(i&&c)return;const d=u.sourceIndex;if(r.fix&&!c){const e=d+u.value.length+a.length;n.push(d,e)}else report({message:messages.expected(e),node:s,index:o(s)+d,result:l,ruleName:ruleName})}}));for(const e of n)"atrule"===s.type?s.params=replaceQuote(s.params,e,t):s.value=replaceQuote(s.value,e,t)}}u.walk((s=>{switch(s.type){case"atrule":o(s,s.params,atRuleParamIndex);break;case"decl":o(s,s.value,declarationValueIndex);break;case"rule":!function(s){if(!isStandardSyntaxRule(s))return;if(!s.selector.includes("[")||!s.selector.includes("="))return;const u=[];parseSelector(s.selector,l,s,(u=>{let o=!1;u.walkAttributes((u=>{if(u.quoted){if(u.quoteMark===t&&i){assertString(u.value);const i=u.value.includes(t);if(u.value.includes(a))return;i&&(r.fix?(o=!0,u.quoteMark=a):report({message:messages.expected("single"===e?"double":e),node:s,index:u.sourceIndex+u.offsetOf("value"),result:l,ruleName:ruleName}))}if(u.quoteMark===a){if(i){assertString(u.value);const i=u.value.includes(t);if(u.value.includes(a))return void(r.fix?(o=!0,u.quoteMark=t):report({message:messages.expected(e),node:s,index:u.sourceIndex+u.offsetOf("value"),result:l,ruleName:ruleName}));if(i)return}r.fix?(o=!0,u.quoteMark=t):report({message:messages.expected(e),node:s,index:u.sourceIndex+u.offsetOf("value"),result:l,ruleName:ruleName})}}})),o&&(s.selector=u.toString())}));for(const e of u)s.selector=replaceQuote(s.selector,e,t)}(s)}}))}};function replaceQuote(e,s,r){return e.substring(0,s)+r+e.substring(s+r.length)}rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/f74ffcb4a999d1aa604d844773c0d845f5dec954f3c26c34b0edd8a424b55938.map