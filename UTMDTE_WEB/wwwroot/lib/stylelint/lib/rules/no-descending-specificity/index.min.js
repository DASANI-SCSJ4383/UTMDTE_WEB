/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/no-descending-specificity/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const findAtRuleContext=require("../../utils/findAtRuleContext"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),isStandardSyntaxSelector=require("../../utils/isStandardSyntaxSelector"),keywordSets=require("../../reference/keywordSets"),nodeContextLookup=require("../../utils/nodeContextLookup"),optionsMatches=require("../../utils/optionsMatches"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),resolvedNestedSelector=require("postcss-resolve-nested-selector"),ruleMessages=require("../../utils/ruleMessages"),specificity=require("specificity"),validateOptions=require("../../utils/validateOptions"),ruleName="no-descending-specificity",messages=ruleMessages(ruleName,{rejected:(e,t)=>`Expected selector "${e}" to come before selector "${t}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/no-descending-specificity"},rule=(e,t)=>(s,r)=>{if(!validateOptions(r,ruleName,{actual:e},{optional:!0,actual:t,possible:{ignore:["selectors-within-list"]}}))return;const o=nodeContextLookup();function i(e,t,s,o){const i=e.toString(),l=lastCompoundSelectorWithoutPseudoClasses(e),n=specificity.calculate(i)[0].specificityArray,u={selector:i,specificity:n};if(!o.has(l))return void o.set(l,[u]);const c=o.get(l);for(const e of c)-1===specificity.compare(n,e.specificity)&&report({ruleName:ruleName,result:r,node:t,message:messages.rejected(i,e.selector),index:s});c.push(u)}s.walkRules((e=>{if(!isStandardSyntaxRule(e))return;if(optionsMatches(t,"ignore","selectors-within-list")&&e.selectors.length>1)return;const s=o.getContext(e,findAtRuleContext(e));for(const t of e.selectors){const o=t.trim();if(""===o)continue;const l=e.selector.indexOf(o);for(const o of resolvedNestedSelector(t,e))parseSelector(o,r,e,(t=>{isStandardSyntaxSelector(o)&&i(t,e,l,s)}))}}))};function lastCompoundSelectorWithoutPseudoClasses(e){const t=e.nodes[0].split((e=>"combinator"===e.type));return t[t.length-1].filter((e=>"pseudo"!==e.type||e.value.startsWith("::")||keywordSets.pseudoElements.has(e.value.replace(/:/g,"")))).join("").toString()}rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/b7c455ce12b7bad03f58736b99dda3be46d2bec8a9e601ce2601746c7f00f378.map