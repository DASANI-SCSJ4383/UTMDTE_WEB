/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-descendant-combinator-no-non-space/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),ruleName="selector-descendant-combinator-no-non-space",messages=ruleMessages(ruleName,{rejected:e=>`Unexpected "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-descendant-combinator-no-non-space"},rule=(e,r,s)=>(r,a)=>{validateOptions(a,ruleName,{actual:e})&&r.walkRules((e=>{if(!isStandardSyntaxRule(e))return;let r=!1;const t=e.raws.selector?e.raws.selector.raw:e.selector;if(t.includes("/*"))return;const l=parseSelector(t,a,e,(t=>{t.walkCombinators((t=>{if(" "!==t.value)return;const l=t.toString();if(l.includes("  ")||l.includes("\t")||l.includes("\n")||l.includes("\r")){if(s.fix&&/^\s+$/.test(l))return r=!0,t.raws||(t.raws={}),t.raws.value=" ",t.rawSpaceBefore=t.rawSpaceBefore.replace(/^\s+/,""),void(t.rawSpaceAfter=t.rawSpaceAfter.replace(/\s+$/,""));report({result:a,ruleName:ruleName,message:messages.rejected(l),node:e,index:t.sourceIndex})}}))}));r&&l&&(e.raws.selector?e.raws.selector.raw=l:e.selector=l)}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/74bf25f07329df725c54ac3416e9dcd93ce59eb3dc691c76af615218827e5c1e.map