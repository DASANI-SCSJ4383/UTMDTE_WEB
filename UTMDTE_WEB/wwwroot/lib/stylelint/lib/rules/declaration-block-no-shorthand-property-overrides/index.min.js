/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/declaration-block-no-shorthand-property-overrides/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const eachDeclarationBlock=require("../../utils/eachDeclarationBlock"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),shorthandData=require("../../reference/shorthandData"),validateOptions=require("../../utils/validateOptions"),vendor=require("../../utils/vendor"),ruleName="declaration-block-no-shorthand-property-overrides",messages=ruleMessages(ruleName,{rejected:(e,r)=>`Unexpected shorthand "${e}" after "${r}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/declaration-block-no-shorthand-property-overrides"},rule=e=>(r,t)=>{validateOptions(t,ruleName,{actual:e})&&eachDeclarationBlock(r,(e=>{const r={};e((e=>{const a=e.prop,s=vendor.unprefixed(a),o=vendor.prefix(a).toLowerCase(),l=shorthandData[s.toLowerCase()];if(l)for(const s of l)Object.prototype.hasOwnProperty.call(r,o+s)&&report({ruleName:ruleName,result:t,node:e,message:messages.rejected(a,r[o+s])});else r[a.toLowerCase()]=a}))}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/931e56fd29055b3803f8ce1e2ea0932a50269a2648b64b5b391eca85204bd68a.map