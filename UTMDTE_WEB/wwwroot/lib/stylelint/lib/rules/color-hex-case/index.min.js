/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/color-hex-case/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const valueParser=require("postcss-value-parser"),declarationValueIndex=require("../../utils/declarationValueIndex"),getDeclarationValue=require("../../utils/getDeclarationValue"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),setDeclarationValue=require("../../utils/setDeclarationValue"),validateOptions=require("../../utils/validateOptions"),ruleName="color-hex-case",messages=ruleMessages(ruleName,{expected:(e,r)=>`Expected "${e}" to be "${r}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/color-hex-case"},HEX=/^#[0-9A-Za-z]+/,IGNORED_FUNCTIONS=new Set(["url"]),rule=(e,r,t)=>(r,a)=>{validateOptions(a,ruleName,{actual:e,possible:["lower","upper"]})&&r.walkDecls((r=>{const l=valueParser(getDeclarationValue(r));let s=!1;l.walk((l=>{const{value:u}=l;if(isIgnoredFunction(l))return!1;if(!isHexColor(l))return;const o="lower"===e?u.toLowerCase():u.toUpperCase();return u!==o?t.fix?(l.value=o,void(s=!0)):void report({message:messages.expected(u,o),node:r,index:declarationValueIndex(r)+l.sourceIndex,result:a,ruleName:ruleName}):void 0})),s&&setDeclarationValue(r,l.toString())}))};function isIgnoredFunction({type:e,value:r}){return"function"===e&&IGNORED_FUNCTIONS.has(r.toLowerCase())}function isHexColor({type:e,value:r}){return"word"===e&&HEX.test(r)}rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/2c5c18d251f5a216d97a574f53428907bf6176d066e3e54a66017a8c29165b77.map