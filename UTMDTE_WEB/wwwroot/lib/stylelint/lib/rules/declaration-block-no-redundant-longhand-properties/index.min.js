/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/declaration-block-no-redundant-longhand-properties/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const arrayEqual=require("../../utils/arrayEqual"),eachDeclarationBlock=require("../../utils/eachDeclarationBlock"),optionsMatches=require("../../utils/optionsMatches"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),shorthandData=require("../../reference/shorthandData"),validateOptions=require("../../utils/validateOptions"),vendor=require("../../utils/vendor"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="declaration-block-no-redundant-longhand-properties",messages=ruleMessages(ruleName,{expected:e=>`Expected shorthand property "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/declaration-block-no-redundant-longhand-properties"},rule=(e,r)=>(t,s)=>{if(!validateOptions(s,ruleName,{actual:e},{actual:r,possible:{ignoreShorthands:[isString,isRegExp]},optional:!0}))return;const a=Object.entries(shorthandData).reduce(((e,[t,s])=>{if(optionsMatches(r,"ignoreShorthands",t))return e;for(const r of s)(e[r]||(e[r]=[])).push(t);return e}),{});eachDeclarationBlock(t,(e=>{const r={};e((e=>{const t=e.prop.toLowerCase(),o=vendor.unprefixed(t),i=vendor.prefix(t),n=a[o];if(n)for(const a of n){const o=i+a;r[o]||(r[o]=[]),r[o].push(t);const n=shorthandData[a].map((e=>i+e));arrayEqual(n.sort(),r[o].sort())&&report({ruleName:ruleName,result:s,node:e,message:messages.expected(o)})}}))}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/d6eaa10887726707b22d0355b8c4910d1e7eeedf5f3448a406b6a79d0bd9399b.map