/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-list-comma-space-before/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const ruleMessages=require("../../utils/ruleMessages"),selectorListCommaWhitespaceChecker=require("../selectorListCommaWhitespaceChecker"),validateOptions=require("../../utils/validateOptions"),whitespaceChecker=require("../../utils/whitespaceChecker"),ruleName="selector-list-comma-space-before",messages=ruleMessages(ruleName,{expectedBefore:()=>'Expected single space before ","',rejectedBefore:()=>'Unexpected whitespace before ","',expectedBeforeSingleLine:()=>'Expected single space before "," in a single-line list',rejectedBeforeSingleLine:()=>'Unexpected whitespace before "," in a single-line list'}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-list-comma-space-before"},rule=(e,s,r)=>{const t=whitespaceChecker("space",e,messages);return(s,l)=>{if(!validateOptions(l,ruleName,{actual:e,possible:["always","never","always-single-line","never-single-line"]}))return;let a;if(selectorListCommaWhitespaceChecker({root:s,result:l,locationChecker:t.before,checkedRuleName:ruleName,fix:r.fix?(e,s)=>{a=a||new Map;const r=a.get(e)||[];return r.push(s),a.set(e,r),!0}:null}),a)for(const[s,r]of a.entries()){let t=s.raws.selector?s.raws.selector.raw:s.selector;for(const s of r.sort(((e,s)=>s-e))){let r=t.slice(0,s);const l=t.slice(s);e.includes("always")?r=r.replace(/\s*$/," "):e.includes("never")&&(r=r.replace(/\s*$/,"")),t=r+l}s.raws.selector?s.raws.selector.raw=t:s.selector=t}}};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/4671cecc12b205758fa9f16fead928613ac55bc72b672b31aae8a0b6d5c09773.map