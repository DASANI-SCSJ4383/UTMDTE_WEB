/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/function-allowed-list/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const declarationValueIndex=require("../../utils/declarationValueIndex"),isStandardSyntaxFunction=require("../../utils/isStandardSyntaxFunction"),matchesStringOrRegExp=require("../../utils/matchesStringOrRegExp"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),valueParser=require("postcss-value-parser"),vendor=require("../../utils/vendor"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="function-allowed-list",messages=ruleMessages(ruleName,{rejected:e=>`Unexpected function "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/function-allowed-list"},rule=e=>(r,s)=>{validateOptions(s,ruleName,{actual:e,possible:[isString,isRegExp]})&&r.walkDecls((r=>{const t=r.value;valueParser(t).walk((t=>{"function"===t.type&&isStandardSyntaxFunction(t)&&(matchesStringOrRegExp(vendor.unprefixed(t.value),e)||report({message:messages.rejected(t.value),node:r,index:declarationValueIndex(r)+t.sourceIndex,result:s,ruleName:ruleName}))}))}))};rule.primaryOptionArray=!0,rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/b844d696f0baa7cd41aeddd0c77da69d6fa8a254acc0707415bf28ce4bf24227.map