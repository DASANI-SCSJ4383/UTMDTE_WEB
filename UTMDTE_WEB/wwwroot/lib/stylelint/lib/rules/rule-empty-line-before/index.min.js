/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/rule-empty-line-before/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const addEmptyLineBefore=require("../../utils/addEmptyLineBefore"),getPreviousNonSharedLineCommentNode=require("../../utils/getPreviousNonSharedLineCommentNode"),hasEmptyLine=require("../../utils/hasEmptyLine"),isAfterSingleLineComment=require("../../utils/isAfterSingleLineComment"),isFirstNested=require("../../utils/isFirstNested"),isFirstNodeOfRoot=require("../../utils/isFirstNodeOfRoot"),isSingleLineString=require("../../utils/isSingleLineString"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),optionsMatches=require("../../utils/optionsMatches"),removeEmptyLinesBefore=require("../../utils/removeEmptyLinesBefore"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),ruleName="rule-empty-line-before",messages=ruleMessages(ruleName,{expected:"Expected empty line before rule",rejected:"Unexpected empty line before rule"}),meta={url:"https://stylelint.io/user-guide/rules/list/rule-empty-line-before"},rule=(e,t,i)=>(r,s)=>{if(!validateOptions(s,ruleName,{actual:e,possible:["always","never","always-multi-line","never-multi-line"]},{actual:t,possible:{ignore:["after-comment","first-nested","inside-block"],except:["after-rule","after-single-line-comment","first-nested","inside-block-and-after-rule","inside-block"]},optional:!0}))return;const n=e;r.walkRules((e=>{if(!isStandardSyntaxRule(e))return;if(isFirstNodeOfRoot(e))return;if(optionsMatches(t,"ignore","after-comment")){const t=e.prev();if(t&&"comment"===t.type)return}if(optionsMatches(t,"ignore","first-nested")&&isFirstNested(e))return;const r=e.parent&&"root"!==e.parent.type;if(optionsMatches(t,"ignore","inside-block")&&r)return;if(n.includes("multi-line")&&isSingleLineString(e.toString()))return;let o=n.includes("always");(optionsMatches(t,"except","first-nested")&&isFirstNested(e)||optionsMatches(t,"except","after-rule")&&isAfterRule(e)||optionsMatches(t,"except","inside-block-and-after-rule")&&r&&isAfterRule(e)||optionsMatches(t,"except","after-single-line-comment")&&isAfterSingleLineComment(e)||optionsMatches(t,"except","inside-block")&&r)&&(o=!o);if(o===hasEmptyLine(e.raws.before))return;if(i.fix){const t=i.newline;if("string"!=typeof t)throw new Error(`The "newline" property must be a string: ${t}`);return void(o?addEmptyLineBefore(e,t):removeEmptyLinesBefore(e,t))}const l=o?messages.expected:messages.rejected;report({message:l,node:e,result:s,ruleName:ruleName})}))};function isAfterRule(e){const t=getPreviousNonSharedLineCommentNode(e);return null!=t&&"rule"===t.type}rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/ef5538f5b4c1e230343022e79d8d94bf5d5710c1fb442298fb6a1f8afba18453.map