/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/alpha-value-notation/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const valueParser=require("postcss-value-parser"),declarationValueIndex=require("../../utils/declarationValueIndex"),getDeclarationValue=require("../../utils/getDeclarationValue"),isStandardSyntaxValue=require("../../utils/isStandardSyntaxValue"),optionsMatches=require("../../utils/optionsMatches"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),setDeclarationValue=require("../../utils/setDeclarationValue"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString,assert:assert}=require("../../utils/validateTypes"),ruleName="alpha-value-notation",messages=ruleMessages(ruleName,{expected:(e,t)=>`Expected "${e}" to be "${t}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/alpha-value-notation"},ALPHA_PROPS=new Set(["opacity","shape-image-threshold"]),ALPHA_FUNCS=new Set(["hsl","hsla","hwb","lab","lch","rgb","rgba"]),rule=(e,t,r)=>(n,a)=>{if(!validateOptions(a,ruleName,{actual:e,possible:["number","percentage"]},{actual:t,possible:{exceptProperties:[isString,isRegExp]},optional:!0}))return;const s=Object.freeze({number:{expFunc:isNumber,fixFunc:asNumber},percentage:{expFunc:isPercentage,fixFunc:asPercentage}});n.walkDecls((n=>{let u=!1;const i=valueParser(getDeclarationValue(n));i.walk((i=>{let l;if(ALPHA_PROPS.has(n.prop.toLowerCase()))l=findAlphaInValue(i);else{if("function"!==i.type)return;if(!ALPHA_FUNCS.has(i.value.toLowerCase()))return;l=findAlphaInFunction(i)}if(!l)return;const{value:o}=l;if(!isStandardSyntaxValue(o))return;if(!isNumber(o)&&!isPercentage(o))return;let c=e;if(optionsMatches(t,"exceptProperties",n.prop)&&("number"===c?c="percentage":"percentage"===c&&(c="number")),s[c].expFunc(o))return;const p=s[c].fixFunc(o),d=o;if(r.fix)return l.value=String(p),void(u=!0);report({message:messages.expected(d,p),node:n,index:declarationValueIndex(n)+l.sourceIndex,result:a,ruleName:ruleName})})),u&&setDeclarationValue(n,i.toString())}))};function asPercentage(e){const t=Number(e);return`${Number((100*t).toPrecision(3))}%`}function asNumber(e){const t=valueParser.unit(e);assert(t);const r=Number(t.number);return Number((r/100).toPrecision(3)).toString()}function findAlphaInValue(e){return"word"===e.type||"function"===e.type?e:void 0}function findAlphaInFunction(e){const t=e.nodes.filter((({type:e})=>"word"===e||"function"===e));if(4===t.length)return t[3];const r=e.nodes.findIndex((({type:e,value:t})=>"div"===e&&"/"===t));if(-1!==r){return e.nodes.slice(r+1,e.nodes.length).find((({type:e})=>"word"===e))}}function isPercentage(e){const t=valueParser.unit(e);return t&&"%"===t.unit}function isNumber(e){const t=valueParser.unit(e);return t&&""===t.unit}rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/4b94ce703098e5af4dfbb81539652a73a0b2679a2c2b00e4a263e557238e1649.map