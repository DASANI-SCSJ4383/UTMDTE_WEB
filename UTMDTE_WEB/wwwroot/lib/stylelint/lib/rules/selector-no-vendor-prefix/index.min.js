/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-no-vendor-prefix/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isAutoprefixable=require("../../utils/isAutoprefixable"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),optionsMatches=require("../../utils/optionsMatches"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isString:isString}=require("../../utils/validateTypes"),ruleName="selector-no-vendor-prefix",messages=ruleMessages(ruleName,{rejected:e=>`Unexpected vendor-prefix "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-no-vendor-prefix"},rule=(e,r,s)=>(t,i)=>{validateOptions(i,ruleName,{actual:e},{actual:r,possible:{ignoreSelectors:[isString]},optional:!0})&&t.walkRules((e=>{if(!isStandardSyntaxRule(e))return;const t=e.selector;parseSelector(t,i,e,(t=>{t.walkPseudos((t=>{if(isAutoprefixable.selector(t.value)){if(optionsMatches(r,"ignoreSelectors",t.value))return;if(s.fix)return void(e.selector=isAutoprefixable.unprefix(e.selector));report({result:i,ruleName:ruleName,message:messages.rejected(t.value),node:e,index:(e.raws.before||"").length+t.sourceIndex})}}))}))}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/abef65c50c447ba084831969e651f921ed3fee65c296e02a6c2790deb0ff2db2.map