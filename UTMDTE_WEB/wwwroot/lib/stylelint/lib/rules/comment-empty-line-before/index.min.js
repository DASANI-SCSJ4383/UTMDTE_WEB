/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/comment-empty-line-before/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const addEmptyLineBefore=require("../../utils/addEmptyLineBefore"),hasEmptyLine=require("../../utils/hasEmptyLine"),isAfterComment=require("../../utils/isAfterComment"),isFirstNested=require("../../utils/isFirstNested"),isFirstNodeOfRoot=require("../../utils/isFirstNodeOfRoot"),isSharedLineComment=require("../../utils/isSharedLineComment"),isStandardSyntaxComment=require("../../utils/isStandardSyntaxComment"),optionsMatches=require("../../utils/optionsMatches"),removeEmptyLinesBefore=require("../../utils/removeEmptyLinesBefore"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="comment-empty-line-before",messages=ruleMessages(ruleName,{expected:"Expected empty line before comment",rejected:"Unexpected empty line before comment"}),meta={url:"https://stylelint.io/user-guide/rules/list/comment-empty-line-before"},stylelintCommandPrefix="stylelint-",rule=(e,t,s)=>(i,r)=>{validateOptions(r,ruleName,{actual:e,possible:["always","never"]},{actual:t,possible:{except:["first-nested"],ignore:["stylelint-commands","after-comment"],ignoreComments:[isString,isRegExp]},optional:!0})&&i.walkComments((i=>{if(isFirstNodeOfRoot(i))return;if(i.text.startsWith("stylelint-")&&optionsMatches(t,"ignore","stylelint-commands"))return;if(optionsMatches(t,"ignore","after-comment")&&isAfterComment(i))return;if(optionsMatches(t,"ignoreComments",i.text))return;if(isSharedLineComment(i))return;if(!isStandardSyntaxComment(i))return;const n=!(optionsMatches(t,"except","first-nested")&&isFirstNested(i)||"always"!==e),o=i.raws.before||"";if(n===hasEmptyLine(o))return;if(s.fix){if("string"!=typeof s.newline)return;return void(n?addEmptyLineBefore(i,s.newline):removeEmptyLinesBefore(i,s.newline))}const m=n?messages.expected:messages.rejected;report({message:m,node:i,result:r,ruleName:ruleName})}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/70c357d3746505a5e29679db17b72efde24488bd99d80f4042f2a148c3e3fb6d.map