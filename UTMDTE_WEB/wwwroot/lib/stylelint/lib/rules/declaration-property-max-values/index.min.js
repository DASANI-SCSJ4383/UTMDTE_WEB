/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/declaration-property-max-values/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const valueParser=require("postcss-value-parser"),matchesStringOrRegExp=require("../../utils/matchesStringOrRegExp"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),vendor=require("../../utils/vendor"),validateOptions=require("../../utils/validateOptions"),{isNumber:isNumber}=require("../../utils/validateTypes"),validateObjectWithProps=require("../../utils/validateObjectWithProps"),ruleName="declaration-property-max-values",messages=ruleMessages(ruleName,{rejected:(e,r)=>`Expected "${e}" to have no more than ${r} ${1===r?"value":"values"}`}),meta={url:"https://stylelint.io/user-guide/rules/list/declaration-property-max-values"},isValueNode=e=>"word"===e.type||"function"===e.type||"string"===e.type,rule=e=>(r,s)=>{validateOptions(s,ruleName,{actual:e,possible:[validateObjectWithProps(isNumber)]})&&r.walkDecls((r=>{const{prop:t,value:a}=r,l=valueParser(a).nodes.filter(isValueNode).length,u=vendor.unprefixed(t),i=Object.keys(e).find((e=>matchesStringOrRegExp(u,e)));if(!i)return;const o=e[i];l<=o||report({message:messages.rejected(t,o),node:r,result:s,ruleName:ruleName})}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/3ad432b80f5132a6012394bdec415d832cc0bad8709f98e32218a8788a514ea6.map