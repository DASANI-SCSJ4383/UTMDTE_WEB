/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/at-rule-empty-line-before/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const addEmptyLineBefore=require("../../utils/addEmptyLineBefore"),getPreviousNonSharedLineCommentNode=require("../../utils/getPreviousNonSharedLineCommentNode"),hasEmptyLine=require("../../utils/hasEmptyLine"),isAfterComment=require("../../utils/isAfterComment"),isBlocklessAtRuleAfterBlocklessAtRule=require("../../utils/isBlocklessAtRuleAfterBlocklessAtRule"),isBlocklessAtRuleAfterSameNameBlocklessAtRule=require("../../utils/isBlocklessAtRuleAfterSameNameBlocklessAtRule"),isFirstNested=require("../../utils/isFirstNested"),isFirstNodeOfRoot=require("../../utils/isFirstNodeOfRoot"),isStandardSyntaxAtRule=require("../../utils/isStandardSyntaxAtRule"),optionsMatches=require("../../utils/optionsMatches"),removeEmptyLinesBefore=require("../../utils/removeEmptyLinesBefore"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isString:isString}=require("../../utils/validateTypes"),ruleName="at-rule-empty-line-before",messages=ruleMessages(ruleName,{expected:"Expected empty line before at-rule",rejected:"Unexpected empty line before at-rule"}),meta={url:"https://stylelint.io/user-guide/rules/list/at-rule-empty-line-before"},rule=(e,s,t)=>(r,l)=>{if(!validateOptions(l,ruleName,{actual:e,possible:["always","never"]},{actual:s,possible:{except:["after-same-name","inside-block","blockless-after-same-name-blockless","blockless-after-blockless","first-nested"],ignore:["after-comment","first-nested","inside-block","blockless-after-same-name-blockless","blockless-after-blockless"],ignoreAtRules:[isString]},optional:!0}))return;const i=e;r.walkAtRules((e=>{const r=e.parent&&"root"!==e.parent.type;if(isFirstNodeOfRoot(e))return;if(!isStandardSyntaxAtRule(e))return;if(optionsMatches(s,"ignoreAtRules",e.name))return;if(optionsMatches(s,"ignore","blockless-after-blockless")&&isBlocklessAtRuleAfterBlocklessAtRule(e))return;if(optionsMatches(s,"ignore","first-nested")&&isFirstNested(e))return;if(optionsMatches(s,"ignore","blockless-after-same-name-blockless")&&isBlocklessAtRuleAfterSameNameBlocklessAtRule(e))return;if(optionsMatches(s,"ignore","inside-block")&&r)return;if(optionsMatches(s,"ignore","after-comment")&&isAfterComment(e))return;const o=hasEmptyLine(e.raws.before);let a="always"===i;if((optionsMatches(s,"except","after-same-name")&&isAtRuleAfterSameNameAtRule(e)||optionsMatches(s,"except","inside-block")&&r||optionsMatches(s,"except","first-nested")&&isFirstNested(e)||optionsMatches(s,"except","blockless-after-blockless")&&isBlocklessAtRuleAfterBlocklessAtRule(e)||optionsMatches(s,"except","blockless-after-same-name-blockless")&&isBlocklessAtRuleAfterSameNameBlocklessAtRule(e))&&(a=!a),a===o)return;if(t.fix&&t.newline)return void(a?addEmptyLineBefore(e,t.newline):removeEmptyLinesBefore(e,t.newline));const n=a?messages.expected:messages.rejected;report({message:n,node:e,result:l,ruleName:ruleName})}))};function isAtRuleAfterSameNameAtRule(e){const s=getPreviousNonSharedLineCommentNode(e);return s&&"atrule"===s.type&&s.name===e.name}rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/79e22463ee83bcccb6d4314240c5484346e041d31fe834569a8e400d64182591.map