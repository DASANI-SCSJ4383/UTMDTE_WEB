/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-list-comma-space-after/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const ruleMessages=require("../../utils/ruleMessages"),selectorListCommaWhitespaceChecker=require("../selectorListCommaWhitespaceChecker"),validateOptions=require("../../utils/validateOptions"),whitespaceChecker=require("../../utils/whitespaceChecker"),ruleName="selector-list-comma-space-after",messages=ruleMessages(ruleName,{expectedAfter:()=>'Expected single space after ","',rejectedAfter:()=>'Unexpected whitespace after ","',expectedAfterSingleLine:()=>'Expected single space after "," in a single-line list',rejectedAfterSingleLine:()=>'Unexpected whitespace after "," in a single-line list'}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-list-comma-space-after"},rule=(e,s,t)=>{const r=whitespaceChecker("space",e,messages);return(s,a)=>{if(!validateOptions(a,ruleName,{actual:e,possible:["always","never","always-single-line","never-single-line"]}))return;let l;if(selectorListCommaWhitespaceChecker({root:s,result:a,locationChecker:r.after,checkedRuleName:ruleName,fix:t.fix?(e,s)=>{l=l||new Map;const t=l.get(e)||[];return t.push(s),l.set(e,t),!0}:null}),l)for(const[s,t]of l.entries()){let r=s.raws.selector?s.raws.selector.raw:s.selector;for(const s of t.sort(((e,s)=>s-e))){const t=r.slice(0,s+1);let a=r.slice(s+1);e.startsWith("always")?a=a.replace(/^\s*/," "):e.startsWith("never")&&(a=a.replace(/^\s*/,"")),r=t+a}s.raws.selector?s.raws.selector.raw=r:s.selector=r}}};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/f3c62e6b6ebc8329de03b355bcea8a145054900eed6d48a72bc33c8f98c183b8.map