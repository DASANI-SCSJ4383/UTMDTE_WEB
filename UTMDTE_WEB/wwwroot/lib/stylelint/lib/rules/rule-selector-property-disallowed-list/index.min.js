/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/rule-selector-property-disallowed-list/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),matchesStringOrRegExp=require("../../utils/matchesStringOrRegExp"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateObjectWithArrayProps=require("../../utils/validateObjectWithArrayProps"),validateOptions=require("../../utils/validateOptions"),{isString:isString,isRegExp:isRegExp}=require("../../utils/validateTypes"),ruleName="rule-selector-property-disallowed-list",messages=ruleMessages(ruleName,{rejected:(e,r)=>`Unexpected property "${e}" for selector "${r}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/rule-selector-property-disallowed-list"},rule=e=>(r,t)=>{if(!validateOptions(t,ruleName,{actual:e,possible:[validateObjectWithArrayProps(isString,isRegExp)]}))return;const s=Object.keys(e);r.walkRules((r=>{if(!isStandardSyntaxRule(r))return;const i=s.find((e=>matchesStringOrRegExp(r.selector,e)));if(!i)return;const l=e[i];for(const e of r.nodes){"decl"===e.type&&matchesStringOrRegExp(e.prop,l)&&report({message:messages.rejected(e.prop,r.selector),node:e,result:t,ruleName:ruleName})}}))};rule.primaryOptionArray=!0,rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/15896d6843420dd6ddf93bb31064cc2f79400098245bfd9a685836af68c34482.map