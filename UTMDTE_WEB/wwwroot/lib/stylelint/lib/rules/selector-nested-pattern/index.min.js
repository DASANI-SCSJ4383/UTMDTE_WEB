/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-nested-pattern/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="selector-nested-pattern",messages=ruleMessages(ruleName,{expected:(e,t)=>`Expected nested selector "${e}" to match pattern "${t}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-nested-pattern"},rule=e=>(t,s)=>{if(!validateOptions(s,ruleName,{actual:e,possible:[isRegExp,isString]}))return;const r=isString(e)?new RegExp(e):e;t.walkRules((t=>{if(t.parent&&"rule"!==t.parent.type)return;if(!isStandardSyntaxRule(t))return;const a=t.selector;r.test(a)||report({result:s,ruleName:ruleName,message:messages.expected(a,e),node:t})}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/067e82775b7a4d1a10ffad6c33bc25ae84517fc14f869268b1c694ce0928ff01.map