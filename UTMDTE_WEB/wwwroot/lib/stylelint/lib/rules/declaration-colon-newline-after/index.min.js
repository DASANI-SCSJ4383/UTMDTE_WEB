/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/declaration-colon-newline-after/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const declarationValueIndex=require("../../utils/declarationValueIndex"),isStandardSyntaxDeclaration=require("../../utils/isStandardSyntaxDeclaration"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),whitespaceChecker=require("../../utils/whitespaceChecker"),ruleName="declaration-colon-newline-after",messages=ruleMessages(ruleName,{expectedAfter:()=>'Expected newline after ":"',expectedAfterMultiLine:()=>'Expected newline after ":" with a multi-line declaration'}),meta={url:"https://stylelint.io/user-guide/rules/list/declaration-colon-newline-after"},rule=(e,t,r)=>{const l=whitespaceChecker("newline",e,messages);return(t,a)=>{validateOptions(a,ruleName,{actual:e,possible:["always","always-multi-line"]})&&t.walkDecls((e=>{if(!isStandardSyntaxDeclaration(e))return;const t=declarationValueIndex(e)+(e.raws.between||"").length-1,n=`${e.toString().slice(0,t)}xxx`;for(let t=0,s=n.length;t<s;t++){if(":"!==n[t])continue;const s=/^[^\S\r\n]*\/\*/.test(n.slice(t+1))?n.indexOf("*/",t)+1:t;l.afterOneOnly({source:n,index:s,lineCheckStr:e.value,err:t=>{if(r.fix){const t=e.raws.between;if(null==t)throw new Error("`between` must be present");const l=declarationValueIndex(e)-t.length,a=s-l+1,n=t.slice(0,a),i=t.slice(a);e.raws.between=/^\s*\n/.test(i)?n+i.replace(/^[^\S\r\n]*/,""):n+r.newline+i}else report({message:t,node:e,index:s,result:a,ruleName:ruleName})}})}}))}};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/4c59a8a8576c92a0f500cdbe7ee04cc1100aed0dcc630dc76e0c0f21f1ac5b25.map