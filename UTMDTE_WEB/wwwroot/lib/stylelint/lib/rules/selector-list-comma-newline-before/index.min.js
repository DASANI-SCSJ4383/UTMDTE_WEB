/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-list-comma-newline-before/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const ruleMessages=require("../../utils/ruleMessages"),selectorListCommaWhitespaceChecker=require("../selectorListCommaWhitespaceChecker"),validateOptions=require("../../utils/validateOptions"),whitespaceChecker=require("../../utils/whitespaceChecker"),ruleName="selector-list-comma-newline-before",messages=ruleMessages(ruleName,{expectedBefore:()=>'Expected newline before ","',expectedBeforeMultiLine:()=>'Expected newline before "," in a multi-line list',rejectedBeforeMultiLine:()=>'Unexpected whitespace before "," in a multi-line list'}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-list-comma-newline-before"},rule=(e,s,t)=>{const l=whitespaceChecker("newline",e,messages);return(s,r)=>{if(!validateOptions(r,ruleName,{actual:e,possible:["always","always-multi-line","never-multi-line"]}))return;let i;if(selectorListCommaWhitespaceChecker({root:s,result:r,locationChecker:l.beforeAllowingIndentation,checkedRuleName:ruleName,fix:t.fix?(e,s)=>{i=i||new Map;const t=i.get(e)||[];return t.push(s),i.set(e,t),!0}:null}),i)for(const[s,l]of i.entries()){let r=s.raws.selector?s.raws.selector.raw:s.selector;for(const s of l.sort(((e,s)=>s-e))){let l=r.slice(0,s);const i=r.slice(s);if(e.startsWith("always")){const e=l.search(/\s+$/);e>=0?l=l.slice(0,e)+t.newline+l.slice(e):l+=t.newline}else"never-multi-line"===e&&(l=l.replace(/\s*$/,""));r=l+i}s.raws.selector?s.raws.selector.raw=r:s.selector=r}}};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/5d048dcd64b93c7cbf02d9e77df4bfb80cf940e0a3020b4aaac946c190f5669f.map