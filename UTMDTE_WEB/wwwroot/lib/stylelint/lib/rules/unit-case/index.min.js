/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/unit-case/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const atRuleParamIndex=require("../../utils/atRuleParamIndex"),declarationValueIndex=require("../../utils/declarationValueIndex"),getUnitFromValueNode=require("../../utils/getUnitFromValueNode"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),valueParser=require("postcss-value-parser"),ruleName="unit-case",messages=ruleMessages(ruleName,{expected:(e,a)=>`Expected "${e}" to be "${a}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/unit-case"},rule=(e,a,r)=>(a,s)=>{function t(a,t,l){const u=[];function i(r){const s=getUnitFromValueNode(r);if(!s)return!1;const t="lower"===e?s.toLowerCase():s.toUpperCase();return s!==t&&(u.push({index:l(a)+r.sourceIndex,message:messages.expected(s,t)}),!0)}const n=valueParser(t).walk((a=>{let s=!1;const t=a.value;if("function"===a.type&&"url"===t.toLowerCase())return!1;t.includes("*")&&t.split("*").some((e=>i({...a,sourceIndex:t.indexOf(e)+e.length+1,value:e}))),s=i(a),s&&r.fix&&(a.value="lower"===e?t.toLowerCase():t.toUpperCase())}));if(u.length)if(r.fix)"name"in a&&"media"===a.name?a.params=n.toString():"value"in a&&(a.value=n.toString());else for(const e of u)report({index:e.index,message:e.message,node:a,result:s,ruleName:ruleName})}validateOptions(s,ruleName,{actual:e,possible:["lower","upper"]})&&(a.walkAtRules((e=>{(/^media$/i.test(e.name)||"variable"in e)&&t(e,e.params,atRuleParamIndex)})),a.walkDecls((e=>t(e,e.value,declarationValueIndex))))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/ea175a8dc07266a46936d32226245a1d016b5598c20b959592101239d179b624.map