/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-disallowed-list/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),matchesStringOrRegExp=require("../../utils/matchesStringOrRegExp"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="selector-disallowed-list",messages=ruleMessages(ruleName,{rejected:e=>`Unexpected selector "${e}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-disallowed-list"},rule=e=>(s,r)=>{validateOptions(r,ruleName,{actual:e,possible:[isString,isRegExp]})&&s.walkRules((s=>{if(!isStandardSyntaxRule(s))return;const t=s.selector;matchesStringOrRegExp(t,e)&&report({result:r,ruleName:ruleName,message:messages.rejected(t),node:s})}))};rule.primaryOptionArray=!0,rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/b50f398a59565601459eb6fcbf5b155e9ce86be60e369914b562787dae114ed8.map