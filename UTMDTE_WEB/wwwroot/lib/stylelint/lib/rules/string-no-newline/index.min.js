/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/string-no-newline/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const atRuleParamIndex=require("../../utils/atRuleParamIndex"),declarationValueIndex=require("../../utils/declarationValueIndex"),isStandardSyntaxSelector=require("../../utils/isStandardSyntaxSelector"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),valueParser=require("postcss-value-parser"),ruleName="string-no-newline",reNewLine=/\r?\n/,messages=ruleMessages(ruleName,{rejected:"Unexpected newline in string"}),meta={url:"https://stylelint.io/user-guide/rules/list/string-no-newline"},rule=e=>(r,t)=>{function s(e,r,s){reNewLine.test(r)&&valueParser(r).walk((r=>{if("string"!==r.type)return;const a=reNewLine.exec(r.value);if(!a)return;const l=[r.quote,a.input.slice(0,a.index)].reduce(((e,r)=>e+r.length),r.sourceIndex);report({message:messages.rejected,node:e,index:s(e)+l,result:t,ruleName:ruleName})}))}validateOptions(t,ruleName,{actual:e})&&r.walk((e=>{switch(e.type){case"atrule":s(e,e.params,atRuleParamIndex);break;case"decl":s(e,e.value,declarationValueIndex);break;case"rule":!function(e){if(!reNewLine.test(e.selector))return;if(!isStandardSyntaxSelector(e.selector))return;parseSelector(e.selector,t,e,(r=>{r.walkAttributes((r=>{const s=reNewLine.exec(r.value||"");if(!s)return;const a=[r.attribute,r.operator||"",s.input.slice(0,s.index)].reduce(((e,r)=>e+r.length),r.sourceIndex+1);report({message:messages.rejected,node:e,index:a,result:t,ruleName:ruleName})}))}))}(e)}}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/d82477c0c03942be719e99949b257f7a92b4cf480f6ec78d0c38b9d2698d4f1f.map