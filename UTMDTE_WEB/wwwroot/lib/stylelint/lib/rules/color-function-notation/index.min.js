/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/color-function-notation/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const valueParser=require("postcss-value-parser"),declarationValueIndex=require("../../utils/declarationValueIndex"),getDeclarationValue=require("../../utils/getDeclarationValue"),isStandardSyntaxColorFunction=require("../../utils/isStandardSyntaxColorFunction"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),setDeclarationValue=require("../../utils/setDeclarationValue"),{isValueFunction:isValueFunction}=require("../../utils/typeGuards"),validateOptions=require("../../utils/validateOptions"),ruleName="color-function-notation",messages=ruleMessages(ruleName,{expected:e=>`Expected ${e} color-function notation`}),meta={url:"https://stylelint.io/user-guide/rules/list/color-function-notation"},LEGACY_FUNCS=new Set(["rgba","hsla"]),LEGACY_NOTATION_FUNCS=new Set(["rgb","rgba","hsl","hsla"]),rule=(e,a,t)=>(a,r)=>{validateOptions(r,ruleName,{actual:e,possible:["modern","legacy"]})&&a.walkDecls((a=>{let s=!1;const l=valueParser(getDeclarationValue(a));l.walk((l=>{if(!isValueFunction(l))return;if(!isStandardSyntaxColorFunction(l))return;const{value:u,sourceIndex:n,nodes:o}=l;if(LEGACY_NOTATION_FUNCS.has(u.toLowerCase())&&("modern"!==e||hasCommas(l))&&("legacy"!==e||!hasCommas(l))){if(t.fix&&"modern"===e){let e=0;return l.nodes=o.map((a=>(isComma(a)&&(e<2?(a.type="space",a.value=atLeastOneSpace(a.after),e++):(a.value="/",a.before=atLeastOneSpace(a.before),a.after=atLeastOneSpace(a.after))),a))),LEGACY_FUNCS.has(l.value.toLowerCase())&&(l.value=l.value.slice(0,-1)),void(s=!0)}report({message:messages.expected(e),node:a,index:declarationValueIndex(a)+n,result:r,ruleName:ruleName})}})),s&&setDeclarationValue(a,l.toString())}))};function atLeastOneSpace(e){return""!==e?e:" "}function isComma(e){return"div"===e.type&&","===e.value}function hasCommas(e){return e.nodes&&e.nodes.some((e=>isComma(e)))}rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/c37e909193f48ee997149c680b99f5da615d298f31c05dbebfd4208ed00099b4.map