/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-max-specificity/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),isStandardSyntaxSelector=require("../../utils/isStandardSyntaxSelector"),keywordSets=require("../../reference/keywordSets"),optionsMatches=require("../../utils/optionsMatches"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),resolvedNestedSelector=require("postcss-resolve-nested-selector"),ruleMessages=require("../../utils/ruleMessages"),specificity=require("specificity"),validateOptions=require("../../utils/validateOptions"),{isRegExp:isRegExp,isString:isString}=require("../../utils/validateTypes"),ruleName="selector-max-specificity",messages=ruleMessages(ruleName,{expected:(e,t)=>`Expected "${e}" to have a specificity no more than "${t}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-max-specificity"},zeroSpecificity=()=>[0,0,0,0],specificitySum=e=>{const t=[0,0,0,0];for(const s of e)for(const[e,r]of s.entries())t[e]+=r;return t},rule=(e,t)=>(s,r)=>{if(!validateOptions(r,ruleName,{actual:e,possible:[e=>isString(e)&&/^\d+,\d+,\d+$/.test(e)]},{actual:t,possible:{ignoreSelectors:[isString,isRegExp]},optional:!0}))return;const i=e=>optionsMatches(t,"ignoreSelectors",e)?[0,0,0,0]:specificity.calculate(e)[0].specificityArray,a=e=>e.reduce(((e,t)=>{const s=o(t);return 1===specificity.compare(s,e)?s:e}),[0,0,0,0]),o=e=>{if((e=>{const t=e.parent&&e.parent.parent;if(t&&t.value){const e=t.value.toLowerCase().replace(/:+/,"");return"pseudo"===t.type&&(keywordSets.aNPlusBNotationPseudoClasses.has(e)||keywordSets.linguisticPseudoClasses.has(e))}return!1})(e))return[0,0,0,0];switch(e.type){case"attribute":case"class":case"id":case"tag":return i(e.toString());case"pseudo":return(e=>{const t=e.value,s=":not"===t||":matches"===t?[0,0,0,0]:i(t);return specificitySum([s,a(e)])})(e);case"selector":return specificitySum(e.map((e=>o(e))));default:return[0,0,0,0]}},c=[0,...e.split(",").map((e=>Number.parseFloat(e)))];s.walkRules((t=>{if(isStandardSyntaxRule(t))for(const s of t.selectors)for(const i of resolvedNestedSelector(s,t))try{if(!isStandardSyntaxSelector(i))continue;parseSelector(i,r,t,(o=>{1===specificity.compare(a(o),c)&&report({ruleName:ruleName,result:r,node:t,message:messages.expected(i,e),word:s})}))}catch{r.warn("Cannot parse selector",{node:t,stylelintType:"parseError"})}}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/19353056e93847dad4130715e95a61497813f578601aa8e9a57ffaf06e70ae19.map