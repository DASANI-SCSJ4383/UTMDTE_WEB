/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-max-universal/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isNonNegativeInteger=require("../../utils/isNonNegativeInteger"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),resolvedNestedSelector=require("postcss-resolve-nested-selector"),ruleMessages=require("../../utils/ruleMessages"),selectorParser=require("postcss-selector-parser"),validateOptions=require("../../utils/validateOptions"),ruleName="selector-max-universal",messages=ruleMessages(ruleName,{expected:(e,s)=>`Expected "${e}" to have no more than ${s} universal ${1===s?"selector":"selectors"}`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-max-universal"},rule=e=>(s,r)=>{function t(s,l){const a=s.reduce(((e,s)=>("selector"===s.type&&t(s,l),"universal"===s.type&&(e+=1),e)),0);if("root"!==s.type&&"pseudo"!==s.type&&a>e){const t=s.toString();report({ruleName:ruleName,result:r,node:l,message:messages.expected(t,e),word:t})}}validateOptions(r,ruleName,{actual:e,possible:isNonNegativeInteger})&&s.walkRules((e=>{if(!isStandardSyntaxRule(e))return;const s=[];selectorParser().astSync(e.selector).walk((e=>{"selector"===e.type&&s.push(String(e).trim())}));for(const l of s)for(const s of resolvedNestedSelector(l,e))parseSelector(s,r,e,(s=>t(s,e)))}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/c9bd3d2de8bb027c06820c45388bde5b6eeaaa99b404a600d5544ff05c9788d1.map