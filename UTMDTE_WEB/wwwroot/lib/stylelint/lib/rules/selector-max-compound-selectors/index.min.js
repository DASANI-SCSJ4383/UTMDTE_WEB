/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/selector-max-compound-selectors/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isContextFunctionalPseudoClass=require("../../utils/isContextFunctionalPseudoClass"),isNonNegativeInteger=require("../../utils/isNonNegativeInteger"),isStandardSyntaxRule=require("../../utils/isStandardSyntaxRule"),parseSelector=require("../../utils/parseSelector"),report=require("../../utils/report"),resolvedNestedSelector=require("postcss-resolve-nested-selector"),ruleMessages=require("../../utils/ruleMessages"),validateOptions=require("../../utils/validateOptions"),ruleName="selector-max-compound-selectors",messages=ruleMessages(ruleName,{expected:(e,s)=>`Expected "${e}" to have no more than ${s} compound ${1===s?"selector":"selectors"}`}),meta={url:"https://stylelint.io/user-guide/rules/list/selector-max-compound-selectors"},rule=e=>(s,t)=>{function r(s,o){let l=1;if(s.each((e=>{("selector"===e.type||isContextFunctionalPseudoClass(e))&&r(e,o),"combinator"===e.type&&l++})),"root"!==s.type&&"pseudo"!==s.type&&l>e){const r=s.toString();report({ruleName:ruleName,result:t,node:o,message:messages.expected(r,e),word:r})}}validateOptions(t,ruleName,{actual:e,possible:isNonNegativeInteger})&&s.walkRules((e=>{if(isStandardSyntaxRule(e))for(const s of e.selectors)for(const o of resolvedNestedSelector(s,e))parseSelector(o,t,e,(s=>r(s,e)))}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/e276d541cb403010afa57f56daeb16ae7c8e497cf12e36b36ef489400d73b18b.map