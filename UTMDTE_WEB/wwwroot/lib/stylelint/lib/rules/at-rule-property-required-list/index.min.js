/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/rules/at-rule-property-required-list/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const flattenArray=require("../../utils/flattenArray"),isStandardSyntaxAtRule=require("../../utils/isStandardSyntaxAtRule"),report=require("../../utils/report"),ruleMessages=require("../../utils/ruleMessages"),validateObjectWithArrayProps=require("../../utils/validateObjectWithArrayProps"),validateOptions=require("../../utils/validateOptions"),{isString:isString}=require("../../utils/validateTypes"),ruleName="at-rule-property-required-list",messages=ruleMessages(ruleName,{expected:(e,r)=>`Expected property "${e}" for at-rule "${r}"`}),meta={url:"https://stylelint.io/user-guide/rules/list/at-rule-property-required-list"},rule=e=>(r,t)=>{validateOptions(t,ruleName,{actual:e,possible:[validateObjectWithArrayProps(isString)]})&&r.walkAtRules((r=>{if(!isStandardSyntaxAtRule(r))return;const{name:s,nodes:a}=r,l=s.toLowerCase(),i=flattenArray(e[l]);if(i)for(const e of i){const s=e.toLowerCase();a.find((e=>"decl"===e.type&&e.prop.toLowerCase()===s))||report({message:messages.expected(s,l),node:r,result:t,ruleName:ruleName})}}))};rule.ruleName=ruleName,rule.messages=messages,rule.meta=meta,module.exports=rule;
//# sourceMappingURL=/sm/ca322ed4b0a3638775fbba85e7c125d0416f746020c414fd96a0ee37bb44c8d6.map