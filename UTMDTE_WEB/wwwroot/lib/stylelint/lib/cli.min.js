/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/stylelint@14.6.0/lib/cli.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const checkInvalidCLIOptions=require("./utils/checkInvalidCLIOptions"),EOL=require("os").EOL,getFormatterOptionsText=require("./utils/getFormatterOptionsText"),getModulePath=require("./utils/getModulePath"),getStdin=require("get-stdin"),meow=require("meow"),path=require("path"),printConfig=require("./printConfig"),resolveFrom=require("resolve-from"),standalone=require("./standalone"),writeOutputFile=require("./writeOutputFile"),{red:red,dim:dim}=require("picocolors"),EXIT_CODE_ERROR=2,meowOptions={autoHelp:!1,autoVersion:!1,help:`\n    Usage: stylelint [input] [options]\n\n    Input: Files(s), glob(s), or nothing to use stdin.\n\n      If an input argument is wrapped in quotation marks, it will be passed to\n      globby for cross-platform glob support. node_modules are always ignored.\n      You can also pass no input and use stdin, instead.\n\n    Options:\n\n      --config\n\n        Path to a specific configuration file (JSON, YAML, or CommonJS), or the\n        name of a module in node_modules that points to one. If no --config\n        argument is provided, stylelint will search for configuration files in\n        the following places, in this order:\n          - a stylelint property in package.json\n          - a .stylelintrc file (with or without filename extension:\n            .json, .yaml, .yml, and .js are available)\n          - a stylelint.config.js file exporting a JS object\n        The search will begin in the working directory and move up the directory\n        tree until a configuration file is found.\n\n      --config-basedir\n\n        An absolute path to the directory that relative paths defining "extends"\n        and "plugins" are *relative to*. Only necessary if these values are\n        relative paths.\n\n      --print-config\n\n        Print the configuration for the given path.\n\n      --ignore-path, -i\n\n        Path to a file containing patterns that describe files to ignore. The\n        path can be absolute or relative to process.cwd(). By default, stylelint\n        looks for .stylelintignore in process.cwd().\n\n      --ignore-pattern, --ip\n\n        Pattern of files to ignore (in addition to those in .stylelintignore)\n\n      --fix\n\n        Automatically fix problems of certain rules.\n\n      --custom-syntax\n\n        Module name or path to a JS file exporting a PostCSS-compatible syntax.\n\n      --stdin\n\n        Accept stdin input even if it is empty.\n\n      --stdin-filename\n\n        A filename to assign stdin input.\n\n      --ignore-disables, --id\n\n        Ignore stylelint-disable comments.\n\n      --disable-default-ignores, --di\n\n        Allow linting of node_modules.\n\n      --cache                       [default: false]\n\n        Store the info about processed files in order to only operate on the\n        changed ones the next time you run stylelint. By default, the cache\n        is stored in "./.stylelintcache". To adjust this, use --cache-location.\n\n      --cache-location              [default: '.stylelintcache']\n\n        Path to a file or directory to be used for the cache location.\n        Default is "./.stylelintcache". If a directory is specified, a cache\n        file will be created inside the specified folder, with a name derived\n        from a hash of the current working directory.\n\n        If the directory for the cache does not exist, make sure you add a trailing "/"\n        on *nix systems or "\\" on Windows. Otherwise the path will be assumed to be a file.\n\n      --formatter, -f               [default: "string"]\n\n        The output formatter: ${getFormatterOptionsText({useOr:!0})}.\n\n      --custom-formatter\n\n        Path to a JS file exporting a custom formatting function.\n\n      --quiet, -q\n\n        Only register problems for rules with an "error"-level severity (ignore\n        "warning"-level).\n\n      --color\n      --no-color\n\n        Force enabling/disabling of color.\n\n      --report-needless-disables, --rd\n\n        Also report errors for stylelint-disable comments that are not blocking a lint warning.\n        The process will exit with code 2 if needless disables are found.\n\n      --report-invalid-scope-disables, --risd\n\n        Report stylelint-disable comments that used for rules that don't exist within the configuration object.\n        The process will exit with code 2 if invalid scope disables are found.\n\n      --report-descriptionless-disables, --rdd\n\n        Report stylelint-disable comments without a description.\n        The process will exit with code 2 if descriptionless disables are found.\n\n      --max-warnings, --mw\n\n        Number of warnings above which the process will exit with code 2.\n        Useful when setting "defaultSeverity" to "warning" and expecting the\n        process to fail on warnings (e.g. CI build).\n\n      --output-file, -o\n\n        Path of file to write report.\n\n      --version, -v\n\n        Show the currently installed version of stylelint.\n\n      --allow-empty-input, --aei\n\n        When glob pattern matches no files, the process will exit without throwing an error.\n\t`,flags:{allowEmptyInput:{alias:"aei",type:"boolean"},cache:{type:"boolean"},cacheLocation:{type:"string"},color:{type:"boolean"},config:{type:"string"},configBasedir:{type:"string"},customFormatter:{type:"string"},customSyntax:{type:"string"},disableDefaultIgnores:{alias:"di",type:"boolean"},fix:{type:"boolean"},formatter:{alias:"f",default:"string",type:"string"},help:{alias:"h",type:"boolean"},ignoreDisables:{alias:"id",type:"boolean"},ignorePath:{alias:"i",type:"string"},ignorePattern:{alias:"ip",type:"string",isMultiple:!0},maxWarnings:{alias:"mw",type:"number"},outputFile:{alias:"o",type:"string"},printConfig:{type:"boolean"},quiet:{alias:"q",type:"boolean"},reportDescriptionlessDisables:{alias:"rdd",type:"boolean"},reportInvalidScopeDisables:{alias:"risd",type:"boolean"},reportNeedlessDisables:{alias:"rd",type:"boolean"},stdin:{type:"boolean"},stdinFilename:{type:"string"},syntax:{alias:"s",type:"string"},version:{alias:"v",type:"boolean"}}};function handleError(e){process.stderr.write(e.stack+EOL);const t="number"==typeof e.code?e.code:1;process.exitCode=t}function buildCLI(e){return meow({...meowOptions,argv:e})}module.exports=async e=>{const t=buildCLI(e),n=checkInvalidCLIOptions(meowOptions.flags,t.flags);n&&(process.stderr.write(n),process.exit(2));let i=t.flags.formatter;if(t.flags.customFormatter){const e=path.isAbsolute(t.flags.customFormatter)?t.flags.customFormatter:path.join(process.cwd(),t.flags.customFormatter);i=require(e)}const o={formatter:i};t.flags.quiet&&(o.quiet=t.flags.quiet),t.flags.syntax&&(o.syntax=t.flags.syntax),t.flags.customSyntax&&(o.customSyntax=getModulePath(process.cwd(),t.flags.customSyntax)),t.flags.config&&(o.configFile=resolveFrom.silent(process.cwd(),t.flags.config)||path.join(process.cwd(),t.flags.config)),t.flags.configBasedir&&(o.configBasedir=path.isAbsolute(t.flags.configBasedir)?t.flags.configBasedir:path.resolve(process.cwd(),t.flags.configBasedir)),t.flags.stdinFilename&&(o.codeFilename=t.flags.stdinFilename),t.flags.ignorePath&&(o.ignorePath=t.flags.ignorePath),t.flags.ignorePattern&&(o.ignorePattern=t.flags.ignorePattern),t.flags.ignoreDisables&&(o.ignoreDisables=t.flags.ignoreDisables),t.flags.disableDefaultIgnores&&(o.disableDefaultIgnores=t.flags.disableDefaultIgnores),t.flags.cache&&(o.cache=!0),t.flags.cacheLocation&&(o.cacheLocation=t.flags.cacheLocation),t.flags.fix&&(o.fix=t.flags.fix),t.flags.outputFile&&(o.outputFile=t.flags.outputFile);const s=t.flags.reportNeedlessDisables,a=t.flags.reportInvalidScopeDisables,r=t.flags.reportDescriptionlessDisables;s&&(o.reportNeedlessDisables=s),a&&(o.reportInvalidScopeDisables=a),r&&(o.reportDescriptionlessDisables=r);const l=t.flags.maxWarnings;if(void 0!==l&&(o.maxWarnings=l),t.flags.help)return void t.showHelp(0);if(t.flags.version)return void t.showVersion();t.flags.allowEmptyInput&&(o.allowEmptyInput=t.flags.allowEmptyInput);const c=t.input.length?{...o,files:t.input}:await getStdin().then((e=>({...o,code:e})));return t.flags.printConfig?printConfig(c).then((e=>{process.stdout.write(JSON.stringify(e,null,"  "))})).catch(handleError):c.files||c.code||t.flags.stdin?standalone(c).then((e=>{if(e.output)if(process.stdout.write(e.output),c.outputFile&&writeOutputFile(e.output,c.outputFile).catch(handleError),e.errored)process.exitCode=2;else if(void 0!==l&&e.maxWarningsExceeded){const t=e.maxWarningsExceeded.foundWarnings;process.stderr.write(`${EOL}${red("Max warnings exceeded: ")}${t} found. ${dim(`${l} allowed${EOL}${EOL}`)}`),process.exitCode=2}})).catch(handleError):void t.showHelp()},module.exports.buildCLI=buildCLI;
//# sourceMappingURL=/sm/f3ab10cf0a697eeca7bc51e18170615d4d681071c251fc00abab1920ee594c06.map