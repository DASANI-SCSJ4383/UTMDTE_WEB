/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/npm-run-all@4.1.5/lib/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const shellQuote=require("shell-quote"),matchTasks=require("./match-tasks"),readPackageJson=require("./read-package-json"),runTasks=require("./run-tasks"),ARGS_PATTERN=/\{(!)?([*@]|\d+)([^}]+)?}/g;function toArray(e){return null==e?[]:Array.isArray(e)?e:[e]}function applyArguments(e,t){const r=Object.create(null);return e.map(e=>e.replace(ARGS_PATTERN,(e,n,o,a)=>{if(null!=n)throw Error(`Invalid Placeholder: ${e}`);if("@"===o)return shellQuote.quote(t);if("*"===o)return shellQuote.quote([t.join(" ")]);const l=parseInt(o,10);if(l>=1&&l<=t.length)return shellQuote.quote([t[l-1]]);if(null!=a){const t=a.slice(0,2);if(":="===t)return r[o]=shellQuote.quote([a.slice(2)]),r[o];if(":-"===t)return shellQuote.quote([a.slice(2)]);throw Error(`Invalid Placeholder: ${e}`)}return null!=r[o]?r[o]:""}))}function parsePatterns(e,t){const r=toArray(e);return r.some(e=>ARGS_PATTERN.test(e))?applyArguments(r,t):r}function toOverwriteOptions(e){const t=[];for(const r of Object.keys(e)){const n=e[r];for(const e of Object.keys(n)){const o=n[e];t.push(`--${r}:${e}=${o}`)}}return t}function toConfigOptions(e){return Object.keys(e).map(t=>`--${t}=${e[t]}`)}function maxLength(e,t){return Math.max(t.length,e)}module.exports=function(e,t){const r=t&&t.stdin||null,n=t&&t.stdout||null,o=t&&t.stderr||null,a=t&&t.taskList||null,l=t&&t.config||null,s=t&&t.packageConfig||null,u=t&&t.arguments||[],i=Boolean(t&&t.parallel),c=Boolean(t&&t.silent),p=Boolean(t&&t.continueOnError),f=Boolean(t&&t.printLabel),h=Boolean(t&&t.printName),g=Boolean(t&&t.race),m=i?t&&t.maxParallel||0:1,d=Boolean(t&&t.aggregateOutput),k=t&&t.npmPath;try{const t=parsePatterns(e,u);if(0===t.length)return Promise.resolve(null);if(null!=a&&!1===Array.isArray(a))throw new Error("Invalid options.taskList");if("number"!=typeof m||!(m>=0))throw new Error("Invalid options.maxParallel");if(!i&&d)throw new Error("Invalid options.aggregateOutput; It requires options.parallel");if(!i&&g)throw new Error("Invalid options.race; It requires options.parallel");const P=[].concat(c?["--silent"]:[],s?toOverwriteOptions(s):[],l?toConfigOptions(l):[]);return Promise.resolve().then(()=>null!=a?{taskList:a,packageInfo:null}:readPackageJson()).then(e=>{const a=matchTasks(e.taskList,t),l=a.reduce(maxLength,0);return runTasks(a,{stdin:r,stdout:n,stderr:o,prefixOptions:P,continueOnError:p,labelState:{enabled:f,width:l,lastPrefix:null,lastIsLinebreak:!0},printName:h,packageInfo:e.packageInfo,race:g,maxParallel:m,npmPath:k,aggregateOutput:d})})}catch(e){return Promise.reject(new Error(e.message))}};
//# sourceMappingURL=/sm/c99263b85ab179abdc85d63003642a8c42dcacbb2126f50188c6c23bcdbd0224.map