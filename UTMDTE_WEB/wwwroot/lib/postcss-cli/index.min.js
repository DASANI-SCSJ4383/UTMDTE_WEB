/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/postcss-cli@9.1.0/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
#!/usr/bin/env node
import fs from"fs-extra";import path from"path";import prettyHrtime from"pretty-hrtime";import stdin from"get-stdin";import read from"read-cache";import pc from"picocolors";import{globby}from"globby";import slash from"slash";import chokidar from"chokidar";import postcss from"postcss";import postcssrc from"postcss-load-config";import postcssReporter from"postcss-reporter/lib/formatter.js";import argv from"./lib/args.js";import createDependencyGraph from"./lib/DependencyGraph.js";import getMapfile from"./lib/getMapfile.js";const reporter=postcssReporter(),depGraph=createDependencyGraph();let input=argv._;const{dir:dir,output:output}=argv;let cliConfig,configFile;async function buildCliConfig(){cliConfig={options:{map:void 0!==argv.map?argv.map:{inline:!0},parser:argv.parser?await import(argv.parser):void 0,syntax:argv.syntax?await import(argv.syntax):void 0,stringifier:argv.stringifier?await import(argv.stringifier):void 0},plugins:argv.use?await Promise.all(argv.use.map((async r=>{try{return(await import(r)).default()}catch(e){const t=e.message||`Cannot find module '${r}'`;let o=t.includes(r)?"":` (${r})`;return e.name&&"Error"!==e.name&&(o+=`: ${e.name}`),error(`Plugin Error${o}: ${t}'`)}}))):[]}}function rc(r,e){return argv.use?Promise.resolve(cliConfig):postcssrc(r,e).then((r=>((r.options.from||r.options.to)&&error("Config Error: Can not set from or to options in config file, use CLI arguments instead"),configFile=r.file,r))).catch((r=>{if(!r.message.includes("No PostCSS Config found"))throw r}))}function files(r){return"string"==typeof r&&(r=[r]),Promise.all(r.map((r=>"stdin"===r?stdin().then((r=>r?css(r,"stdin"):error("Input Error: Did not receive any STDIN"))):read(r).then((e=>css(e,r))))))}function css(r,e){const t={options:cliConfig.options};"stdin"!==e&&(t.file={dirname:path.dirname(e),basename:path.basename(e),extname:path.extname(e)},argv.config||(argv.config=path.dirname(e)));const o="stdin"!==e?path.relative(path.resolve(),e):e;argv.config||(argv.config=process.cwd());const n=process.hrtime();return printVerbose(pc.cyan(`Processing ${pc.bold(o)}...`)),rc(t,argv.config).then((t=>{const s={...(t=t||cliConfig).options};if("stdin"===e&&output&&(e=output),s.from="stdin"===e?path.join(process.cwd(),"stdin"):e,output||dir||argv.replace){const r=argv.base?e.replace(path.resolve(argv.base),""):path.basename(e);s.to=output||(argv.replace?e:path.join(dir,r)),argv.ext&&(s.to=s.to.replace(path.extname(s.to),argv.ext)),s.to=path.resolve(s.to)}return s.to||!t.options.map||t.options.map.inline||error("Output Error: Cannot output external sourcemaps when writing to STDOUT"),postcss(t.plugins).process(r,s).then((r=>{const e=[];if(s.to){if(e.push(i(s.to,r.css)),r.map){const t=getMapfile(s);e.push(i(t,r.map.toString()))}}else process.stdout.write(r.css,"utf8");return Promise.all(e).then((()=>{const e=prettyHrtime(process.hrtime(n));printVerbose(pc.green(`Finished ${pc.bold(o)} in ${pc.bold(e)}`));const t=r.warnings();return t.length&&console.warn(reporter({...r,messages:t})),r}))}))})).catch((r=>{throw r}));async function i(r,e){if((await fs.pathExists(r)?await fs.readFile(r,"utf8"):null)!==e)return fs.outputFile(r,e)}}function dependencies(r){Array.isArray(r)||(r=[r]);const e=[];return r.forEach((r=>{r.messages<=0||r.messages.filter((r=>"dependency"===r.type||"dir-dependency"===r.type?r:"")).map(depGraph.add).forEach((r=>{"dir-dependency"===r.type?e.push(r.glob?path.join(r.dir,r.glob):r.dir):e.push(r.file)}))})),e}function printVerbose(r){argv.verbose&&console.warn(r)}function error(r){argv.verbose&&console.error(),"string"==typeof r?console.error(pc.red(r)):"CssSyntaxError"===r.name?console.error(r.toString()):console.error(r),argv.watch||process.exit(1)}function getAncestorDirs(r){const{root:e}=path.parse(r);if(r===e)return[];const t=path.dirname(r);return[t,...getAncestorDirs(t)]}argv.map&&(argv.map={inline:!1}),argv.env&&(process.env.NODE_ENV=argv.env),argv.config&&(argv.config=path.resolve(argv.config)),argv.watch&&(process.stdin.on("end",(()=>process.exit(0))),process.stdin.resume()),parseInt(postcss().version)<8&&error("Please install PostCSS 8 or above"),buildCliConfig().then((()=>(argv.watch&&!(argv.output||argv.replace||argv.dir)&&(error("Cannot write to stdout in watch mode"),process.exit(1)),input&&input.length?globby(input.map((r=>slash(String(r)))),{dot:argv.includeDotfiles}):((argv.replace||argv.dir)&&error("Input Error: Cannot use --dir or --replace when reading from stdin"),argv.watch&&error("Input Error: Cannot run in watch mode when reading from stdin"),["stdin"])))).then((r=>(r&&r.length||error("Input Error: You must pass a valid list of files to parse"),r.length>1&&!argv.dir&&!argv.replace&&error("Input Error: Must use --dir or --replace with multiple input files"),"stdin"!==r[0]&&(r=r.map((r=>path.resolve(r)))),input=r,files(input)))).then((r=>{if(argv.watch){const e=()=>printVerbose(pc.dim("\nWaiting for file changes...")),t=chokidar.watch(input.concat(dependencies(r)),{usePolling:argv.poll,interval:argv.poll&&"number"==typeof argv.poll?argv.poll:100,awaitWriteFinish:{stabilityThreshold:50,pollInterval:10}});configFile&&t.add(configFile),t.on("ready",e).on("change",(r=>{let o=[];input.includes(r)&&o.push(r);const n=depGraph.dependantsOf(r).concat(getAncestorDirs(r).flatMap(depGraph.dependantsOf));return o=o.concat(n.filter((r=>input.includes(r)))),o.length||(o=input),files([...new Set(o)]).then((r=>t.add(dependencies(r)))).then(e).catch(error)}))}})).catch((r=>{error(r),process.exit(1)}));
//# sourceMappingURL=/sm/941b53926feab082c20629971127823c6c725ac71ad2453536a38a425f6ececa.map