/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/cli.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const fs=require("fs"),path=require("path"),{promisify:promisify}=require("util"),{ESLint:ESLint}=require("./eslint"),CLIOptions=require("./options"),log=require("./shared/logging"),RuntimeInfo=require("./shared/runtime-info"),debug=require("debug")("eslint:cli"),mkdir=promisify(fs.mkdir),stat=promisify(fs.stat),writeFile=promisify(fs.writeFile);function quietFixPredicate(e){return 2===e.severity}function translateOptions({cache:e,cacheFile:r,cacheLocation:i,cacheStrategy:t,config:n,env:o,errorOnUnmatchedPattern:a,eslintrc:s,ext:u,fix:l,fixDryRun:f,fixType:c,global:g,ignore:p,ignorePath:d,ignorePattern:h,inlineConfig:y,parser:m,parserOptions:x,plugin:w,quiet:C,reportUnusedDisableDirectives:v,resolvePluginsRelativeTo:b,rule:E,rulesdir:F}){return{allowInlineConfig:y,cache:e,cacheLocation:i||r,cacheStrategy:t,errorOnUnmatchedPattern:a,extensions:u,fix:(l||f)&&(!C||quietFixPredicate),fixTypes:c,ignore:p,ignorePath:d,overrideConfig:{env:o&&o.reduce(((e,r)=>(e[r]=!0,e)),{}),globals:g&&g.reduce(((e,r)=>(r.endsWith(":true")?e[r.slice(0,-5)]="writable":e[r]="readonly",e)),{}),ignorePatterns:h,parser:m,parserOptions:x,plugins:w,rules:E},overrideConfigFile:n,reportUnusedDisableDirectives:v?"error":void 0,resolvePluginsRelativeTo:b,rulePaths:F,useEslintrc:s}}function countErrors(e){let r=0,i=0,t=0;for(const n of e)r+=n.errorCount,i+=n.fatalErrorCount,t+=n.warningCount;return{errorCount:r,fatalErrorCount:i,warningCount:t}}async function isDirectory(e){try{return(await stat(e)).isDirectory()}catch(e){if("ENOENT"===e.code||"ENOTDIR"===e.code)return!1;throw e}}async function printResults(e,r,i,t){let n;try{n=await e.loadFormatter(i)}catch(e){return log.error(e.message),!1}const o=await n.format(r);if(o)if(t){const e=path.resolve(process.cwd(),t);if(await isDirectory(e))return log.error("Cannot write to output file path, it is a directory: %s",t),!1;try{await mkdir(path.dirname(e),{recursive:!0}),await writeFile(e,o)}catch(e){return log.error("There was a problem writing the output file:\n%s",e),!1}}else log.info(o);return!0}const cli={async execute(e,r){let i;Array.isArray(e)&&debug("CLI args: %o",e.slice(2));try{i=CLIOptions.parse(e)}catch(e){return log.error(e.message),2}const t=i._,n="string"==typeof r;if(i.help)return log.info(CLIOptions.generateHelp()),0;if(i.version)return log.info(RuntimeInfo.version()),0;if(i.envInfo)try{return log.info(RuntimeInfo.environment()),0}catch(e){return log.error(e.message),2}if(i.printConfig){if(t.length)return log.error("The --print-config option must be used with exactly one file name."),2;if(n)return log.error("The --print-config option is not available for piped-in code."),2;const e=new ESLint(translateOptions(i)),r=await e.calculateConfigForFile(i.printConfig);return log.info(JSON.stringify(r,null,"  ")),0}if(debug("Running on "+(n?"text":"files")),i.fix&&i.fixDryRun)return log.error("The --fix option and the --fix-dry-run option cannot be used together."),2;if(n&&i.fix)return log.error("The --fix option is not available for piped-in code; use --fix-dry-run instead."),2;if(i.fixType&&!i.fix&&!i.fixDryRun)return log.error("The --fix-type option requires either --fix or --fix-dry-run."),2;const o=new ESLint(translateOptions(i));let a;a=n?await o.lintText(r,{filePath:i.stdinFilename,warnIgnored:!0}):await o.lintFiles(t),i.fix&&(debug("Fix mode enabled - applying fixes"),await ESLint.outputFixes(a));let s=a;if(i.quiet&&(debug("Quiet mode enabled - filtering out warnings"),s=ESLint.getErrorResults(s)),await printResults(o,s,i.format,i.outputFile)){const{errorCount:e,fatalErrorCount:r,warningCount:t}=countErrors(a),n=i.maxWarnings>=0&&t>i.maxWarnings,o=i.exitOnFatalError&&r>0;return!e&&n&&log.error("ESLint found too many warnings (maximum: %s).",i.maxWarnings),o?2:e||n?1:0}return 2}};module.exports=cli;
//# sourceMappingURL=/sm/18973f87bf754b1acb8dcd0141b1fa55a36177999bc04d6deca75060695f9595.map