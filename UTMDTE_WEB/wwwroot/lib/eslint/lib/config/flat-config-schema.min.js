/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/config/flat-config-schema.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const ruleSeverities=new Map([[0,0],["off",0],[1,1],["warn",1],[2,2],["error",2]]),globalVariablesValues=new Set([!0,"true","writable","writeable",!1,"false","readonly","readable",null,"off"]);function isNonNullObject(e){return"object"==typeof e&&null!==e}function isUndefined(e){return void 0===e}function deepMerge(e={},r={}){if(Array.isArray(r))return r;const t={...e,...r};for(const o of Object.keys(r)){if("__proto__"===o)continue;const s=e[o],n=r[o];isNonNullObject(s)?t[o]=deepMerge(s,n):isUndefined(s)&&(isNonNullObject(n)?t[o]=deepMerge(Array.isArray(n)?[]:{},n):isUndefined(n)||(t[o]=n))}return t}function normalizeRuleOptions(e){const r=Array.isArray(e)?e.slice(0):[e];return r[0]=ruleSeverities.get(r[0]),r}function assertIsRuleOptions(e){if("string"!=typeof e&&"number"!=typeof e&&!Array.isArray(e))throw new TypeError("Expected a string, number, or array.")}function assertIsRuleSeverity(e){if(void 0===("string"==typeof e?ruleSeverities.get(e.toLowerCase()):ruleSeverities.get(e)))throw new TypeError('Expected severity of "off", 0, "warn", 1, "error", or 2.')}function assertIsPluginMemberName(e){if(!/[@a-z0-9-_$]+(?:\/(?:[a-z0-9-_$]+))+$/iu.test(e))throw new TypeError(`Expected string in the form "pluginName/objectName" but found "${e}".`)}function assertIsObject(e){if(!isNonNullObject(e))throw new TypeError("Expected an object.")}function assertIsObjectOrString(e){if((!e||"object"!=typeof e)&&"string"!=typeof e)throw new TypeError("Expected an object or string.")}const booleanSchema={merge:"replace",validate:"boolean"},deepObjectAssignSchema={merge:(e={},r={})=>deepMerge(e,r),validate:"object"},globalsSchema={merge:"assign",validate(e){assertIsObject(e);for(const r of Object.keys(e))if("__proto__"!==r){if(r!==r.trim())throw new TypeError(`Global "${r}" has leading or trailing whitespace.`);if(!globalVariablesValues.has(e[r]))throw new TypeError(`Key "${r}": Expected "readonly", "writable", or "off".`)}}},parserSchema={merge:"replace",validate(e){if(assertIsObjectOrString(e),"object"==typeof e&&"function"!=typeof e.parse&&"function"!=typeof e.parseForESLint)throw new TypeError("Expected object to have a parse() or parseForESLint() method.");"string"==typeof e&&assertIsPluginMemberName(e)}},pluginsSchema={merge(e={},r={}){const t=new Set([...Object.keys(e),...Object.keys(r)]),o={};for(const s of t)if("__proto__"!==s){if(s in e&&s in r&&e[s]!==r[s])throw new TypeError(`Cannot redefine plugin "${s}".`);o[s]=r[s]||e[s]}return o},validate(e){if(null===e||"object"!=typeof e)throw new TypeError("Expected an object.");for(const r of Object.keys(e))if("__proto__"!==r&&(null===e[r]||"object"!=typeof e[r]))throw new TypeError(`Key "${r}": Expected an object.`)}},processorSchema={merge:"replace",validate(e){if("string"==typeof e)assertIsPluginMemberName(e);else{if(!e||"object"!=typeof e)throw new TypeError("Expected an object or a string.");if("function"!=typeof e.preprocess||"function"!=typeof e.postprocess)throw new TypeError("Object must have a preprocess() and a postprocess() method.")}}},rulesSchema={merge(e={},r={}){const t={...e,...r};for(const o of Object.keys(t)){if("__proto__"===o){delete t.__proto__;continue}if(t[o]=normalizeRuleOptions(t[o]),!(o in e)||!(o in r))continue;const s=normalizeRuleOptions(e[o]),n=normalizeRuleOptions(r[o]);1!==n.length||(t[o]=[n[0],...s.slice(1)])}return t},validate(e){let r;assertIsObject(e);try{for(const t of Object.keys(e)){if("__proto__"===t)continue;r=t;const o=e[t];assertIsRuleOptions(o),Array.isArray(o)?assertIsRuleSeverity(o[0]):assertIsRuleSeverity(o)}}catch(e){throw e.message=`Key "${r}": ${e.message}`,e}}},ecmaVersionSchema={merge:"replace",validate(e){if("number"!=typeof e&&"latest"!==e)throw new TypeError('Expected a number or "latest".')}},sourceTypeSchema={merge:"replace",validate(e){if("string"!=typeof e||!/^(?:script|module|commonjs)$/u.test(e))throw new TypeError('Expected "script", "module", or "commonjs".')}};exports.flatConfigSchema={settings:deepObjectAssignSchema,linterOptions:{schema:{noInlineConfig:booleanSchema,reportUnusedDisableDirectives:booleanSchema}},languageOptions:{schema:{ecmaVersion:ecmaVersionSchema,sourceType:sourceTypeSchema,globals:globalsSchema,parser:parserSchema,parserOptions:deepObjectAssignSchema}},processor:processorSchema,plugins:pluginsSchema,rules:rulesSchema};
//# sourceMappingURL=/sm/b049c0108c1da9c0ca351dfe56d332605c5b5ba3c67c83fe69372647929fc6ba.map