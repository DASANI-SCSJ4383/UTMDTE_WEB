/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/dot-location.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"layout",docs:{description:"enforce consistent newlines before and after dots",recommended:!1,url:"https://eslint.org/docs/rules/dot-location"},schema:[{enum:["object","property"]}],fixable:"code",messages:{expectedDotAfterObject:"Expected dot to be on same line as object.",expectedDotBeforeProperty:"Expected dot to be on same line as property."}},create(e){const t=e.options[0],o="object"===t||!t,s=e.getSourceCode();return{MemberExpression:function(t){t.computed||function(t){const r=t.property,n=s.getTokenBefore(r);if(o){const o=s.getTokenBefore(n);astUtils.isTokenOnSameLine(o,n)||e.report({node:t,loc:n.loc,messageId:"expectedDotAfterObject",*fix(e){n.value.startsWith(".")&&astUtils.isDecimalIntegerNumericToken(o)?yield e.insertTextAfter(o,` ${n.value}`):yield e.insertTextAfter(o,n.value),yield e.remove(n)}})}else astUtils.isTokenOnSameLine(n,r)||e.report({node:t,loc:n.loc,messageId:"expectedDotBeforeProperty",*fix(e){yield e.remove(n),yield e.insertTextBefore(r,n.value)}})}(t)}}}};
//# sourceMappingURL=/sm/011f6de59b5815f5a1fa7d19297776c82242c7755821aefeb2267d8ee57fcea5.map