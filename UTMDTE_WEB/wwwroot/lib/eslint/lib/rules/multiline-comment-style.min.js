/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/multiline-comment-style.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"suggestion",docs:{description:"enforce a particular style for multiline comments",recommended:!1,url:"https://eslint.org/docs/rules/multiline-comment-style"},fixable:"whitespace",schema:[{enum:["starred-block","separate-lines","bare-block"]}],messages:{expectedBlock:"Expected a block comment instead of consecutive line comments.",expectedBareBlock:"Expected a block comment without padding stars.",startNewline:"Expected a linebreak after '/*'.",endNewline:"Expected a linebreak before '*/'.",missingStar:"Expected a '*' at the start of this line.",alignment:"Expected this line to be aligned with the start of the comment.",expectedLines:"Expected multiple line comments instead of a block comment."}},create(e){const t=e.getSourceCode(),n=e.options[0]||"starred-block";function l([e]){if("Block"!==e.type)return!1;const t=e.value.split(astUtils.LINEBREAK_MATCHER);return t.length>0&&t.every(((e,n)=>(0===n||n===t.length-1?/^\s*$/u:/^\s*\*/u).test(e)))}function s([e]){if("Block"!==e.type)return!1;const t=e.value.split(astUtils.LINEBREAK_MATCHER);return/^\*\s*$/u.test(t[0])&&t.slice(1,-1).every((e=>/^\s* /u.test(e)))&&/^\s*$/u.test(t[t.length-1])}function r(e){const[n]=e;return"Line"===n.type?function(e){const t=e.map((({value:e})=>e)).filter((e=>e.trim().length)).every((e=>e.startsWith(" ")));return e.map((({value:e})=>t?e.replace(/^ /u,""):e))}(e):l(e)?function(e){const t=e.value.split(astUtils.LINEBREAK_MATCHER).filter(((e,t,n)=>!(0===t||t===n.length-1))).map((e=>e.replace(/^\s*$/u,""))),n=t.map((e=>e.replace(/\s*\*/u,""))).filter((e=>e.trim().length)).every((e=>e.startsWith(" ")));return t.map((e=>e.replace(n?/\s*\* ?/u:/\s*\*/u,"")))}(n):function(e){const n=e.value.split(astUtils.LINEBREAK_MATCHER).map((e=>e.replace(/^\s*$/u,""))),l=`${t.text.slice(e.range[0]-e.loc.start.column,e.range[0])}   `;let s="";for(const[e,t]of n.entries()){if(!t.trim().length||0===e)continue;const[,n]=t.match(/^(\s*\*?\s*)/u);if(n.length<l.length){const e=l.slice(n.length-l.length);e.length>s.length&&(s=e)}}return n.map((e=>{const t=e.match(/^(\s*\*?\s*)(.*)/u),[,n,r]=t;return n.length>l.length?`${n.slice(l.length-(s.length+n.length))}${r}`:n.length<l.length?`${n.slice(l.length)}${r}`:r}))}(n)}function c(e){return t.text.slice(e.range[0]-e.loc.start.column,e.range[0])}function o(e,t){return`/* ${t.join(`\n${c(e)}   `)} */`}const i={"starred-block"(n){const[l]=n,s=r(n);if(!s.some((e=>e.includes("*/"))))if(n.length>1)e.report({loc:{start:l.loc.start,end:n[n.length-1].loc.end},messageId:"expectedBlock",fix(e){const t=[l.range[0],n[n.length-1].range[1]];return s.some((e=>e.startsWith("/")))?null:e.replaceTextRange(t,function(e,t){const n=c(e);return`/*\n${t.map((e=>`${n} * ${e}`)).join("\n")}\n${n} */`}(l,s))}});else{const n=l.value.split(astUtils.LINEBREAK_MATCHER),s=`${c(l)} *`;if(!/^\*?\s*$/u.test(n[0])){const t=l.value.startsWith("*")?l.range[0]+1:l.range[0];e.report({loc:{start:l.loc.start,end:{line:l.loc.start.line,column:l.loc.start.column+2}},messageId:"startNewline",fix:e=>e.insertTextAfterRange([t,t+2],`\n${s}`)})}/^\s*$/u.test(n[n.length-1])||e.report({loc:{start:{line:l.loc.end.line,column:l.loc.end.column-2},end:l.loc.end},messageId:"endNewline",fix:e=>e.replaceTextRange([l.range[1]-2,l.range[1]],`\n${s}/`)});for(let r=l.loc.start.line+1;r<=l.loc.end.line;r++){const c=t.lines[r-1],o=/^\s*\*/u.test(c)?"alignment":"missingStar";c.startsWith(s)||e.report({loc:{start:{line:r,column:0},end:{line:r,column:c.length}},messageId:o,fix(e){const i=t.getIndexFromLoc({line:r,column:0});if("alignment"===o){const[,t=""]=c.match(/^(\s*\*)/u)||[],n=i+t.length;return e.replaceTextRange([i,n],s)}const[,a=""]=c.match(/^(\s*)/u)||[],u=i+a.length;let m;for(const[e,s]of n.entries()){if(!/\S+/u.test(s))continue;const n=t.lines[l.loc.start.line-1+e],[,r="",o=""]=n.match(/^(\s*(?:\/?\*)?(\s*))/u)||[];m=`${a.slice(r.length)}${o}`,/^\s*\//u.test(c)&&0===m.length&&(m+=" ");break}return e.replaceTextRange([i,u],`${s}${m}`)}})}}},"separate-lines"(n){const[l]=n;if("Block"!==l.type||s(n))return;const o=r(n),i=t.getTokenAfter(l,{includeComments:!0});i&&l.loc.end.line===i.loc.start.line||e.report({loc:{start:l.loc.start,end:{line:l.loc.start.line,column:l.loc.start.column+2}},messageId:"expectedLines",fix:e=>e.replaceText(l,function(e,t){return t.map((e=>`// ${e}`)).join(`\n${c(e)}`)}(l,o))})},"bare-block"(t){if(s(t))return;const[n]=t,c=r(t);"Line"===n.type&&c.length>1&&!c.some((e=>e.includes("*/")))&&e.report({loc:{start:n.loc.start,end:t[t.length-1].loc.end},messageId:"expectedBlock",fix:e=>e.replaceTextRange([n.range[0],t[t.length-1].range[1]],o(n,c))}),l(t)&&e.report({loc:{start:n.loc.start,end:{line:n.loc.start.line,column:n.loc.start.column+2}},messageId:"expectedBareBlock",fix:e=>e.replaceText(n,o(n,c))})}};return{Program:()=>t.getAllComments().filter((e=>"Shebang"!==e.type)).filter((e=>!astUtils.COMMENTS_IGNORE_PATTERN.test(e.value))).filter((e=>{const n=t.getTokenBefore(e,{includeComments:!0});return!n||n.loc.end.line<e.loc.start.line})).reduce(((e,n,l,s)=>{const r=t.getTokenBefore(n,{includeComments:!0});return"Line"===n.type&&l&&"Line"===s[l-1].type&&r&&r.loc.end.line===n.loc.start.line-1&&r===s[l-1]?e[e.length-1].push(n):e.push([n]),e}),[]).filter((e=>!(1===e.length&&e[0].loc.start.line===e[0].loc.end.line))).forEach(i[n])}}};
//# sourceMappingURL=/sm/bc123037e9c033ea2c46fe3d43fb9dc7116c54927c8d47925caad0fb929eb97b.map