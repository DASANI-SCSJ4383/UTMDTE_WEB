/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/array-element-newline.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"layout",docs:{description:"enforce line breaks after each array element",recommended:!1,url:"https://eslint.org/docs/rules/array-element-newline"},fixable:"whitespace",schema:{definitions:{basicConfig:{oneOf:[{enum:["always","never","consistent"]},{type:"object",properties:{multiline:{type:"boolean"},minItems:{type:["integer","null"],minimum:0}},additionalProperties:!1}]}},items:[{oneOf:[{$ref:"#/definitions/basicConfig"},{type:"object",properties:{ArrayExpression:{$ref:"#/definitions/basicConfig"},ArrayPattern:{$ref:"#/definitions/basicConfig"}},additionalProperties:!1,minProperties:1}]}]},messages:{unexpectedLineBreak:"There should be no linebreak here.",missingLineBreak:"There should be a linebreak after this element."}},create(e){const n=e.getSourceCode();function t(e){let n,t=!1,r=!1;const s=e||"always";return s&&"always"!==s&&0!==s.minItems?"never"===s?n=Number.POSITIVE_INFINITY:"consistent"===s?(t=!0,n=Number.POSITIVE_INFINITY):(r=Boolean(s.multiline),n=s.minItems||Number.POSITIVE_INFINITY):n=0,{consistent:t,multiline:r,minItems:n}}function r(r){const s=r.elements,i=function(e){if(e&&(e.ArrayExpression||e.ArrayPattern)){let n,r;return e.ArrayExpression&&(n=t(e.ArrayExpression)),e.ArrayPattern&&(r=t(e.ArrayPattern)),{ArrayExpression:n,ArrayPattern:r}}const n=t(e);return{ArrayExpression:n,ArrayPattern:n}}(e.options[0]),o=i[r.type];if(!o)return;let a=!1;o.multiline&&(a=s.filter((e=>null!==e)).some((e=>e.loc.start.line!==e.loc.end.line)));const l=r.elements.map(((e,t)=>{const r=s[t-1];if(0===t||null===e||null===r)return!1;const i=n.getFirstTokenBetween(r,e,astUtils.isCommaToken),o=n.getTokenBefore(i),a=n.getTokenAfter(i);return!astUtils.isTokenOnSameLine(o,a)})).filter((e=>!0===e)).length,m=s.length>=o.minItems||o.multiline&&a||o.consistent&&l>0&&l<r.elements.length;s.forEach(((t,r)=>{const i=s[r-1];if(0===r||null===t||null===i)return;const o=n.getFirstTokenBetween(i,t,astUtils.isCommaToken),a=n.getTokenBefore(o),l=n.getTokenAfter(o);m?astUtils.isTokenOnSameLine(a,l)&&function(t){const r=n.getTokenBefore(t,{includeComments:!0});e.report({loc:{start:r.loc.end,end:t.loc.start},messageId:"missingLineBreak",fix:e=>e.replaceTextRange([r.range[1],t.range[0]],"\n")})}(l):astUtils.isTokenOnSameLine(a,l)||function(t){const r=n.getTokenBefore(t,{includeComments:!0});e.report({loc:{start:r.loc.end,end:t.loc.start},messageId:"unexpectedLineBreak",fix(e){if(astUtils.isCommentToken(r))return null;if(!astUtils.isTokenOnSameLine(r,t))return e.replaceTextRange([r.range[1],t.range[0]]," ");const s=n.getTokenBefore(r,{includeComments:!0});return astUtils.isCommentToken(s)?null:e.replaceTextRange([s.range[1],r.range[0]],"")}})}(l)}))}return{ArrayPattern:r,ArrayExpression:r}}};
//# sourceMappingURL=/sm/06333e18d1a987ccf55c57372bdd232835b983ce053176957376c5e0b98e3954.map