/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/new-parens.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"layout",docs:{description:"enforce or disallow parentheses when invoking a constructor with no arguments",recommended:!1,url:"https://eslint.org/docs/rules/new-parens"},fixable:"code",schema:{anyOf:[{type:"array",items:[{enum:["always","never"]}],minItems:0,maxItems:1}]},messages:{missing:"Missing '()' invoking a constructor.",unnecessary:"Unnecessary '()' invoking a constructor with no arguments."}},create(e){const s="never"!==e.options[0],n=e.getSourceCode();return{NewExpression(t){if(0!==t.arguments.length)return;const r=n.getLastToken(t),o=r&&astUtils.isClosingParenToken(r)&&astUtils.isOpeningParenToken(n.getTokenBefore(r))&&t.callee.range[1]<t.range[1];s?o||e.report({node:t,messageId:"missing",fix:e=>e.insertTextAfter(t,"()")}):o&&e.report({node:t,messageId:"unnecessary",fix:e=>[e.remove(n.getTokenBefore(r)),e.remove(r),e.insertTextBefore(t,"("),e.insertTextAfter(t,")")]})}}}};
//# sourceMappingURL=/sm/a292f38f9c3fe0932347d44b73ac8c35e7f6b500ee4277885d864cc34c2d9b19.map