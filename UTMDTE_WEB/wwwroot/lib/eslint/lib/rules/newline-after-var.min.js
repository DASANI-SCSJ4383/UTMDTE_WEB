/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/newline-after-var.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"layout",docs:{description:"require or disallow an empty line after variable declarations",recommended:!1,url:"https://eslint.org/docs/rules/newline-after-var"},schema:[{enum:["never","always"]}],fixable:"whitespace",messages:{expected:"Expected blank line after variable declarations.",unexpected:"Unexpected blank line after variable declarations."},deprecated:!0,replacedBy:["padding-line-between-statements"]},create(e){const t=e.getSourceCode(),n="never"===e.options[0]?"never":"always",r=t.getAllComments().reduce(((e,t)=>(e[t.loc.start.line]=t.loc.end.line,e)),{});function a(e){const t=r[e];return r[t+1]?a(t+1):t}return{VariableDeclaration:function(o){const i=function(e){const n=t.getLastToken(e);if("Punctuator"===n.type&&";"===n.value){const e=t.getTokenBefore(n);if(e.loc.end.line!==n.loc.start.line)return e}return n}(o),l=i===t.getLastToken(o)?t.getTokenAfter(o):t.getLastToken(o),s=i.loc.end.line+1;if(!l)return;if("ForStatement"===(c=o.parent.type)||"ForInStatement"===c||"ForOfStatement"===c)return;var c,u;if("ExportNamedDeclaration"===(u=o.parent.type)||"ExportSpecifier"===u||"ExportDefaultDeclaration"===u||"ExportAllDeclaration"===u)return;if("Keyword"===l.type&&function(e){return"var"===e||"let"===e||"const"===e}(l.value))return;if(function(e){const n=t.getTokenAfter(e);return!n||"Punctuator"===n.type&&"}"===n.value}(o))return;const d=l.loc.start.line>s,p=void 0!==r[s];var f;"never"===n&&d&&!p&&e.report({node:o,messageId:"unexpected",data:{identifier:o.name},fix(e){const n=t.getText().slice(i.range[1],l.range[0]).split(astUtils.LINEBREAK_MATCHER);return e.replaceTextRange([i.range[1],l.range[0]],`${n.slice(0,-1).join("")}\n${n[n.length-1]}`)}}),"always"!==n||d&&(!p||(f=s,l.loc.start.line>a(f)+1))||e.report({node:o,messageId:"expected",data:{identifier:o.name},fix:e=>(d?a(s):i.loc.end.line)===l.loc.start.line?e.insertTextBefore(l,"\n\n"):e.insertTextBeforeRange([l.range[0]-l.loc.start.column,l.range[1]],"\n")})}}}};
//# sourceMappingURL=/sm/f4b1d1105a3009b24066ac8d1ae66c8b0ef761be9b92c65a1ed6e9fbf1d4d03f.map