/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/camelcase.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"suggestion",docs:{description:"enforce camelcase naming convention",recommended:!1,url:"https://eslint.org/docs/rules/camelcase"},schema:[{type:"object",properties:{ignoreDestructuring:{type:"boolean",default:!1},ignoreImports:{type:"boolean",default:!1},ignoreGlobals:{type:"boolean",default:!1},properties:{enum:["always","never"]},allow:{type:"array",items:[{type:"string"}],minItems:0,uniqueItems:!0}},additionalProperties:!1}],messages:{notCamelCase:"Identifier '{{name}}' is not in camel case.",notCamelCasePrivate:"#{{name}} is not in camel case."}},create(e){const t=e.options[0]||{},n="never"===t.properties?"never":"always",r=t.ignoreDestructuring,i=t.ignoreImports,a=t.ignoreGlobals,o=t.allow||[],s=new Set;function c(e){return!function(e){const t=e.replace(/^_+|_+$/gu,"");return t.includes("_")&&t!==t.toUpperCase()}(e)||function(e){return o.some((t=>e===t||e.match(new RegExp(t,"u"))))}(e)}function p(e){const t=e.name,n="AssignmentPattern"===e.parent.type?e.parent:e,r=n.parent;switch(r.type){case"Property":return("ObjectPattern"===r.parent.type||"ObjectExpression"===r.parent.type)&&r.value===n&&!r.computed&&"Identifier"===r.key.type&&r.key.name===t;case"ImportSpecifier":return r.local===e&&astUtils.getModuleExportName(r.imported)===t;default:return!1}}function l(t){s.has(t.range[0])||(s.add(t.range[0]),e.report({node:t,messageId:"PrivateIdentifier"===t.type?"notCamelCasePrivate":"notCamelCase",data:{name:t.name}}))}function f(e){"CallExpression"!==e.parent.type&&"NewExpression"!==e.parent.type&&("AssignmentPattern"===e.parent.type&&e.parent.right===e||r&&p(e)||l(e))}return{Program(){const t=e.getScope();if(!a)for(const e of t.variables)if(!(e.identifiers.length>0||c(e.name)))for(const t of e.references)f(t.identifier);for(const e of t.through){const t=e.identifier;c(t.name)||f(t)}},[["VariableDeclaration","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","ClassDeclaration","ClassExpression","CatchClause"]](t){for(const n of e.getDeclaredVariables(t)){if(c(n.name))continue;const e=n.identifiers[0];r&&p(e)||l(e);for(const e of n.references)e.init||f(e.identifier)}},[["ObjectExpression > Property[computed!=true] > Identifier.key","MethodDefinition[computed!=true] > Identifier.key","PropertyDefinition[computed!=true] > Identifier.key","MethodDefinition > PrivateIdentifier.key","PropertyDefinition > PrivateIdentifier.key"]](e){"never"===n||c(e.name)||l(e)},"MemberExpression[computed!=true] > Identifier.property"(e){"never"!==n&&function(e){const t=e.parent;switch(t.type){case"AssignmentExpression":case"AssignmentPattern":return t.left===e;case"Property":return"ObjectPattern"===t.parent.type&&t.value===e;case"ArrayPattern":case"RestElement":return!0;default:return!1}}(e.parent)&&!c(e.name)&&l(e)},ImportDeclaration(t){for(const n of e.getDeclaredVariables(t)){if(c(n.name))continue;const e=n.identifiers[0];i&&p(e)||l(e);for(const e of n.references)f(e.identifier)}},[["ExportAllDeclaration > Identifier.exported","ExportSpecifier > Identifier.exported"]](e){c(e.name)||l(e)},[["LabeledStatement > Identifier.label","BreakStatement > Identifier.label","ContinueStatement > Identifier.label"]](e){c(e.name)||l(e)}}}};
//# sourceMappingURL=/sm/69c6028591bf897cd9d1b67383f3eda0ff96717f4bc2da1bec6b161acc62f29f.map