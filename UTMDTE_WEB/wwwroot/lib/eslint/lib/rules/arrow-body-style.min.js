/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/arrow-body-style.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"suggestion",docs:{description:"require braces around arrow function bodies",recommended:!1,url:"https://eslint.org/docs/rules/arrow-body-style"},schema:{anyOf:[{type:"array",items:[{enum:["always","never"]}],minItems:0,maxItems:1},{type:"array",items:[{enum:["as-needed"]},{type:"object",properties:{requireReturnForObjectLiteral:{type:"boolean"}},additionalProperties:!1}],minItems:0,maxItems:2}]},fixable:"code",messages:{unexpectedOtherBlock:"Unexpected block statement surrounding arrow body.",unexpectedEmptyBlock:"Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",unexpectedObjectBlock:"Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",unexpectedSingleBlock:"Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",expectedBlock:"Expected block statement surrounding arrow body."}},create(e){const t=e.options,n="always"===t[0],r=!t[0]||"as-needed"===t[0],o="never"===t[0],s=t[1]&&t[1].requireReturnForObjectLiteral,a=e.getSourceCode();let i=null;function u(e){return!(!e||!e.parent)&&("ForStatement"===e.parent.type&&e.parent.init===e||u(e.parent))}function p(t){const p=t.body;if("BlockStatement"===p.type){const n=p.body;if(1!==n.length&&!o)return;if(r&&s&&"ReturnStatement"===n[0].type&&n[0].argument&&"ObjectExpression"===n[0].argument.type)return;if(o||r&&"ReturnStatement"===n[0].type){let r;r=0===n.length?"unexpectedEmptyBlock":n.length>1?"unexpectedOtherBlock":null===n[0].argument?"unexpectedSingleBlock":astUtils.isOpeningBraceToken(a.getFirstToken(n[0],{skip:1}))?"unexpectedObjectBlock":"unexpectedSingleBlock",e.report({node:t,loc:p.loc,messageId:r,fix(e){const r=[];if(1!==n.length||"ReturnStatement"!==n[0].type||!n[0].argument||(o=a.getTokenAfter(p))&&"Punctuator"===o.type&&/^[([/`+-]/u.test(o.value))return r;var o;const s=a.getFirstToken(p),c=a.getLastToken(p),l=a.getFirstToken(n[0],1),d=a.getLastToken(n[0]);return a.commentsExistBetween(s,l)||a.commentsExistBetween(d,c)?r.push(e.remove(s),e.remove(c),e.remove(a.getTokenAfter(s))):r.push(e.removeRange([s.range[0],l.range[0]]),e.removeRange([d.range[1],c.range[1]])),(astUtils.isOpeningBraceToken(l)||"SequenceExpression"===n[0].argument.type||i.hasInOperator&&u(t))&&(astUtils.isParenthesised(a,n[0].argument)||r.push(e.insertTextBefore(l,"("),e.insertTextAfter(d,")"))),astUtils.isSemicolonToken(d)&&r.push(e.remove(d)),r}})}}else(n||r&&s&&"ObjectExpression"===p.type)&&e.report({node:t,loc:p.loc,messageId:"expectedBlock",fix(e){const n=[],r=a.getTokenBefore(p,astUtils.isArrowToken),[o,s]=a.getTokensAfter(r,{count:2}),i=a.getLastToken(t);let u=null;if(astUtils.isOpeningParenToken(o)&&astUtils.isOpeningBraceToken(s)){const e=a.getNodeByRangeIndex(s.range[0]);"ObjectExpression"===e.type&&(u=e)}if(u){const t=o,r=s;astUtils.isTokenOnSameLine(t,r)?n.push(e.replaceText(t,"{return ")):n.push(e.replaceText(t,"{"),e.insertTextBefore(r,"return ")),n.push(e.remove(function(e){let t=e;for(;!astUtils.isParenthesised(a,t);)t=t.parent;return a.getTokenAfter(t)}(u))),n.push(e.insertTextAfter(i,"}"))}else n.push(e.insertTextBefore(o,"{return ")),n.push(e.insertTextAfter(i,"}"));return n}})}return{"BinaryExpression[operator='in']"(){let e=i;for(;e;)e.hasInOperator=!0,e=e.upper},ArrowFunctionExpression(){i={upper:i,hasInOperator:!1}},"ArrowFunctionExpression:exit"(e){p(e),i=i.upper}}}};
//# sourceMappingURL=/sm/a642cc132a0c232754b19090975e57a9a0487b7b34d3372d8911b75300f66eda.map