/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/use-isnan.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");function isNaNIdentifier(e){return Boolean(e)&&(astUtils.isSpecificId(e,"NaN")||astUtils.isSpecificMemberAccess(e,"Number","NaN"))}module.exports={meta:{type:"problem",docs:{description:"require calls to `isNaN()` when checking for `NaN`",recommended:!0,url:"https://eslint.org/docs/rules/use-isnan"},schema:[{type:"object",properties:{enforceForSwitchCase:{type:"boolean",default:!0},enforceForIndexOf:{type:"boolean",default:!1}},additionalProperties:!1}],messages:{comparisonWithNaN:"Use the isNaN function to compare with NaN.",switchNaN:"'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",caseNaN:"'case NaN' can never match. Use Number.isNaN before the switch.",indexOfNaN:"Array prototype method '{{ methodName }}' cannot find NaN."}},create(e){const t=!e.options[0]||e.options[0].enforceForSwitchCase,s=e.options[0]&&e.options[0].enforceForIndexOf;const i={BinaryExpression:function(t){/^(?:[<>]|[!=]=)=?$/u.test(t.operator)&&(isNaNIdentifier(t.left)||isNaNIdentifier(t.right))&&e.report({node:t,messageId:"comparisonWithNaN"})}};return t&&(i.SwitchStatement=function(t){isNaNIdentifier(t.discriminant)&&e.report({node:t,messageId:"switchNaN"});for(const s of t.cases)isNaNIdentifier(s.test)&&e.report({node:s,messageId:"caseNaN"})}),s&&(i.CallExpression=function(t){const s=astUtils.skipChainExpression(t.callee);if("MemberExpression"===s.type){const i=astUtils.getStaticPropertyName(s);"indexOf"!==i&&"lastIndexOf"!==i||1!==t.arguments.length||!isNaNIdentifier(t.arguments[0])||e.report({node:t,messageId:"indexOfNaN",data:{methodName:i}})}}),i}};
//# sourceMappingURL=/sm/572e44c56f3b66509db4b5def2e2b6df90d33a7d04aab91086eb76ec905ac3c3.map