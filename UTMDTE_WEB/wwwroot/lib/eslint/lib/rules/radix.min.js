/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/radix.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils"),MODE_ALWAYS="always",MODE_AS_NEEDED="as-needed",validRadixValues=new Set(Array.from({length:35},((e,a)=>a+2)));function isShadowed(e){return e.defs.length>=1}function isParseIntMethod(e){return"MemberExpression"===e.type&&!e.computed&&"Identifier"===e.property.type&&"parseInt"===e.property.name}function isValidRadix(e){return!("Literal"===e.type&&!validRadixValues.has(e.value)||"Identifier"===e.type&&"undefined"===e.name)}function isDefaultRadix(e){return"Literal"===e.type&&10===e.value}module.exports={meta:{type:"suggestion",docs:{description:"enforce the consistent use of the radix argument when using `parseInt()`",recommended:!1,url:"https://eslint.org/docs/rules/radix"},hasSuggestions:!0,schema:[{enum:["always","as-needed"]}],messages:{missingParameters:"Missing parameters.",redundantRadix:"Redundant radix parameter.",missingRadix:"Missing radix parameter.",invalidRadix:"Invalid radix parameter, must be an integer between 2 and 36.",addRadixParameter10:"Add radix parameter `10` for parsing decimal numbers."}},create(e){const a=e.options[0]||"always";function t(t){const s=t.arguments;switch(s.length){case 0:e.report({node:t,messageId:"missingParameters"});break;case 1:"always"===a&&e.report({node:t,messageId:"missingRadix",suggest:[{messageId:"addRadixParameter10",fix(a){const s=e.getSourceCode().getTokens(t),r=s[s.length-1],i=s[s.length-2],n="Punctuator"===i.type&&","===i.value;return a.insertTextBefore(r,n?" 10,":", 10")}}]});break;default:"as-needed"===a&&isDefaultRadix(s[1])?e.report({node:t,messageId:"redundantRadix"}):isValidRadix(s[1])||e.report({node:t,messageId:"invalidRadix"})}}return{"Program:exit"(){const a=e.getScope();let s;s=astUtils.getVariableByName(a,"parseInt"),s&&!isShadowed(s)&&s.references.forEach((e=>{const a=e.identifier;astUtils.isCallee(a)&&t(a.parent)})),s=astUtils.getVariableByName(a,"Number"),s&&!isShadowed(s)&&s.references.forEach((e=>{const a=e.identifier.parent,s="ChainExpression"===a.parent.type?a.parent:a;isParseIntMethod(a)&&astUtils.isCallee(s)&&t(s.parent)}))}}}};
//# sourceMappingURL=/sm/49ce24c3ea7c193e7af0f49bd1c9822df11ddc5ce716922637874a1075d6727b.map