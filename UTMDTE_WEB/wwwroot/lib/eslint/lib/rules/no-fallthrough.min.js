/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/no-fallthrough.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const DEFAULT_FALLTHROUGH_COMMENT=/falls?\s?through/iu;function hasFallthroughComment(e,t,n,o){const s=n.getSourceCode();if(1===e.consequent.length&&"BlockStatement"===e.consequent[0].type){const t=s.getLastToken(e.consequent[0]),n=s.getCommentsBefore(t).pop();if(n&&o.test(n.value))return!0}const a=s.getCommentsBefore(t).pop();return Boolean(a&&o.test(a.value))}function isReachable(e){return e.reachable}function hasBlankLinesBetween(e,t){return t.loc.start.line>e.loc.end.line+1}module.exports={meta:{type:"problem",docs:{description:"disallow fallthrough of `case` statements",recommended:!0,url:"https://eslint.org/docs/rules/no-fallthrough"},schema:[{type:"object",properties:{commentPattern:{type:"string",default:""}},additionalProperties:!1}],messages:{case:"Expected a 'break' statement before 'case'.",default:"Expected a 'break' statement before 'default'."}},create(e){const t=e.options[0]||{};let n=null;const o=e.getSourceCode();let s=null,a=null;return a=t.commentPattern?new RegExp(t.commentPattern,"u"):DEFAULT_FALLTHROUGH_COMMENT,{onCodePathStart(e){n=e},onCodePathEnd(){n=n.upper},SwitchCase(t){s&&!hasFallthroughComment(s,t,e,a)&&e.report({messageId:t.test?"case":"default",node:t}),s=null},"SwitchCase:exit"(e){const t=o.getTokenAfter(e);n.currentSegments.some(isReachable)&&(e.consequent.length>0||hasBlankLinesBetween(e,t))&&e.parent.cases[e.parent.cases.length-1]!==e&&(s=e)}}}};
//# sourceMappingURL=/sm/75b8d47becf9a81098287fe88c3f7efc190e18c1ab44db08b0324638b1424484.map