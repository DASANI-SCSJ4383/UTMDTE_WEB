/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/strict.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");function getUseStrictDirectives(e){const t=[];for(let s=0;s<e.length;s++){const i=e[s];if("ExpressionStatement"!==i.type||"Literal"!==i.expression.type||"use strict"!==i.expression.value)break;t[s]=i}return t}function isSimpleParameter(e){return"Identifier"===e.type}function isSimpleParameterList(e){return e.every(isSimpleParameter)}module.exports={meta:{type:"suggestion",docs:{description:"require or disallow strict mode directives",recommended:!1,url:"https://eslint.org/docs/rules/strict"},schema:[{enum:["never","global","function","safe"]}],fixable:"code",messages:{function:"Use the function form of 'use strict'.",global:"Use the global form of 'use strict'.",multiple:"Multiple 'use strict' directives.",never:"Strict mode is not permitted.",unnecessary:"Unnecessary 'use strict' directive.",module:"'use strict' is unnecessary inside of modules.",implied:"'use strict' is unnecessary when implied strict mode is enabled.",unnecessaryInClasses:"'use strict' is unnecessary inside of classes.",nonSimpleParameterList:"'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.",wrap:"Wrap {{name}} in a function with 'use strict' directive."}},create(e){const t=e.parserOptions.ecmaFeatures||{},s=[],i=[];let n=e.options[0]||"safe";function r(e){return"multiple"===e||"unnecessary"===e||"module"===e||"implied"===e||"unnecessaryInClasses"===e}function o(e){return t=>t.remove(e)}function a(t,s,i,n,r){t.slice(s,i).forEach((t=>{e.report({node:t,messageId:n,fix:r?o(t):null})}))}function c(e,t,s){a(e,0,e.length,t,s)}function l(e,t,s){a(e,1,e.length,t,s)}function u(){s.pop()}function m(t){const a="BlockStatement"===t.body.type?getUseStrictDirectives(t.body.body):[];"function"===n?function(t,n){const r=i.length>0,a=0===s.length&&0===i.length,c=s.length>0&&s[s.length-1],u=n.length>0;u?(isSimpleParameterList(t.params)?c?e.report({node:n[0],messageId:"unnecessary",fix:o(n[0])}):r&&e.report({node:n[0],messageId:"unnecessaryInClasses",fix:o(n[0])}):e.report({node:n[0],messageId:"nonSimpleParameterList"}),l(n,"multiple",!0)):a&&(isSimpleParameterList(t.params)?e.report({node:t,messageId:"function"}):e.report({node:t,messageId:"wrap",data:{name:astUtils.getFunctionNameWithKind(t)}})),s.push(c||u)}(t,a):a.length>0&&(isSimpleParameterList(t.params)?c(a,n,r(n)):(e.report({node:a[0],messageId:"nonSimpleParameterList"}),l(a,"multiple",!0)))}t.impliedStrict?n="implied":"safe"===n&&(n=t.globalReturn?"global":"function");const p={Program(t){const s=getUseStrictDirectives(t.body);"module"===t.sourceType&&(n="module"),"global"===n?(t.body.length>0&&0===s.length&&e.report({node:t,messageId:"global"}),l(s,"multiple",!0)):c(s,n,r(n))},FunctionDeclaration:m,FunctionExpression:m,ArrowFunctionExpression:m};return"function"===n&&Object.assign(p,{ClassBody(){i.push(!0)},"ClassBody:exit"(){i.pop()},"FunctionDeclaration:exit":u,"FunctionExpression:exit":u,"ArrowFunctionExpression:exit":u}),p}};
//# sourceMappingURL=/sm/ff8971632ae9b6025b4a77107b52fbafda3c903331cec2542e4b5f5f49a539ba.map