/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/nonblock-statement-body-position.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const POSITION_SCHEMA={enum:["beside","below","any"]};module.exports={meta:{type:"layout",docs:{description:"enforce the location of single-line statements",recommended:!1,url:"https://eslint.org/docs/rules/nonblock-statement-body-position"},fixable:"whitespace",schema:[POSITION_SCHEMA,{properties:{overrides:{properties:{if:POSITION_SCHEMA,else:POSITION_SCHEMA,while:POSITION_SCHEMA,do:POSITION_SCHEMA,for:POSITION_SCHEMA},additionalProperties:!1}},additionalProperties:!1}],messages:{expectNoLinebreak:"Expected no linebreak before this statement.",expectLinebreak:"Expected a linebreak before this statement."}},create(e){const t=e.getSourceCode();function o(o,n){const r=function(t){return e.options[1]&&e.options[1].overrides&&e.options[1].overrides[t]||e.options[0]||"beside"}(n);if("BlockStatement"===o.type||"any"===r)return;const i=t.getTokenBefore(o);i.loc.end.line===o.loc.start.line&&"below"===r?e.report({node:o,messageId:"expectLinebreak",fix:e=>e.insertTextBefore(o,"\n")}):i.loc.end.line!==o.loc.start.line&&"beside"===r&&e.report({node:o,messageId:"expectNoLinebreak",fix:e=>t.getText().slice(i.range[1],o.range[0]).trim()?null:e.replaceTextRange([i.range[1],o.range[0]]," ")})}return{IfStatement(e){o(e.consequent,"if"),e.alternate&&"IfStatement"!==e.alternate.type&&o(e.alternate,"else")},WhileStatement:e=>o(e.body,"while"),DoWhileStatement:e=>o(e.body,"do"),ForStatement:e=>o(e.body,"for"),ForInStatement:e=>o(e.body,"for"),ForOfStatement:e=>o(e.body,"for")}}};
//# sourceMappingURL=/sm/10f4062a3c9c6d403f33f34b40530aec1a4a50f6eb504d9baa41f4dda504f30b.map