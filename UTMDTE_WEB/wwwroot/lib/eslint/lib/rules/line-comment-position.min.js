/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/line-comment-position.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"layout",docs:{description:"enforce position of line comments",recommended:!1,url:"https://eslint.org/docs/rules/line-comment-position"},schema:[{oneOf:[{enum:["above","beside"]},{type:"object",properties:{position:{enum:["above","beside"]},ignorePattern:{type:"string"},applyDefaultPatterns:{type:"boolean"},applyDefaultIgnorePatterns:{type:"boolean"}},additionalProperties:!1}]}],messages:{above:"Expected comment to be above code.",beside:"Expected comment to be beside code."}},create(e){const t=e.options[0];let o,s,n=!0;t&&"string"!=typeof t?(o=!t.position||"above"===t.position,s=t.ignorePattern,n=Object.prototype.hasOwnProperty.call(t,"applyDefaultIgnorePatterns")?t.applyDefaultIgnorePatterns:!1!==t.applyDefaultPatterns):o=!t||"above"===t;const r=astUtils.COMMENTS_IGNORE_PATTERN,a=/^\s*falls?\s?through/u,i=new RegExp(s,"u"),l=e.getSourceCode();return{Program(){l.getAllComments().filter((e=>"Line"===e.type)).forEach((t=>{if(n&&(r.test(t.value)||a.test(t.value)))return;if(s&&i.test(t.value))return;const p=l.getTokenBefore(t,{includeComments:!0}),c=p&&p.loc.end.line===t.loc.start.line;o?c&&e.report({node:t,messageId:"above"}):c||e.report({node:t,messageId:"beside"})}))}}}};
//# sourceMappingURL=/sm/d664edf34c572686e59426cf9f9f2f1a6377fbc29a52bcc18bf69eb8296550a8.map