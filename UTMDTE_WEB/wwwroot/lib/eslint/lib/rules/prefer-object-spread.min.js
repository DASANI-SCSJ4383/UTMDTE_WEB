/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/prefer-object-spread.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const{CALL:CALL,ReferenceTracker:ReferenceTracker}=require("eslint-utils"),{isCommaToken:isCommaToken,isOpeningParenToken:isOpeningParenToken,isClosingParenToken:isClosingParenToken,isParenthesised:isParenthesised}=require("./utils/ast-utils"),ANY_SPACE=/\s/u;function hasArraySpread(e){return e.arguments.some((e=>"SpreadElement"===e.type))}function isAccessorProperty(e){return"Property"===e.type&&("get"===e.kind||"set"===e.kind)}function hasAccessors(e){return e.properties.some(isAccessorProperty)}function hasArgumentsWithAccessors(e){return e.arguments.filter((e=>"ObjectExpression"===e.type)).some(hasAccessors)}function needsParens(e,s){const t=e.parent;switch(t.type){case"VariableDeclarator":case"ArrayExpression":case"ReturnStatement":case"CallExpression":case"Property":return!1;case"AssignmentExpression":return t.left===e&&!isParenthesised(s,e);default:return!isParenthesised(s,e)}}function argNeedsParens(e,s){switch(e.type){case"AssignmentExpression":case"ArrowFunctionExpression":case"ConditionalExpression":return!isParenthesised(s,e);default:return!1}}function getParenTokens(e,s,t){const n=[t.getFirstToken(e),t.getLastToken(e)];let r=t.getTokenBefore(e),o=t.getTokenAfter(e);for(;r&&o&&r.range[0]>s.range[0]&&isOpeningParenToken(r)&&isClosingParenToken(o);)n.push(r,o),r=t.getTokenBefore(r),o=t.getTokenAfter(o);return n.sort(((e,s)=>e.range[0]-s.range[0]))}function getStartWithSpaces(e,s){const t=s.text;let n=e.range[0];{const t=s.getTokenBefore(e,{includeComments:!0});if(t&&"Line"===t.type)return n}for(;ANY_SPACE.test(t[n-1]||"");)n-=1;return n}function getEndWithSpaces(e,s){const t=s.text;let n=e.range[1];for(;ANY_SPACE.test(t[n]||"");)n+=1;return n}function defineFixer(e,s){return function*(t){const n=s.getTokenAfter(e.callee,isOpeningParenToken),r=s.getLastToken(e);yield t.removeRange([e.range[0],n.range[0]]),needsParens(e,s)?(yield t.replaceText(n,"({"),yield t.replaceText(r,"})")):(yield t.replaceText(n,"{"),yield t.replaceText(r,"}"));for(const r of e.arguments){const e=getParenTokens(r,n,s),o=e.shift(),a=e.pop();if("ObjectExpression"===r.type){const n=s.getLastToken(r,1),i=s.getTokenAfter(a);for(const s of e)yield t.remove(s);const c=[o.range[0],getEndWithSpaces(o,s)],g=[Math.max(getStartWithSpaces(a,s),c[1]),a.range[1]];yield t.removeRange(c),yield t.removeRange(g),(0===r.properties.length||isCommaToken(n))&&isCommaToken(i)&&(yield t.remove(i))}else argNeedsParens(r,s)?(yield t.insertTextBefore(o,"...("),yield t.insertTextAfter(a,")")):yield t.insertTextBefore(o,"...")}}}module.exports={meta:{type:"suggestion",docs:{description:"disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",recommended:!1,url:"https://eslint.org/docs/rules/prefer-object-spread"},schema:[],fixable:"code",messages:{useSpreadMessage:"Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",useLiteralMessage:"Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`."}},create(e){const s=e.getSourceCode();return{Program(){const t=e.getScope(),n=new ReferenceTracker(t),r={Object:{assign:{[CALL]:!0}}};for(const{node:t}of n.iterateGlobalReferences(r))if(t.arguments.length>=1&&"ObjectExpression"===t.arguments[0].type&&!hasArraySpread(t)&&!(t.arguments.length>1&&hasArgumentsWithAccessors(t))){const n=1===t.arguments.length?"useLiteralMessage":"useSpreadMessage",r=defineFixer(t,s);e.report({node:t,messageId:n,fix:r})}}}}};
//# sourceMappingURL=/sm/9a75877843fb1dba97d9ddec3cc6a88904ae80e50522e1fa75ed7a30f3eb721a.map