/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/prefer-const.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const FixTracker=require("./utils/fix-tracker"),astUtils=require("./utils/ast-utils"),PATTERN_TYPE=/^(?:.+?Pattern|RestElement|SpreadProperty|ExperimentalRestProperty|Property)$/u,DECLARATION_HOST_TYPE=/^(?:Program|BlockStatement|StaticBlock|SwitchCase)$/u,DESTRUCTURING_HOST_TYPE=/^(?:VariableDeclarator|AssignmentExpression)$/u;function isInitOfForStatement(e){return"ForStatement"===e.parent.type&&e.parent.init===e}function canBecomeVariableDeclaration(e){let t=e.parent;for(;PATTERN_TYPE.test(t.type);)t=t.parent;return"VariableDeclarator"===t.type||"AssignmentExpression"===t.type&&"ExpressionStatement"===t.parent.type&&DECLARATION_HOST_TYPE.test(t.parent.parent.type)}function isOuterVariableInDestructing(e,t){if(t.through.find((t=>t.resolved&&t.resolved.name===e)))return!0;const n=astUtils.getVariableByName(t,e);return null!==n&&n.defs.some((e=>"Parameter"===e.type))}function getDestructuringHost(e){if(!e.isWrite())return null;let t=e.identifier.parent;for(;PATTERN_TYPE.test(t.type);)t=t.parent;return DESTRUCTURING_HOST_TYPE.test(t.type)?t:null}function hasMemberExpressionAssignment(e){switch(e.type){case"ObjectPattern":return e.properties.some((e=>!!e&&hasMemberExpressionAssignment(e.argument||e.value)));case"ArrayPattern":return e.elements.some((e=>!!e&&hasMemberExpressionAssignment(e)));case"AssignmentPattern":return hasMemberExpressionAssignment(e.left);case"MemberExpression":return!0}return!1}function getIdentifierIfShouldBeConst(e,t){if(e.eslintUsed&&"global"===e.scope.type)return null;let n=null,r=!1;const i=e.references;for(let s=0;s<i.length;++s){const a=i[s];if(a.isWrite()){if(null!==n&&n.identifier!==a.identifier)return null;const t=getDestructuringHost(a);if(null!==t&&void 0!==t.left){const n=t.left;let r=!1,i=!1;if("ObjectPattern"===n.type){r=n.properties.filter((e=>e.value)).map((e=>e.value.name)).some((t=>isOuterVariableInDestructing(t,e.scope))),i=hasMemberExpressionAssignment(n)}else if("ArrayPattern"===n.type){r=n.elements.map((e=>e&&e.name)).some((t=>isOuterVariableInDestructing(t,e.scope))),i=hasMemberExpressionAssignment(n)}if(r||i)return null}n=a}else if(a.isRead()&&null===n){if(t)return null;r=!0}}return null!==n&&n.from===e.scope&&canBecomeVariableDeclaration(n.identifier)?r?e.defs[0].name:n.identifier:null}function groupByDestructuring(e,t){const n=new Map;for(let r=0;r<e.length;++r){const i=e[r],s=i.references,a=getIdentifierIfShouldBeConst(i,t);let l=null;for(let e=0;e<s.length;++e){const t=s[e],r=t.identifier;if(r===l)continue;l=r;const i=getDestructuringHost(t);i&&(n.has(i)?n.get(i).push(a):n.set(i,[a]))}}return n}function findUp(e,t,n){return!e||n(e)?null:e.type===t?e:findUp(e.parent,t,n)}module.exports={meta:{type:"suggestion",docs:{description:"require `const` declarations for variables that are never reassigned after declared",recommended:!1,url:"https://eslint.org/docs/rules/prefer-const"},fixable:"code",schema:[{type:"object",properties:{destructuring:{enum:["any","all"],default:"any"},ignoreReadBeforeAssign:{type:"boolean",default:!1}},additionalProperties:!1}],messages:{useConst:"'{{name}}' is never reassigned. Use 'const' instead."}},create(e){const t=e.options[0]||{},n=e.getSourceCode(),r="all"!==t.destructuring,i=!0===t.ignoreReadBeforeAssign,s=[];let a=0,l=null,o="";function u(t){const i=t.filter(Boolean);if(t.length&&(r||i.length===t.length)){const r=findUp(t[0],"VariableDeclaration",(e=>e.type.endsWith("Statement"))),s=null===r;if(!s&&r.declarations.length>0){const e=r.declarations[0];if(e.init){const t=e.init.parent;"VariableDeclarator"===t.type&&(t.id.name!==o&&(o=t.id.name,a=0),"ObjectPattern"===t.id.type&&t.init.name!==o&&(o=t.init.name,a=0),t.id!==l&&(l=t.id,a=0))}}let u=r&&("ForInStatement"===r.parent.type||"ForOfStatement"===r.parent.type||r.declarations.every((e=>e.init)))&&i.length===t.length;!s&&r.declarations&&1!==r.declarations.length&&r&&r.declarations&&r.declarations.length>=1&&(a+=i.length,u=u&&a===r.declarations.length),i.forEach((t=>{e.report({node:t,messageId:"useConst",data:t,fix:u?e=>{const t=n.getFirstToken(r,(e=>e.value===r.kind));return new FixTracker(e,n).retainRange(r.range).replaceTextRange(t.range,"const")}:null})}))}}return{"Program:exit"(){groupByDestructuring(s,i).forEach(u)},VariableDeclaration(t){"let"!==t.kind||isInitOfForStatement(t)||s.push(...e.getDeclaredVariables(t))}}}};
//# sourceMappingURL=/sm/6dc54b61b3c4e5b83fd2db244dd1cc38a3a800d18a8a25d2eaacf37de86d4d1f.map