/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/brace-style.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"layout",docs:{description:"enforce consistent brace style for blocks",recommended:!1,url:"https://eslint.org/docs/rules/brace-style"},schema:[{enum:["1tbs","stroustrup","allman"]},{type:"object",properties:{allowSingleLine:{type:"boolean",default:!1}},additionalProperties:!1}],fixable:"whitespace",messages:{nextLineOpen:"Opening curly brace does not appear on the same line as controlling statement.",sameLineOpen:"Opening curly brace appears on the same line as controlling statement.",blockSameLine:"Statement inside of curly braces should be on next line.",nextLineClose:"Closing curly brace does not appear on the same line as the subsequent block.",singleLineClose:"Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",sameLineClose:"Closing curly brace appears on the same line as the subsequent block."}},create(e){const t=e.options[0]||"1tbs",n=e.options[1]||{},s=e.getSourceCode();function o(e,t){const n=[e.range[1],t.range[0]];return s.text.slice(n[0],n[1]).trim()?null:e=>e.replaceTextRange(n," ")}function a(a,i){const r=s.getTokenBefore(a),l=s.getTokenAfter(a),c=s.getTokenBefore(i),m=n.allowSingleLine&&astUtils.isTokenOnSameLine(a,i);"allman"===t||astUtils.isTokenOnSameLine(r,a)||e.report({node:a,messageId:"nextLineOpen",fix:o(r,a)}),"allman"===t&&astUtils.isTokenOnSameLine(r,a)&&!m&&e.report({node:a,messageId:"sameLineOpen",fix:e=>e.insertTextBefore(a,"\n")}),astUtils.isTokenOnSameLine(a,l)&&l!==i&&!m&&e.report({node:a,messageId:"blockSameLine",fix:e=>e.insertTextAfter(a,"\n")}),c!==a&&!m&&astUtils.isTokenOnSameLine(c,i)&&e.report({node:i,messageId:"singleLineClose",fix:e=>e.insertTextBefore(i,"\n")})}function i(n){const a=s.getTokenAfter(n);"1tbs"!==t||astUtils.isTokenOnSameLine(n,a)||e.report({node:n,messageId:"nextLineClose",fix:o(n,a)}),"1tbs"!==t&&astUtils.isTokenOnSameLine(n,a)&&e.report({node:n,messageId:"sameLineClose",fix:e=>e.insertTextAfter(n,"\n")})}return{BlockStatement(e){astUtils.STATEMENT_LIST_PARENTS.has(e.parent.type)||a(s.getFirstToken(e),s.getLastToken(e))},StaticBlock(e){a(s.getFirstToken(e,{skip:1}),s.getLastToken(e))},ClassBody(e){a(s.getFirstToken(e),s.getLastToken(e))},SwitchStatement(e){const t=s.getLastToken(e);a(s.getTokenBefore(e.cases.length?e.cases[0]:t),t)},IfStatement(e){"BlockStatement"===e.consequent.type&&e.alternate&&i(s.getLastToken(e.consequent))},TryStatement(e){i(s.getLastToken(e.block)),e.handler&&e.finalizer&&i(s.getLastToken(e.handler.body))}}}};
//# sourceMappingURL=/sm/2a155a980611d82df3366c3aaac00c97e72aaa8bb0d49da1b0dccd4b0e049533.map