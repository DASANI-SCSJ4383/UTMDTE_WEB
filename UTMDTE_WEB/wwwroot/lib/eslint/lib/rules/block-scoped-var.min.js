/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/block-scoped-var.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";module.exports={meta:{type:"suggestion",docs:{description:"enforce the use of variables within the scope they are defined",recommended:!1,url:"https://eslint.org/docs/rules/block-scoped-var"},schema:[],messages:{outOfScope:"'{{name}}' used outside of binding context."}},create(e){let t=[];function n(e){t.push(e.range)}function o(){t.pop()}function a(t){const n=t.identifier;e.report({node:n,messageId:"outOfScope",data:{name:n.name}})}return{Program(e){t=[e.range]},BlockStatement:n,"BlockStatement:exit":o,ForStatement:n,"ForStatement:exit":o,ForInStatement:n,"ForInStatement:exit":o,ForOfStatement:n,"ForOfStatement:exit":o,SwitchStatement:n,"SwitchStatement:exit":o,CatchClause:n,"CatchClause:exit":o,StaticBlock:n,"StaticBlock:exit":o,VariableDeclaration:function(n){if("var"!==n.kind)return;const o=t[t.length-1];function r(e){const t=e.identifier.range;return t[0]<o[0]||t[1]>o[1]}const i=e.getDeclaredVariables(n);for(let e=0;e<i.length;++e)i[e].references.filter(r).forEach(a)}}}};
//# sourceMappingURL=/sm/61d546a12f67f0de512dbf4b38f516b7654f51c86a4878f756d803fcd0514ec1.map