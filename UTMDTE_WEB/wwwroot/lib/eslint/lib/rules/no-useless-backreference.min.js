/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/no-useless-backreference.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const{CALL:CALL,CONSTRUCT:CONSTRUCT,ReferenceTracker:ReferenceTracker,getStringIfConstant:getStringIfConstant}=require("eslint-utils"),{RegExpParser:RegExpParser,visitRegExpAST:visitRegExpAST}=require("regexpp"),parser=new RegExpParser;function getPathToRoot(e){const r=[];let t=e;do{r.push(t),t=t.parent}while(t);return r}function isLookaround(e){return"Assertion"===e.type&&("lookahead"===e.kind||"lookbehind"===e.kind)}function isNegativeLookaround(e){return isLookaround(e)&&e.negate}module.exports={meta:{type:"problem",docs:{description:"disallow useless backreferences in regular expressions",recommended:!0,url:"https://eslint.org/docs/rules/no-useless-backreference"},schema:[],messages:{nested:"Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' from within that group.",forward:"Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears later in the pattern.",backward:"Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears before in the same lookbehind.",disjunctive:"Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in another alternative.",intoNegativeLookaround:"Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in a negative lookaround."}},create(e){function r(r,t,n){let o;try{o=parser.parsePattern(t,0,t.length,n.includes("u"))}catch{return}visitRegExpAST(o,{onBackreferenceEnter(t){const n=t.resolved,o=getPathToRoot(t),s=getPathToRoot(n);let i=null;if(o.includes(n))i="nested";else{let e=o.length-1,r=s.length-1;do{e--,r--}while(o[e]===s[r]);const a=r+1,c=s.slice(0,a),g=s.slice(a).find(isLookaround),l=g&&"lookbehind"===g.kind;!l&&t.end<=n.start?i="forward":l&&n.end<=t.start?i="backward":"Alternative"===c[c.length-1].type?i="disjunctive":c.some(isNegativeLookaround)&&(i="intoNegativeLookaround")}i&&e.report({node:r,messageId:i,data:{bref:t.raw,group:n.raw}})}})}return{"Literal[regex]"(e){const{pattern:t,flags:n}=e.regex;r(e,t,n)},Program(){const t=e.getScope(),n=new ReferenceTracker(t),o={RegExp:{[CALL]:!0,[CONSTRUCT]:!0}};for(const{node:e}of n.iterateGlobalReferences(o)){const[n,o]=e.arguments,s=getStringIfConstant(n,t),i=getStringIfConstant(o,t);"string"==typeof s&&r(e,s,i||"")}}}}};
//# sourceMappingURL=/sm/0fd848893e2385ba97fb11fdf4e04c38f659d7262687a499d7368ee2cfd4f6e8.map