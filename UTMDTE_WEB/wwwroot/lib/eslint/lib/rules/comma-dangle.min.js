/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/comma-dangle.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils"),DEFAULT_OPTIONS=Object.freeze({arrays:"never",objects:"never",imports:"never",exports:"never",functions:"never"});function isTrailingCommaAllowed(e){return!("RestElement"===e.type||"RestProperty"===e.type||"ExperimentalRestProperty"===e.type)}function normalizeOptions(e,t){return"string"==typeof e?{arrays:e,objects:e,imports:e,exports:e,functions:!t||t<8?"ignore":e}:"object"==typeof e&&null!==e?{arrays:e.arrays||DEFAULT_OPTIONS.arrays,objects:e.objects||DEFAULT_OPTIONS.objects,imports:e.imports||DEFAULT_OPTIONS.imports,exports:e.exports||DEFAULT_OPTIONS.exports,functions:e.functions||DEFAULT_OPTIONS.functions}:DEFAULT_OPTIONS}module.exports={meta:{type:"layout",docs:{description:"require or disallow trailing commas",recommended:!1,url:"https://eslint.org/docs/rules/comma-dangle"},fixable:"code",schema:{definitions:{value:{enum:["always-multiline","always","never","only-multiline"]},valueWithIgnore:{enum:["always-multiline","always","ignore","never","only-multiline"]}},type:"array",items:[{oneOf:[{$ref:"#/definitions/value"},{type:"object",properties:{arrays:{$ref:"#/definitions/valueWithIgnore"},objects:{$ref:"#/definitions/valueWithIgnore"},imports:{$ref:"#/definitions/valueWithIgnore"},exports:{$ref:"#/definitions/valueWithIgnore"},functions:{$ref:"#/definitions/valueWithIgnore"}},additionalProperties:!1}]}],additionalItems:!1},messages:{unexpected:"Unexpected trailing comma.",missing:"Missing trailing comma."}},create(e){const t=normalizeOptions(e.options[0],e.parserOptions.ecmaVersion),n=e.getSourceCode();function r(e){function t(e){return e[e.length-1]}switch(e.type){case"ObjectExpression":case"ObjectPattern":return t(e.properties);case"ArrayExpression":case"ArrayPattern":return t(e.elements);case"ImportDeclaration":case"ExportNamedDeclaration":return t(e.specifiers);case"FunctionDeclaration":case"FunctionExpression":case"ArrowFunctionExpression":return t(e.params);case"CallExpression":case"NewExpression":return t(e.arguments);default:return null}}function o(e,t){switch(e.type){case"ObjectExpression":case"ArrayExpression":case"CallExpression":case"NewExpression":return n.getLastToken(e,1);default:{const e=n.getTokenAfter(t);return astUtils.isCommaToken(e)?e:n.getLastToken(t)}}}function s(e){const t=r(e);if(!t)return!1;const s=o(e,t);return n.getTokenAfter(s).loc.end.line!==s.loc.end.line}function i(t){const s=r(t);if(!s||"ImportDeclaration"===t.type&&"ImportSpecifier"!==s.type)return;const i=o(t,s);astUtils.isCommaToken(i)&&e.report({node:s,loc:i.loc,messageId:"unexpected",*fix(e){yield e.remove(i),yield e.insertTextBefore(n.getTokenBefore(i),""),yield e.insertTextAfter(n.getTokenAfter(i),"")}})}function a(t){const s=r(t);if(!s||"ImportDeclaration"===t.type&&"ImportSpecifier"!==s.type)return;if(!isTrailingCommaAllowed(s))return void i(t);const a=o(t,s);","!==a.value&&e.report({node:s,loc:{start:a.loc.end,end:astUtils.getNextLocation(n,a.loc.end)},messageId:"missing",*fix(e){yield e.insertTextAfter(a,","),yield e.insertTextBefore(a,""),yield e.insertTextAfter(n.getTokenAfter(a),"")}})}const c={always:a,"always-multiline":function(e){s(e)?a(e):i(e)},"only-multiline":function(e){s(e)||i(e)},never:i,ignore:()=>{}};return{ObjectExpression:c[t.objects],ObjectPattern:c[t.objects],ArrayExpression:c[t.arrays],ArrayPattern:c[t.arrays],ImportDeclaration:c[t.imports],ExportNamedDeclaration:c[t.exports],FunctionDeclaration:c[t.functions],FunctionExpression:c[t.functions],ArrowFunctionExpression:c[t.functions],CallExpression:c[t.functions],NewExpression:c[t.functions]}}};
//# sourceMappingURL=/sm/d29cdfbd68e3bce2704a8283944d424b70c48f2ce05aaf94c9194dc19e258d0e.map