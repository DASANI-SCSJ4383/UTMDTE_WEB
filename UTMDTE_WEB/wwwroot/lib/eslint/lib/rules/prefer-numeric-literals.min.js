/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/prefer-numeric-literals.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils"),radixMap=new Map([[2,{system:"binary",literalPrefix:"0b"}],[8,{system:"octal",literalPrefix:"0o"}],[16,{system:"hexadecimal",literalPrefix:"0x"}]]);function isParseInt(e){return astUtils.isSpecificId(e,"parseInt")||astUtils.isSpecificMemberAccess(e,"Number","parseInt")}module.exports={meta:{type:"suggestion",docs:{description:"disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",recommended:!1,url:"https://eslint.org/docs/rules/prefer-numeric-literals"},schema:[],messages:{useLiteral:"Use {{system}} literals instead of {{functionName}}()."},fixable:"code"},create(e){const t=e.getSourceCode();return{"CallExpression[arguments.length=2]"(s){const[a,r]=s.arguments,i=astUtils.getStaticStringValue(a),n=r.value;if(null!==i&&astUtils.isStringLiteral(a)&&"Literal"===r.type&&"number"==typeof n&&radixMap.has(n)&&isParseInt(s.callee)){const{system:a,literalPrefix:r}=radixMap.get(n);e.report({node:s,messageId:"useLiteral",data:{system:a,functionName:t.getText(s.callee)},fix(e){if(t.getCommentsInside(s).length)return null;const a=`${r}${i}`;if(+a!==parseInt(i,n))return null;const l=t.getTokenBefore(s),c=t.getTokenAfter(s);let o="",u="";return l&&l.range[1]===s.range[0]&&!astUtils.canTokensBeAdjacent(l,a)&&(o=" "),c&&s.range[1]===c.range[0]&&!astUtils.canTokensBeAdjacent(a,c)&&(u=" "),e.replaceText(s,`${o}${a}${u}`)}})}}}}};
//# sourceMappingURL=/sm/fea455a58db6d904cf5059198f3122d70a30b309d6f9d54a1edeb48ff335b531.map