/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/multiline-ternary.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"layout",docs:{description:"enforce newlines between operands of ternary expressions",recommended:!1,url:"https://eslint.org/docs/rules/multiline-ternary"},schema:[{enum:["always","always-multiline","never"]}],messages:{expectedTestCons:"Expected newline between test and consequent of ternary expression.",expectedConsAlt:"Expected newline between consequent and alternate of ternary expression.",unexpectedTestCons:"Unexpected newline between test and consequent of ternary expression.",unexpectedConsAlt:"Unexpected newline between consequent and alternate of ternary expression."},fixable:"whitespace"},create(e){const n=e.getSourceCode(),t=e.options[0],s="never"!==t,o="always-multiline"===t;return{ConditionalExpression(t){const r=n.getTokenAfter(t.test,astUtils.isNotClosingParenToken),a=n.getTokenAfter(t.consequent,astUtils.isNotClosingParenToken),l=n.getFirstToken(t),i=n.getTokenBefore(r),c=n.getTokenAfter(r),d=n.getTokenBefore(a),u=n.getTokenAfter(a),g=astUtils.isTokenOnSameLine(i,c),p=astUtils.isTokenOnSameLine(d,u),m=!!n.getCommentsInside(t).length;if(s){if(o&&t.loc.start.line===t.loc.end.line)return;g&&e.report({node:t.test,loc:{start:l.loc.start,end:i.loc.end},messageId:"expectedTestCons",fix:e=>m?null:e.replaceTextRange([i.range[1],r.range[0]],"\n")}),p&&e.report({node:t.consequent,loc:{start:c.loc.start,end:d.loc.end},messageId:"expectedConsAlt",fix:e=>m?null:e.replaceTextRange([d.range[1],a.range[0]],"\n")})}else g||e.report({node:t.test,loc:{start:l.loc.start,end:i.loc.end},messageId:"unexpectedTestCons",fix:e=>{if(m)return null;const n=[],t=astUtils.isTokenOnSameLine(i,r),s=astUtils.isTokenOnSameLine(r,c);return t||n.push(e.removeRange([i.range[1],r.range[0]])),s||n.push(e.removeRange([r.range[1],c.range[0]])),n}}),p||e.report({node:t.consequent,loc:{start:c.loc.start,end:d.loc.end},messageId:"unexpectedConsAlt",fix:e=>{if(m)return null;const n=[],t=astUtils.isTokenOnSameLine(d,a),s=astUtils.isTokenOnSameLine(a,u);return t||n.push(e.removeRange([d.range[1],a.range[0]])),s||n.push(e.removeRange([a.range[1],u.range[0]])),n}})}}}};
//# sourceMappingURL=/sm/a30c202f1b384305a2ac56bc262cb6eda929ea5eba74518862d48789ee2769c7.map