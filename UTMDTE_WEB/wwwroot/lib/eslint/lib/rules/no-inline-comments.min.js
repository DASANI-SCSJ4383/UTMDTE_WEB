/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/no-inline-comments.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils");module.exports={meta:{type:"suggestion",docs:{description:"disallow inline comments after code",recommended:!1,url:"https://eslint.org/docs/rules/no-inline-comments"},schema:[{type:"object",properties:{ignorePattern:{type:"string"}},additionalProperties:!1}],messages:{unexpectedInlineComment:"Unexpected comment inline with code."}},create(e){const t=e.getSourceCode(),n=e.options[0];let i;function o(n){const o=String(t.lines[n.loc.start.line-1]),s=String(t.lines[n.loc.end.line-1]),r=o.slice(0,n.loc.start.column).trim(),l=s.slice(n.loc.end.column).trim(),c=!r,m=!l;if(!(c&&m||i&&i.test(n.value))){if((c||"{"===r)&&(m||"}"===l)){const e=t.getNodeByRangeIndex(n.range[0]);if(e&&"JSXEmptyExpression"===e.type)return}astUtils.isDirectiveComment(n)||e.report({node:n,messageId:"unexpectedInlineComment"})}}return n&&n.ignorePattern&&(i=new RegExp(n.ignorePattern,"u")),{Program(){t.getAllComments().filter((e=>"Shebang"!==e.type)).forEach(o)}}}};
//# sourceMappingURL=/sm/f2ee7371d14505d0fd1aa90f571e3a1785baf6e609b0701809c006449ffe6a33.map