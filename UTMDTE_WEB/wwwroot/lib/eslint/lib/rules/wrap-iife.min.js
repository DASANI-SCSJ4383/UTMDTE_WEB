/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/wrap-iife.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils"),eslintUtils=require("eslint-utils");function isCalleeOfNewExpression(e){const t="ChainExpression"===e.parent.type?e.parent:e;return"NewExpression"===t.parent.type&&t.parent.callee===t}module.exports={meta:{type:"layout",docs:{description:"require parentheses around immediate `function` invocations",recommended:!1,url:"https://eslint.org/docs/rules/wrap-iife"},schema:[{enum:["outside","inside","any"]},{type:"object",properties:{functionPrototypeMethods:{type:"boolean",default:!1}},additionalProperties:!1}],fixable:"code",messages:{wrapInvocation:"Wrap an immediate function invocation in parentheses.",wrapExpression:"Wrap only the function expression in parens.",moveInvocation:"Move the invocation into the parens that contain the function."}},create(e){const t=e.options[0]||"outside",n=e.options[1]&&e.options[1].functionPrototypeMethods,s=e.getSourceCode();function i(e){return astUtils.isParenthesised(s,e)}return{CallExpression(o){const r=function(e){const t=astUtils.skipChainExpression(e.callee);return"FunctionExpression"===t.type?t:!n||"MemberExpression"!==t.type||"FunctionExpression"!==t.object.type||"call"!==astUtils.getStaticPropertyName(t)&&"apply"!==astUtils.getStaticPropertyName(t)?null:t.object}(o);if(!r)return;const a=i(o),p=i(r);a||p?"inside"!==t||p?"outside"!==t||a||e.report({node:o,messageId:"moveInvocation",fix(e){const t=s.getTokenAfter(r);return e.replaceTextRange([t.range[0],o.range[1]],`${s.getText().slice(t.range[1],o.range[1])})`)}}):e.report({node:o,messageId:"wrapExpression",fix(e){if(function(e){return eslintUtils.isParenthesized(1,e,s)}(o)&&!isCalleeOfNewExpression(o)){const t=s.getTokenAfter(o);return e.replaceTextRange([r.range[1],t.range[1]],`)${s.getText().slice(r.range[1],t.range[0])}`)}return e.replaceText(r,`(${s.getText(r)})`)}}):e.report({node:o,messageId:"wrapInvocation",fix(e){const n="inside"===t?r:o;return e.replaceText(n,`(${s.getText(n)})`)}})}}}};
//# sourceMappingURL=/sm/a43e5315b82fe5eee8ab72362df186a77278072593fa13292a050114a16b5c0f.map