/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/rules/max-statements.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const astUtils=require("./utils/ast-utils"),{upperCaseFirst:upperCaseFirst}=require("../shared/string-utils");module.exports={meta:{type:"suggestion",docs:{description:"enforce a maximum number of statements allowed in function blocks",recommended:!1,url:"https://eslint.org/docs/rules/max-statements"},schema:[{oneOf:[{type:"integer",minimum:0},{type:"object",properties:{maximum:{type:"integer",minimum:0},max:{type:"integer",minimum:0}},additionalProperties:!1}]},{type:"object",properties:{ignoreTopLevelFunctions:{type:"boolean"}},additionalProperties:!1}],messages:{exceed:"{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}."}},create(e){const t=[],o=e.options[0],n=e.options[1]&&e.options[1].ignoreTopLevelFunctions||!1,i=[];let s=10;function r(t,o,n){if(o>n){const i=upperCaseFirst(astUtils.getFunctionNameWithKind(t));e.report({node:t,messageId:"exceed",data:{name:i,count:o,max:n}})}}function a(){t.push(0)}function c(e){const o=t.pop();"StaticBlock"!==e.type&&(n&&0===t.length?i.push({node:e,count:o}):r(e,o,s))}return"object"==typeof o&&(Object.prototype.hasOwnProperty.call(o,"maximum")||Object.prototype.hasOwnProperty.call(o,"max"))?s=o.maximum||o.max:"number"==typeof o&&(s=o),{FunctionDeclaration:a,FunctionExpression:a,ArrowFunctionExpression:a,StaticBlock:a,BlockStatement:function(e){t[t.length-1]+=e.body.length},"FunctionDeclaration:exit":c,"FunctionExpression:exit":c,"ArrowFunctionExpression:exit":c,"StaticBlock:exit":c,"Program:exit"(){1!==i.length&&i.forEach((e=>{const t=e.count;r(e.node,t,s)}))}}}};
//# sourceMappingURL=/sm/92a5255f9aa6563ce90c0e543b427dc9547b5ee8e0494786a36d3006be2c672c.map