/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/cli-engine/cli-engine.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const fs=require("fs"),path=require("path"),defaultOptions=require("../../conf/default-cli-options"),pkg=require("../../package.json"),{Legacy:{ConfigOps:ConfigOps,naming:naming,CascadingConfigArrayFactory:CascadingConfigArrayFactory,IgnorePattern:IgnorePattern,getUsedExtractedConfigs:getUsedExtractedConfigs,ModuleResolver:ModuleResolver}}=require("@eslint/eslintrc"),{FileEnumerator:FileEnumerator}=require("./file-enumerator"),{Linter:Linter}=require("../linter"),builtInRules=require("../rules"),loadRules=require("./load-rules"),hash=require("./hash"),LintResultCache=require("./lint-result-cache"),debug=require("debug")("eslint:cli-engine"),validFixTypes=new Set(["directive","problem","suggestion","layout"]),internalSlotsMap=new WeakMap;function validateFixTypes(e){for(const t of e)if(!validFixTypes.has(t))throw new Error(`Invalid fix type "${t}" found.`)}function calculateStatsPerFile(e){return e.reduce(((e,t)=>(t.fatal||2===t.severity?(e.errorCount++,t.fatal&&e.fatalErrorCount++,t.fix&&e.fixableErrorCount++):(e.warningCount++,t.fix&&e.fixableWarningCount++),e)),{errorCount:0,fatalErrorCount:0,warningCount:0,fixableErrorCount:0,fixableWarningCount:0})}function calculateStatsPerRun(e){return e.reduce(((e,t)=>(e.errorCount+=t.errorCount,e.fatalErrorCount+=t.fatalErrorCount,e.warningCount+=t.warningCount,e.fixableErrorCount+=t.fixableErrorCount,e.fixableWarningCount+=t.fixableWarningCount,e)),{errorCount:0,fatalErrorCount:0,warningCount:0,fixableErrorCount:0,fixableWarningCount:0})}function verifyText({text:e,cwd:t,filePath:r,config:n,fix:i,allowInlineConfig:o,reportUnusedDisableDirectives:a,fileEnumerator:s,linter:l}){const u=r||"<text>";debug(`Lint ${u}`);const c="<text>"===u?path.join(t,u):u,{fixed:g,messages:f,output:p}=l.verifyAndFix(e,n,{allowInlineConfig:o,filename:c,fix:i,reportUnusedDisableDirectives:a,filterCodeBlock:e=>s.isTargetPath(e)}),d={filePath:u,messages:f,suppressedMessages:l.getSuppressedMessages(),...calculateStatsPerFile(f)};return g&&(d.output=p),d.errorCount+d.warningCount>0&&void 0===d.output&&(d.source=e),d}function createIgnoreResult(e,t){let r;const n=e.split(path.sep).find((e=>/^\./u.test(e))),i=t&&path.relative(t,e).startsWith("node_modules");return r=n?"File ignored by default.  Use a negated ignore pattern (like \"--ignore-pattern '!<relative/path/to/filename>'\") to override.":i?"File ignored by default. Use \"--ignore-pattern '!node_modules/*'\" to override.":'File ignored because of a matching ignore pattern. Use "--no-ignore" to override.',{filePath:path.resolve(e),messages:[{fatal:!1,severity:1,message:r}],suppressedMessages:[],errorCount:0,fatalErrorCount:0,warningCount:1,fixableErrorCount:0,fixableWarningCount:0}}function getRule(e,t){for(const r of t){const t=r.pluginRules.get(e);if(t)return t}return builtInRules.get(e)||null}function shouldMessageBeFixed(e,t,r){if(!e.ruleId)return r.has("directive");const n=e.ruleId&&getRule(e.ruleId,t);return Boolean(n&&n.meta&&r.has(n.meta.type))}function*iterateRuleDeprecationWarnings(e){const t=new Set,r=[].concat(...e.map(getUsedExtractedConfigs));for(const n of r)for(const[r,i]of Object.entries(n.rules)){if(t.has(r))continue;if(t.add(r),!ConfigOps.getRuleSeverity(i))continue;const n=getRule(r,e);n&&n.meta&&n.meta.deprecated&&(yield{ruleId:r,replacedBy:n.meta.replacedBy||[]})}}function isErrorMessage(e){return 2===e.severity}function getCacheFile(e,t){const r=path.normalize(e),n=path.resolve(t,r),i=r.slice(-1)===path.sep;function o(){return path.join(n,`.cache_${hash(t)}`)}let a;try{a=fs.lstatSync(n)}catch{a=null}return a?a.isDirectory()||i?o():n:i?o():n}function toBooleanMap(e,t,r){if(e&&!Array.isArray(e))throw new Error(`${r} must be an array.`);if(e&&e.length>0)return e.reduce(((e,r)=>{const[n,i]=r.split(":");return"__proto__"!==n&&(e[n]=void 0===i?t:"true"===i),e}),{})}function createConfigDataFromOptions(e){const{ignorePattern:t,parser:r,parserOptions:n,plugins:i,rules:o}=e,a=toBooleanMap(e.envs,!0,"envs"),s=toBooleanMap(e.globals,!1,"globals");return void 0!==a||void 0!==s||void 0!==t&&0!==t.length||void 0!==r||void 0!==n||void 0!==i||void 0!==o?{env:a,globals:s,ignorePatterns:t,parser:r,parserOptions:n,plugins:i,rules:o}:null}function directoryExists(e){try{return fs.statSync(e).isDirectory()}catch(e){if(e&&("ENOENT"===e.code||"ENOTDIR"===e.code))return!1;throw e}}class CLIEngine{constructor(e,{preloadedPlugins:t}={}){const r=Object.assign(Object.create(null),defaultOptions,{cwd:process.cwd()},e);void 0===r.fix&&(r.fix=!1);const n=new Map;if(t)for(const[e,r]of Object.entries(t))n.set(e,r);const i=getCacheFile(r.cacheLocation||r.cacheFile,r.cwd),o=new CascadingConfigArrayFactory({additionalPluginPool:n,baseConfig:r.baseConfig||null,cliConfig:createConfigDataFromOptions(r),cwd:r.cwd,ignorePath:r.ignorePath,resolvePluginsRelativeTo:r.resolvePluginsRelativeTo,rulePaths:r.rulePaths,specificConfigPath:r.configFile,useEslintrc:r.useEslintrc,builtInRules:builtInRules,loadRules:loadRules,getEslintRecommendedConfig:()=>require("../../conf/eslint-recommended.js"),getEslintAllConfig:()=>require("../../conf/eslint-all.js")}),a=new FileEnumerator({configArrayFactory:o,cwd:r.cwd,extensions:r.extensions,globInputPaths:r.globInputPaths,errorOnUnmatchedPattern:r.errorOnUnmatchedPattern,ignore:r.ignore}),s=r.cache?new LintResultCache(i,r.cacheStrategy):null,l=new Linter({cwd:r.cwd}),u=[o.getConfigArrayForFile()];if(internalSlotsMap.set(this,{additionalPluginPool:n,cacheFilePath:i,configArrayFactory:o,defaultIgnores:IgnorePattern.createDefaultIgnore(r.cwd),fileEnumerator:a,lastConfigArrays:u,lintResultCache:s,linter:l,options:r}),r.fix&&r.fixTypes&&r.fixTypes.length>0){debug(`Using fix types ${r.fixTypes}`),validateFixTypes(r.fixTypes);const e=new Set(r.fixTypes),t="function"==typeof r.fix?r.fix:()=>!0;r.fix=r=>shouldMessageBeFixed(r,u,e)&&t(r)}}getRules(){const{lastConfigArrays:e}=internalSlotsMap.get(this);return new Map(function*(){yield*builtInRules;for(const t of e)yield*t.pluginRules}())}static getErrorResults(e){const t=[];return e.forEach((e=>{const r=e.messages.filter(isErrorMessage),n=e.suppressedMessages.filter(isErrorMessage);r.length>0&&t.push({...e,messages:r,suppressedMessages:n,errorCount:r.length,warningCount:0,fixableErrorCount:e.fixableErrorCount,fixableWarningCount:0})})),t}static outputFixes(e){e.results.filter((e=>Object.prototype.hasOwnProperty.call(e,"output"))).forEach((e=>{fs.writeFileSync(e.filePath,e.output)}))}resolveFileGlobPatterns(e){const{options:t}=internalSlotsMap.get(this);if(!1===t.globInputPaths)return e.filter(Boolean);const r=`/**/*.{${(t.extensions||[".js"]).map((e=>e.replace(/^\./u,""))).join(",")}}`;return e.filter(Boolean).map((e=>{const n=directoryExists(path.resolve(t.cwd,e))?e.replace(/[/\\]$/u,"")+r:e;return path.normalize(n).replace(/\\/gu,"/")}))}executeOnFiles(e){const{cacheFilePath:t,fileEnumerator:r,lastConfigArrays:n,lintResultCache:i,linter:o,options:{allowInlineConfig:a,cache:s,cwd:l,fix:u,reportUnusedDisableDirectives:c}}=internalSlotsMap.get(this),g=[],f=Date.now();if(n.length=0,!s)try{fs.unlinkSync(t)}catch(e){const r=e&&e.code;if("ENOENT"!==r&&("EROFS"!==r||fs.existsSync(t)))throw e}for(const{config:t,filePath:s,ignored:f}of r.iterateFiles(e)){if(f){g.push(createIgnoreResult(s,l));continue}if(n.includes(t)||n.push(t),i){const e=i.getCachedLintResults(s,t);if(e){if(!(e.messages&&e.messages.length>0)||!u){debug(`Skipping file since it hasn't changed: ${s}`),g.push(e);continue}debug(`Reprocessing cached file to allow autofix: ${s}`)}}const e=verifyText({text:fs.readFileSync(s,"utf8"),filePath:s,config:t,cwd:l,fix:u,allowInlineConfig:a,reportUnusedDisableDirectives:c,fileEnumerator:r,linter:o});g.push(e),i&&i.setCachedLintResults(s,t,e)}let p;return i&&i.reconcile(),debug(`Linting complete in: ${Date.now()-f}ms`),{results:g,...calculateStatsPerRun(g),get usedDeprecatedRules(){return p||(p=Array.from(iterateRuleDeprecationWarnings(n))),p}}}executeOnText(e,t,r){const{configArrayFactory:n,fileEnumerator:i,lastConfigArrays:o,linter:a,options:{allowInlineConfig:s,cwd:l,fix:u,reportUnusedDisableDirectives:c}}=internalSlotsMap.get(this),g=[],f=Date.now(),p=t&&path.resolve(l,t);if(o.length=0,p&&this.isPathIgnored(p))r&&g.push(createIgnoreResult(p,l));else{const t=n.getConfigArrayForFile(p||"__placeholder__.js");o.push(t),g.push(verifyText({text:e,filePath:p,config:t,cwd:l,fix:u,allowInlineConfig:s,reportUnusedDisableDirectives:c,fileEnumerator:i,linter:a}))}let d;return debug(`Linting complete in: ${Date.now()-f}ms`),{results:g,...calculateStatsPerRun(g),get usedDeprecatedRules(){return d||(d=Array.from(iterateRuleDeprecationWarnings(o))),d}}}getConfigForFile(e){const{configArrayFactory:t,options:r}=internalSlotsMap.get(this),n=path.resolve(r.cwd,e);if(directoryExists(n))throw Object.assign(new Error("'filePath' should not be a directory path."),{messageTemplate:"print-config-with-directory-path"});return t.getConfigArrayForFile(n).extractConfig(n).toCompatibleObjectAsConfigFileContent()}isPathIgnored(e){const{configArrayFactory:t,defaultIgnores:r,options:{cwd:n,ignore:i}}=internalSlotsMap.get(this),o=path.resolve(n,e);if(i){return(t.getConfigArrayForFile(o).extractConfig(o).ignores||r)(o)}return r(o)}getFormatter(e){const t=e||"stylish";if("string"!=typeof t)return null;{const r=t.replace(/\\/gu,"/"),n=internalSlotsMap.get(this),i=n?n.options.cwd:process.cwd();let o;if(!naming.getNamespaceFromTerm(r)&&r.indexOf("/")>-1)o=path.resolve(i,r);else try{const e=naming.normalizePackageName(r,"eslint-formatter");o=ModuleResolver.resolve(e,path.join(i,"__placeholder__.js"))}catch{o=path.resolve(__dirname,"formatters",r)}try{return require(o)}catch(t){throw t.message="table"===e||"codeframe"===e?`The ${e} formatter is no longer part of core ESLint. Install it manually with \`npm install -D eslint-formatter-${e}\``:`There was a problem loading formatter: ${o}\nError: ${t.message}`,t}}}}CLIEngine.version=pkg.version,CLIEngine.getFormatter=CLIEngine.prototype.getFormatter,module.exports={CLIEngine:CLIEngine,getCLIEngineInternalSlots:e=>internalSlotsMap.get(e)};
//# sourceMappingURL=/sm/53c6bdb94aca843170b2bcd965141bcd4298024109f63b414675e433c1431646.map