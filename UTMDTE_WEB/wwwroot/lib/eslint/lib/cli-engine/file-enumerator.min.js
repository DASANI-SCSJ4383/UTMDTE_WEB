/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/cli-engine/file-enumerator.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const fs=require("fs"),path=require("path"),getGlobParent=require("glob-parent"),isGlob=require("is-glob"),escapeRegExp=require("escape-string-regexp"),{Minimatch:Minimatch}=require("minimatch"),{Legacy:{IgnorePattern:IgnorePattern,CascadingConfigArrayFactory:CascadingConfigArrayFactory}}=require("@eslint/eslintrc"),debug=require("debug")("eslint:file-enumerator"),minimatchOpts={dot:!0,matchBase:!0},dotfilesPattern=/(?:(?:^\.)|(?:[/\\]\.))[^/\\.].*/u,NONE=0,IGNORED_SILENTLY=1,IGNORED=2,internalSlotsMap=new WeakMap;function isGlobPattern(e){return isGlob("\\"===path.sep?e.replace(/\\/gu,"/"):e)}function statSafeSync(e){try{return fs.statSync(e)}catch(e){if("ENOENT"!==e.code)throw e;return null}}function readdirSafeSync(e){try{return fs.readdirSync(e,{withFileTypes:!0})}catch(e){if("ENOENT"!==e.code)throw e;return[]}}function createExtensionRegExp(e){if(e){const t=e.map((e=>escapeRegExp(e.startsWith(".")?e.slice(1):e)));return new RegExp(`.\\.(?:${t.join("|")})$`,"u")}return null}class NoFilesFoundError extends Error{constructor(e,t){super(`No files matching '${e}' were found${t?" (glob was disabled)":""}.`),this.messageTemplate="file-not-found",this.messageData={pattern:e,globDisabled:t}}}class AllFilesIgnoredError extends Error{constructor(e){super(`All files matched by '${e}' are ignored.`),this.messageTemplate="all-files-ignored",this.messageData={pattern:e}}}class FileEnumerator{constructor({cwd:e=process.cwd(),configArrayFactory:t=new CascadingConfigArrayFactory({cwd:e,getEslintRecommendedConfig:()=>require("../../conf/eslint-recommended.js"),getEslintAllConfig:()=>require("../../conf/eslint-all.js")}),extensions:r=null,globInputPaths:i=!0,errorOnUnmatchedPattern:n=!0,ignore:o=!0}={}){internalSlotsMap.set(this,{configArrayFactory:t,cwd:e,defaultIgnores:IgnorePattern.createDefaultIgnore(e),extensionRegExp:createExtensionRegExp(r),globInputPaths:i,errorOnUnmatchedPattern:n,ignoreFlag:o})}isTargetPath(e,t){const{configArrayFactory:r,extensionRegExp:i}=internalSlotsMap.get(this);if(i)return i.test(e);if(e.endsWith(".js"))return!0;return(t||r.getConfigArrayForFile(e,{ignoreNotFoundError:!0})).isAdditionalTargetPath(e)}*iterateFiles(e){const{globInputPaths:t,errorOnUnmatchedPattern:r}=internalSlotsMap.get(this),i=Array.isArray(e)?e:[e];debug("Start to iterate files: %o",i);const n=new Set;for(const e of i){let i=!1,o=!1;if(e){for(const{config:t,filePath:r,flag:s}of this._iterateFiles(e))i=!0,1!==s&&(o=!0,n.has(r)||(n.add(r),yield{config:t,filePath:r,ignored:2===s}));if(r){if(!i)throw new NoFilesFoundError(e,!t&&isGlob(e));if(!o)throw new AllFilesIgnoredError(e)}}}debug(`Complete iterating files: ${JSON.stringify(i)}`)}_iterateFiles(e){const{cwd:t,globInputPaths:r}=internalSlotsMap.get(this),i=path.resolve(t,e),n=dotfilesPattern.test(e),o=statSafeSync(i);return o&&o.isDirectory()?this._iterateFilesWithDirectory(i,n):o&&o.isFile()?this._iterateFilesWithFile(i):r&&isGlobPattern(e)?this._iterateFilesWithGlob(i,n):[]}_iterateFilesWithFile(e){debug(`File: ${e}`);const{configArrayFactory:t}=internalSlotsMap.get(this),r=t.getConfigArrayForFile(e);return[{config:r,filePath:e,flag:this._isIgnoredFile(e,{config:r,direct:!0})?2:0}]}_iterateFilesWithDirectory(e,t){return debug(`Directory: ${e}`),this._iterateFilesRecursive(e,{dotfiles:t,recursive:!0,selector:null})}_iterateFilesWithGlob(e,t){debug(`Glob: ${e}`);const r=path.resolve(getGlobParent(e)),i=e.slice(r.length+1),n=/\*\*|\/|\\/u.test(i),o=new Minimatch(e,minimatchOpts);return debug(`recursive? ${n}`),this._iterateFilesRecursive(r,{dotfiles:t,recursive:n,selector:o})}*_iterateFilesRecursive(e,t){debug(`Enter the directory: ${e}`);const{configArrayFactory:r}=internalSlotsMap.get(this);let i=null;for(const n of readdirSafeSync(e)){const o=path.join(e,n.name),s=n.isSymbolicLink()?statSafeSync(o):n;if(s)if(s.isFile()){i||(i=r.getConfigArrayForFile(o,{ignoreNotFoundError:!0}));if(t.selector?t.selector.match(o):this.isTargetPath(o,i)){const e=this._isIgnoredFile(o,{...t,config:i}),s=e?1:0;debug(`Yield: ${n.name}${e?" but ignored":""}`),yield{config:r.getConfigArrayForFile(o),filePath:o,flag:s}}else debug(`Didn't match: ${n.name}`)}else if(t.recursive&&s.isDirectory()){i||(i=r.getConfigArrayForFile(o,{ignoreNotFoundError:!0}));this._isIgnoredFile(o+path.sep,{...t,config:i})||(yield*this._iterateFilesRecursive(o,t))}}debug(`Leave the directory: ${e}`)}_isIgnoredFile(e,{config:t,dotfiles:r=!1,direct:i=!1}){const{configArrayFactory:n,defaultIgnores:o,ignoreFlag:s}=internalSlotsMap.get(this);if(s){return((t||n.getConfigArrayForFile(e,{ignoreNotFoundError:!0})).extractConfig(e).ignores||o)(e,r)}return!i&&o(e,r)}}module.exports={FileEnumerator:FileEnumerator};
//# sourceMappingURL=/sm/aa7e47647b52dcebf7202faa23d303a8799e70765cc017d51e44c5770e05145a.map