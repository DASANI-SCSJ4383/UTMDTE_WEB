/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/linter/report-translator.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const assert=require("assert"),ruleFixer=require("./rule-fixer"),interpolate=require("./interpolate");function normalizeMultiArgReportCall(...e){return 1===e.length?Object.assign({},e[0]):"string"==typeof e[1]?{node:e[0],message:e[1],data:e[2],fix:e[3]}:{node:e[0],loc:e[1],message:e[2],data:e[3],fix:e[4]}}function assertValidNodeInfo(e){e.node?assert("object"==typeof e.node,"Node must be an object"):assert(e.loc,"Node must be provided when reporting error if location is not provided")}function normalizeReportLoc(e){return e.loc?e.loc.start?e.loc:{start:e.loc,end:null}:e.node.loc}function assertValidFix(e){e&&assert(e.range&&"number"==typeof e.range[0]&&"number"==typeof e.range[1],`Fix has invalid range: ${JSON.stringify(e,null,2)}`)}function compareFixesByRange(e,t){return e.range[0]-t.range[0]||e.range[1]-t.range[1]}function mergeFixes(e,t){for(const t of e)assertValidFix(t);if(0===e.length)return null;if(1===e.length)return e[0];e.sort(compareFixesByRange);const s=t.text,r=e[0].range[0],n=e[e.length-1].range[1];let o="",a=Number.MIN_SAFE_INTEGER;for(const t of e)assert(t.range[0]>=a,"Fix objects must not be overlapped in a report."),t.range[0]>=0&&(o+=s.slice(Math.max(0,r,a),t.range[0])),o+=t.text,a=t.range[1];return o+=s.slice(Math.max(0,r,a),n),{range:[r,n],text:o}}function normalizeFixes(e,t){if("function"!=typeof e.fix)return null;const s=e.fix(ruleFixer);return s&&Symbol.iterator in s?mergeFixes(Array.from(s),t):(assertValidFix(s),s)}function mapSuggestions(e,t,s){return e.suggest&&Array.isArray(e.suggest)?e.suggest.map((e=>{const r=e.desc||s[e.messageId];return{...e,desc:interpolate(r,e.data),fix:normalizeFixes(e,t)}})).filter((({fix:e})=>e)):[]}function createProblem(e){const t={ruleId:e.ruleId,severity:e.severity,message:e.message,line:e.loc.start.line,column:e.loc.start.column+1,nodeType:e.node&&e.node.type||null};return e.messageId&&(t.messageId=e.messageId),e.loc.end&&(t.endLine=e.loc.end.line,t.endColumn=e.loc.end.column+1),e.fix&&(t.fix=e.fix),e.suggestions&&e.suggestions.length>0&&(t.suggestions=e.suggestions),t}function validateSuggestions(e,t){e&&Array.isArray(e)&&e.forEach((e=>{if(e.messageId){const{messageId:s}=e;if(!t)throw new TypeError(`context.report() called with a suggest option with a messageId '${s}', but no messages were present in the rule metadata.`);if(!t[s])throw new TypeError(`context.report() called with a suggest option with a messageId '${s}' which is not present in the 'messages' config: ${JSON.stringify(t,null,2)}`);if(e.desc)throw new TypeError("context.report() called with a suggest option that defines both a 'messageId' and an 'desc'. Please only pass one.")}else if(!e.desc)throw new TypeError("context.report() called with a suggest option that doesn't have either a `desc` or `messageId`");if("function"!=typeof e.fix)throw new TypeError(`context.report() called with a suggest option without a fix function. See: ${e}`)}))}module.exports=function(e){return(...t)=>{const s=normalizeMultiArgReportCall(...t),r=e.messageIds;let n;if(assertValidNodeInfo(s),s.messageId){if(!r)throw new TypeError("context.report() called with a messageId, but no messages were present in the rule metadata.");const e=s.messageId;if(s.message)throw new TypeError("context.report() called with a message and a messageId. Please only pass one.");if(!r||!Object.prototype.hasOwnProperty.call(r,e))throw new TypeError(`context.report() called with a messageId of '${e}' which is not present in the 'messages' config: ${JSON.stringify(r,null,2)}`);n=r[e]}else{if(!s.message)throw new TypeError("Missing `message` property in report() call; add a message that describes the linting problem.");n=s.message}return validateSuggestions(s.suggest,r),createProblem({ruleId:e.ruleId,severity:e.severity,node:s.node,message:interpolate(n,s.data),messageId:s.messageId,loc:normalizeReportLoc(s),fix:e.disableFixes?null:normalizeFixes(s,e.sourceCode),suggestions:e.disableFixes?[]:mapSuggestions(s,e.sourceCode,r)})}};
//# sourceMappingURL=/sm/b3117b23f1df1e87d448e50a4724e8fffe04617ffe13bfd9d81e40083908513a.map