/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/linter/code-path-analysis/code-path-analyzer.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const assert=require("assert"),{breakableTypePattern:breakableTypePattern}=require("../../shared/ast-utils"),CodePath=require("./code-path"),CodePathSegment=require("./code-path-segment"),IdGenerator=require("./id-generator"),debug=require("./debug-helpers");function isCaseNode(e){return Boolean(e.test)}function isPropertyDefinitionValue(e){const t=e.parent;return t&&"PropertyDefinition"===t.type&&t.value===e}function isHandledLogicalOperator(e){return"&&"===e||"||"===e||"??"===e}function isLogicalAssignmentOperator(e){return"&&="===e||"||="===e||"??="===e}function getLabel(e){return"LabeledStatement"===e.parent.type?e.parent.label.name:null}function isForkingByTrueOrFalse(e){const t=e.parent;switch(t.type){case"ConditionalExpression":case"IfStatement":case"WhileStatement":case"DoWhileStatement":case"ForStatement":return t.test===e;case"LogicalExpression":return isHandledLogicalOperator(t.operator);case"AssignmentExpression":return isLogicalAssignmentOperator(t.operator);default:return!1}}function getBooleanValueIfSimpleConstant(e){if("Literal"===e.type)return Boolean(e.value)}function isIdentifierReference(e){const t=e.parent;switch(t.type){case"LabeledStatement":case"BreakStatement":case"ContinueStatement":case"ArrayPattern":case"RestElement":case"ImportSpecifier":case"ImportDefaultSpecifier":case"ImportNamespaceSpecifier":case"CatchClause":return!1;case"FunctionDeclaration":case"FunctionExpression":case"ArrowFunctionExpression":case"ClassDeclaration":case"ClassExpression":case"VariableDeclarator":return t.id!==e;case"Property":case"PropertyDefinition":case"MethodDefinition":return t.key!==e||t.computed||t.shorthand;case"AssignmentPattern":return t.key!==e;default:return!0}}function forwardCurrentToHead(e,t){const a=e.codePath,o=CodePath.getState(a),r=o.currentSegments,n=o.headSegments,s=Math.max(r.length,n.length);let i,c,l;for(i=0;i<s;++i)c=r[i],l=n[i],c!==l&&c&&(debug.dump(`onCodePathSegmentEnd ${c.id}`),c.reachable&&e.emitter.emit("onCodePathSegmentEnd",c,t));for(o.currentSegments=n,i=0;i<s;++i)c=r[i],l=n[i],c!==l&&l&&(debug.dump(`onCodePathSegmentStart ${l.id}`),CodePathSegment.markUsed(l),l.reachable&&e.emitter.emit("onCodePathSegmentStart",l,t))}function leaveFromCurrentSegment(e,t){const a=CodePath.getState(e.codePath),o=a.currentSegments;for(let a=0;a<o.length;++a){const r=o[a];debug.dump(`onCodePathSegmentEnd ${r.id}`),r.reachable&&e.emitter.emit("onCodePathSegmentEnd",r,t)}a.currentSegments=[]}function preprocess(e,t){const a=e.codePath,o=CodePath.getState(a),r=t.parent;switch(r.type){case"CallExpression":!0===r.optional&&r.arguments.length>=1&&r.arguments[0]===t&&o.makeOptionalRight();break;case"MemberExpression":!0===r.optional&&r.property===t&&o.makeOptionalRight();break;case"LogicalExpression":r.right===t&&isHandledLogicalOperator(r.operator)&&o.makeLogicalRight();break;case"AssignmentExpression":r.right===t&&isLogicalAssignmentOperator(r.operator)&&o.makeLogicalRight();break;case"ConditionalExpression":case"IfStatement":r.consequent===t?o.makeIfConsequent():r.alternate===t&&o.makeIfAlternate();break;case"SwitchCase":r.consequent[0]===t&&o.makeSwitchCaseBody(!1,!r.test);break;case"TryStatement":r.handler===t?o.makeCatchBlock():r.finalizer===t&&o.makeFinallyBlock();break;case"WhileStatement":r.test===t?o.makeWhileTest(getBooleanValueIfSimpleConstant(t)):(assert(r.body===t),o.makeWhileBody());break;case"DoWhileStatement":r.body===t?o.makeDoWhileBody():(assert(r.test===t),o.makeDoWhileTest(getBooleanValueIfSimpleConstant(t)));break;case"ForStatement":r.test===t?o.makeForTest(getBooleanValueIfSimpleConstant(t)):r.update===t?o.makeForUpdate():r.body===t&&o.makeForBody();break;case"ForInStatement":case"ForOfStatement":r.left===t?o.makeForInOfLeft():r.right===t?o.makeForInOfRight():(assert(r.body===t),o.makeForInOfBody());break;case"AssignmentPattern":r.right===t&&(o.pushForkContext(),o.forkBypassPath(),o.forkPath())}}function processCodePathToEnter(e,t){let a=e.codePath,o=a&&CodePath.getState(a);const r=t.parent;function n(r){a&&(forwardCurrentToHead(e,t),debug.dumpState(t,o,!1)),a=e.codePath=new CodePath({id:e.idGenerator.next(),origin:r,upper:a,onLooped:e.onLooped}),o=CodePath.getState(a),debug.dump(`onCodePathStart ${a.id}`),e.emitter.emit("onCodePathStart",a,t)}switch(isPropertyDefinitionValue(t)&&n("class-field-initializer"),t.type){case"Program":n("program");break;case"FunctionDeclaration":case"FunctionExpression":case"ArrowFunctionExpression":n("function");break;case"StaticBlock":n("class-static-block");break;case"ChainExpression":o.pushChainContext();break;case"CallExpression":case"MemberExpression":!0===t.optional&&o.makeOptionalNode();break;case"LogicalExpression":isHandledLogicalOperator(t.operator)&&o.pushChoiceContext(t.operator,isForkingByTrueOrFalse(t));break;case"AssignmentExpression":isLogicalAssignmentOperator(t.operator)&&o.pushChoiceContext(t.operator.slice(0,-1),isForkingByTrueOrFalse(t));break;case"ConditionalExpression":case"IfStatement":o.pushChoiceContext("test",!1);break;case"SwitchStatement":o.pushSwitchContext(t.cases.some(isCaseNode),getLabel(t));break;case"TryStatement":o.pushTryContext(Boolean(t.finalizer));break;case"SwitchCase":r.discriminant!==t&&r.cases[0]!==t&&o.forkPath();break;case"WhileStatement":case"DoWhileStatement":case"ForStatement":case"ForInStatement":case"ForOfStatement":o.pushLoopContext(t.type,getLabel(t));break;case"LabeledStatement":breakableTypePattern.test(t.body.type)||o.pushBreakContext(!1,t.label.name)}forwardCurrentToHead(e,t),debug.dumpState(t,o,!1)}function processCodePathToExit(e,t){const a=e.codePath,o=CodePath.getState(a);let r=!1;switch(t.type){case"ChainExpression":o.popChainContext();break;case"IfStatement":case"ConditionalExpression":o.popChoiceContext();break;case"LogicalExpression":isHandledLogicalOperator(t.operator)&&o.popChoiceContext();break;case"AssignmentExpression":isLogicalAssignmentOperator(t.operator)&&o.popChoiceContext();break;case"SwitchStatement":o.popSwitchContext();break;case"SwitchCase":0===t.consequent.length&&o.makeSwitchCaseBody(!0,!t.test),o.forkContext.reachable&&(r=!0);break;case"TryStatement":o.popTryContext();break;case"BreakStatement":forwardCurrentToHead(e,t),o.makeBreak(t.label&&t.label.name),r=!0;break;case"ContinueStatement":forwardCurrentToHead(e,t),o.makeContinue(t.label&&t.label.name),r=!0;break;case"ReturnStatement":forwardCurrentToHead(e,t),o.makeReturn(),r=!0;break;case"ThrowStatement":forwardCurrentToHead(e,t),o.makeThrow(),r=!0;break;case"Identifier":isIdentifierReference(t)&&(o.makeFirstThrowablePathInTryBlock(),r=!0);break;case"CallExpression":case"ImportExpression":case"MemberExpression":case"NewExpression":case"YieldExpression":o.makeFirstThrowablePathInTryBlock();break;case"WhileStatement":case"DoWhileStatement":case"ForStatement":case"ForInStatement":case"ForOfStatement":o.popLoopContext();break;case"AssignmentPattern":o.popForkContext();break;case"LabeledStatement":breakableTypePattern.test(t.body.type)||o.popBreakContext()}r||forwardCurrentToHead(e,t),debug.dumpState(t,o,!0)}function postprocess(e,t){function a(){let a=e.codePath;CodePath.getState(a).makeFinal(),leaveFromCurrentSegment(e,t),debug.dump(`onCodePathEnd ${a.id}`),e.emitter.emit("onCodePathEnd",a,t),debug.dumpDot(a),a=e.codePath=e.codePath.upper,a&&debug.dumpState(t,CodePath.getState(a),!0)}switch(t.type){case"Program":case"FunctionDeclaration":case"FunctionExpression":case"ArrowFunctionExpression":case"StaticBlock":a();break;case"CallExpression":!0===t.optional&&0===t.arguments.length&&CodePath.getState(e.codePath).makeOptionalRight()}isPropertyDefinitionValue(t)&&a()}class CodePathAnalyzer{constructor(e){this.original=e,this.emitter=e.emitter,this.codePath=null,this.idGenerator=new IdGenerator("s"),this.currentNode=null,this.onLooped=this.onLooped.bind(this)}enterNode(e){this.currentNode=e,e.parent&&preprocess(this,e),processCodePathToEnter(this,e),this.original.enterNode(e),this.currentNode=null}leaveNode(e){this.currentNode=e,processCodePathToExit(this,e),this.original.leaveNode(e),postprocess(this,e),this.currentNode=null}onLooped(e,t){e.reachable&&t.reachable&&(debug.dump(`onCodePathSegmentLoop ${e.id} -> ${t.id}`),this.emitter.emit("onCodePathSegmentLoop",e,t,this.currentNode))}}module.exports=CodePathAnalyzer;
//# sourceMappingURL=/sm/de8ef30bb9bded6f6471505f4f1323dd317769a0f49fa3aadc6042c3eaa88da8.map