/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/linter/linter.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const path=require("path"),eslintScope=require("eslint-scope"),evk=require("eslint-visitor-keys"),espree=require("espree"),merge=require("lodash.merge"),pkg=require("../../package.json"),astUtils=require("../shared/ast-utils"),{Legacy:{ConfigOps:ConfigOps,ConfigValidator:ConfigValidator,environments:BuiltInEnvironments}}=require("@eslint/eslintrc/universal"),Traverser=require("../shared/traverser"),{SourceCode:SourceCode}=require("../source-code"),CodePathAnalyzer=require("./code-path-analysis/code-path-analyzer"),applyDisableDirectives=require("./apply-disable-directives"),ConfigCommentParser=require("./config-comment-parser"),NodeEventGenerator=require("./node-event-generator"),createReportTranslator=require("./report-translator"),Rules=require("./rules"),createEmitter=require("./safe-emitter"),SourceCodeFixer=require("./source-code-fixer"),timing=require("./timing"),ruleReplacements=require("../../conf/replacements.json"),{getRuleFromConfig:getRuleFromConfig}=require("../config/flat-config-helpers"),{FlatConfigArray:FlatConfigArray}=require("../config/flat-config-array"),debug=require("debug")("eslint:linter"),MAX_AUTOFIX_PASSES=10,DEFAULT_PARSER_NAME="espree",DEFAULT_ECMA_VERSION=5,commentParser=new ConfigCommentParser,DEFAULT_ERROR_LOC={start:{line:1,column:0},end:{line:1,column:1}},parserSymbol=Symbol.for("eslint.RuleTester.parser"),globals=require("../../conf/globals");function isEspree(e){return!(e!==espree&&e[parserSymbol]!==espree)}function getGlobalsForEcmaVersion(e){switch(e){case 3:return globals.es3;case 5:return globals.es5;default:return e<2015?globals[`es${e+2009}`]:globals[`es${e}`]}}function addDeclaredGlobals(e,s,{exportedVariables:t,enabledGlobals:r}){for(const t of new Set([...Object.keys(s),...Object.keys(r)])){const n=void 0===s[t]?void 0:ConfigOps.normalizeConfigGlobal(s[t]),i=r[t]&&r[t].value||n,o=r[t]&&r[t].comments;if("off"===i)continue;let a=e.set.get(t);a||(a=new eslintScope.Variable(t,e),e.variables.push(a),e.set.set(t,a)),a.eslintImplicitGlobalSetting=n,a.eslintExplicitGlobal=void 0!==o,a.eslintExplicitGlobalComments=o,a.writeable="writable"===i}Object.keys(t).forEach((s=>{const t=e.set.get(s);t&&(t.eslintUsed=!0)})),e.through=e.through.filter((s=>{const t=s.identifier.name,r=e.set.get(t);return!r||(s.resolved=r,r.references.push(s),!1)}))}function createMissingRuleMessage(e){return Object.prototype.hasOwnProperty.call(ruleReplacements.rules,e)?`Rule '${e}' was removed and replaced by: ${ruleReplacements.rules[e].join(", ")}`:`Definition for rule '${e}' was not found.`}function createLintingProblem(e){const{ruleId:s=null,loc:t=DEFAULT_ERROR_LOC,message:r=createMissingRuleMessage(e.ruleId),severity:n=2}=e;return{ruleId:s,message:r,line:t.start.line,column:t.start.column+1,endLine:t.end.line,endColumn:t.end.column+1,severity:n,nodeType:null}}function createDisableDirectives(e){const{commentToken:s,type:t,value:r,justification:n,ruleMapper:i}=e,o=Object.keys(commentParser.parseListConfig(r)),a=o.length?o:[null],l={directives:[],directiveProblems:[]},c={commentToken:s,ruleIds:o};for(const e of a)null===e||i(e)?"disable-next-line"===t?l.directives.push({parentComment:c,type:t,line:s.loc.end.line,column:s.loc.end.column+1,ruleId:e,justification:n}):l.directives.push({parentComment:c,type:t,line:s.loc.start.line,column:s.loc.start.column+1,ruleId:e,justification:n}):l.directiveProblems.push(createLintingProblem({ruleId:e,loc:s.loc}));return l}function extractDirectiveComment(e){const s=/\s-{2,}\s/u.exec(e);if(!s)return{directivePart:e.trim(),justificationPart:""};return{directivePart:e.slice(0,s.index).trim(),justificationPart:e.slice(s.index+s[0].length).trim()}}function getDirectiveComments(e,s,t){const r={},n=Object.create(null),i={},o=[],a=[],l=new ConfigValidator({builtInRules:Rules});return e.comments.filter((e=>"Shebang"!==e.type)).forEach((e=>{const{directivePart:c,justificationPart:u}=extractDirectiveComment(e.value),p=/^(eslint(?:-env|-enable|-disable(?:(?:-next)?-line)?)?|exported|globals?)(?:\s|$)/u.exec(c);if(!p)return;const g=p[1],f=/^eslint-disable-(next-)?line$/u.test(g);if("Line"===e.type&&!f)return;if(t){const s="Block"===e.type?`/*${g}*/`:`//${g}`;return void o.push(createLintingProblem({ruleId:null,message:`'${s}' has no effect because you have 'noInlineConfig' setting in ${t}.`,loc:e.loc,severity:1}))}if("eslint-disable-line"===g&&e.loc.start.line!==e.loc.end.line){const s=`${g} comment should not span multiple lines.`;return void o.push(createLintingProblem({ruleId:null,message:s,loc:e.loc}))}const d=c.slice(p.index+g.length);switch(g){case"eslint-disable":case"eslint-enable":case"eslint-disable-next-line":case"eslint-disable-line":{const t=g.slice("eslint-".length),r={commentToken:e,type:t,value:d,justification:u,ruleMapper:s},{directives:n,directiveProblems:i}=createDisableDirectives(r);a.push(...n),o.push(...i);break}case"exported":Object.assign(i,commentParser.parseStringConfig(d,e));break;case"globals":case"global":for(const[s,{value:t}]of Object.entries(commentParser.parseStringConfig(d,e))){let r;try{r=ConfigOps.normalizeConfigGlobal(t)}catch(s){o.push(createLintingProblem({ruleId:null,loc:e.loc,message:s.message}));continue}n[s]?(n[s].comments.push(e),n[s].value=r):n[s]={comments:[e],value:r}}break;case"eslint":{const t=commentParser.parseJsonConfig(d,e.loc);t.success?Object.keys(t.config).forEach((n=>{const i=s(n),a=t.config[n];if(i){try{l.validateRuleOptions(i,n,a)}catch(s){return void o.push(createLintingProblem({ruleId:n,message:s.message,loc:e.loc}))}r[n]=a}else o.push(createLintingProblem({ruleId:n,loc:e.loc}))})):o.push(t.error);break}}})),{configuredRules:r,enabledGlobals:n,exportedVariables:i,problems:o,disableDirectives:a}}function normalizeEcmaVersion(e,s){return isEspree(e)&&"latest"===s?espree.latestEcmaVersion:s>=2015?s-2009:s}function normalizeEcmaVersionForLanguageOptions(e){switch(e){case 3:return 3;case 5:case void 0:return 5;default:if("number"==typeof e)return e>=2015?e:e+2009}return espree.latestEcmaVersion+2009}const eslintEnvPattern=/\/\*\s*eslint-env\s(.+?)(?:\*\/|$)/gus;function findEslintEnv(e){let s,t;for(eslintEnvPattern.lastIndex=0;null!==(s=eslintEnvPattern.exec(e));)s[0].endsWith("*/")&&(t=Object.assign(t||{},commentParser.parseListConfig(extractDirectiveComment(s[1]).directivePart)));return t}function normalizeFilename(e){const s=e.split(path.sep),t=s.lastIndexOf("<text>");return-1===t?e:s.slice(t).join(path.sep)}function normalizeVerifyOptions(e,s){const t=s.linterOptions||s,r=!0===t.noInlineConfig,n=!1===e.allowInlineConfig,i=s.configNameOfNoInlineConfig?` (${s.configNameOfNoInlineConfig})`:"";let o=e.reportUnusedDisableDirectives;return"boolean"==typeof o&&(o=o?"error":"off"),"string"!=typeof o&&(o=t.reportUnusedDisableDirectives?"warn":"off"),{filename:normalizeFilename(e.filename||"<input>"),allowInlineConfig:!n,warnInlineConfig:r&&!n?`your config${i}`:null,reportUnusedDisableDirectives:o,disableFixes:Boolean(e.disableFixes)}}function resolveParserOptions(e,s,t){const r=t.filter((e=>e.parserOptions)).reduce(((e,s)=>merge(e,s.parserOptions)),{}),n=merge(r,s||{});return"module"===n.sourceType&&(n.ecmaFeatures=Object.assign({},n.ecmaFeatures,{globalReturn:!1})),n.ecmaVersion=normalizeEcmaVersion(e,n.ecmaVersion),n}function createLanguageOptions({globals:e,parser:s,parserOptions:t}){const{ecmaVersion:r,sourceType:n}=t;return{globals:e,ecmaVersion:normalizeEcmaVersionForLanguageOptions(r),sourceType:n,parser:s,parserOptions:t}}function resolveGlobals(e,s){return Object.assign({},...s.filter((e=>e.globals)).map((e=>e.globals)),e)}function stripUnicodeBOM(e){return 65279===e.charCodeAt(0)?e.slice(1):e}function getRuleOptions(e){return Array.isArray(e)?e.slice(1):[]}function analyzeScope(e,s,t){const r=s.parserOptions.ecmaFeatures||{},n=s.ecmaVersion||5;return eslintScope.analyze(e,{ignoreEval:!0,nodejsScope:r.globalReturn,impliedStrict:r.impliedStrict,ecmaVersion:"number"==typeof n?n:6,sourceType:s.sourceType||"script",childVisitorKeys:t||evk.KEYS,fallback:Traverser.getKeys})}function parse(e,s,t){const r=stripUnicodeBOM(e).replace(astUtils.shebangPattern,((e,s)=>`//${s}`)),{ecmaVersion:n,sourceType:i,parser:o}=s,a=Object.assign({ecmaVersion:n,sourceType:i},s.parserOptions,{loc:!0,range:!0,raw:!0,tokens:!0,comment:!0,eslintVisitorKeys:!0,eslintScopeManager:!0,filePath:t});try{debug("Parsing:",t);const n="function"==typeof o.parseForESLint?o.parseForESLint(r,a):{ast:o.parse(r,a)};debug("Parsing successful:",t);const i=n.ast,l=n.services||{},c=n.visitorKeys||evk.KEYS;debug("Scope analysis:",t);const u=n.scopeManager||analyzeScope(i,s,c);return debug("Scope analysis successful:",t),{success:!0,sourceCode:new SourceCode({text:e,ast:i,parserServices:l,scopeManager:u,visitorKeys:c})}}catch(e){const s=`Parsing error: ${e.message.replace(/^line \d+:/iu,"").trim()}`;return debug("%s\n%s",s,e.stack),{success:!1,error:{ruleId:null,fatal:!0,severity:2,message:s,line:e.lineNumber,column:e.column}}}}function getScope(e,s){const t="Program"!==s.type;for(let r=s;r;r=r.parent){const s=e.acquire(r,t);if(s)return"function-expression-name"===s.type?s.childScopes[0]:s}return e.scopes[0]}function markVariableAsUsed(e,s,t,r){const n=t.parserOptions,i=t.sourceType,o=n.ecmaFeatures&&n.ecmaFeatures.globalReturn||"commonjs"===i||"module"===i,a=getScope(e,s);for(let e="global"===a.type&&o?a.childScopes[0]:a;e;e=e.upper){const s=e.variables.find((e=>e.name===r));if(s)return s.eslintUsed=!0,!0}return!1}function createRuleListeners(e,s){try{return e.create(s)}catch(e){throw e.message=`Error while loading rule '${s.id}': ${e.message}`,e}}function getAncestors(e){const s=[];for(let t=e.parent;t;t=t.parent)s.push(t);return s.reverse()}const DEPRECATED_SOURCECODE_PASSTHROUGHS={getSource:"getText",getSourceLines:"getLines",getAllComments:"getAllComments",getNodeByRangeIndex:"getNodeByRangeIndex",getComments:"getComments",getCommentsBefore:"getCommentsBefore",getCommentsAfter:"getCommentsAfter",getCommentsInside:"getCommentsInside",getJSDocComment:"getJSDocComment",getFirstToken:"getFirstToken",getFirstTokens:"getFirstTokens",getLastToken:"getLastToken",getLastTokens:"getLastTokens",getTokenAfter:"getTokenAfter",getTokenBefore:"getTokenBefore",getTokenByRangeStart:"getTokenByRangeStart",getTokens:"getTokens",getTokensAfter:"getTokensAfter",getTokensBefore:"getTokensBefore",getTokensBetween:"getTokensBetween"},BASE_TRAVERSAL_CONTEXT=Object.freeze(Object.keys(DEPRECATED_SOURCECODE_PASSTHROUGHS).reduce(((e,s)=>Object.assign(e,{[s](...e){return this.getSourceCode()[DEPRECATED_SOURCECODE_PASSTHROUGHS[s]](...e)}})),{}));function runRules(e,s,t,r,n,i,o,a,l,c){const u=createEmitter(),p=[];let g=e.ast;Traverser.traverse(e.ast,{enter(e,s){e.parent=s,p.push({isEntering:!0,node:e})},leave(e){p.push({isEntering:!1,node:e})},visitorKeys:e.visitorKeys});const f=Object.freeze(Object.assign(Object.create(BASE_TRAVERSAL_CONTEXT),{getAncestors:()=>getAncestors(g),getDeclaredVariables:e.scopeManager.getDeclaredVariables.bind(e.scopeManager),getCwd:()=>l,getFilename:()=>o,getPhysicalFilename:()=>c||o,getScope:()=>getScope(e.scopeManager,g),getSourceCode:()=>e,markVariableAsUsed:s=>markVariableAsUsed(e.scopeManager,g,n,s),parserOptions:{...n.parserOptions},parserPath:r,languageOptions:n,parserServices:e.parserServices,settings:i})),d=[];Object.keys(s).forEach((r=>{const n=ConfigOps.getRuleSeverity(s[r]);if(0===n)return;const i=t(r);if(!i)return void d.push(createLintingProblem({ruleId:r}));const o=i.meta&&i.meta.messages;let l=null;const c=Object.freeze(Object.assign(Object.create(f),{id:r,options:getRuleOptions(s[r]),report(...s){null===l&&(l=createReportTranslator({ruleId:r,severity:n,sourceCode:e,messageIds:o,disableFixes:a}));const t=l(...s);if(t.fix&&(!i.meta||!i.meta.fixable))throw new Error('Fixable rules must set the `meta.fixable` property to "code" or "whitespace".');if(t.suggestions&&(!i.meta||!0!==i.meta.hasSuggestions)){if(i.meta&&i.meta.docs&&void 0!==i.meta.docs.suggestion)throw new Error("Rules with suggestions must set the `meta.hasSuggestions` property to `true`. `meta.docs.suggestion` is ignored by ESLint.");throw new Error("Rules with suggestions must set the `meta.hasSuggestions` property to `true`.")}d.push(t)}})),p=createRuleListeners(i,c);Object.keys(p).forEach((e=>{const s=timing.enabled?timing.time(r,p[e]):p[e];u.on(e,function(e){return function(...s){try{return e(...s)}catch(e){throw e.ruleId=r,e}}}(s))}))}));const m="Program"===p[0].node.type?new CodePathAnalyzer(new NodeEventGenerator(u,{visitorKeys:e.visitorKeys,fallback:Traverser.getKeys})):new NodeEventGenerator(u,{visitorKeys:e.visitorKeys,fallback:Traverser.getKeys});return p.forEach((e=>{g=e.node;try{e.isEntering?m.enterNode(g):m.leaveNode(g)}catch(e){throw e.currentNode=g,e}})),d}function ensureText(e){if("object"==typeof e){const{hasBOM:s,text:t}=e;return(s?"\ufeff":"")+t}return String(e)}function getEnv(e,s){return e.lastConfigArray&&e.lastConfigArray.pluginEnvironments.get(s)||BuiltInEnvironments.get(s)||null}function getRule(e,s){return e.lastConfigArray&&e.lastConfigArray.pluginRules.get(s)||e.ruleMap.get(s)}function normalizeCwd(e){return e||("object"==typeof process?process.cwd():void 0)}const internalSlotsMap=new WeakMap;function assertEslintrcConfig(e){const{configType:s}=internalSlotsMap.get(e);if("flat"===s)throw new Error("This method cannot be used with flat config. Add your entries directly into the config array.")}class Linter{constructor({cwd:e,configType:s}={}){internalSlotsMap.set(this,{cwd:normalizeCwd(e),lastConfigArray:null,lastSourceCode:null,lastSuppressedMessages:[],configType:s,parserMap:new Map([["espree",espree]]),ruleMap:new Rules}),this.version=pkg.version}static get version(){return pkg.version}_verifyWithoutProcessors(e,s,t){const r=internalSlotsMap.get(this),n=s||{},i=normalizeVerifyOptions(t,n);let o;"string"==typeof e?(r.lastSourceCode=null,o=e):(r.lastSourceCode=e,o=e.text);let a="espree",l=espree;if("object"==typeof n.parser&&null!==n.parser)a=n.parser.filePath,l=n.parser.definition;else if("string"==typeof n.parser){if(!r.parserMap.has(n.parser))return[{ruleId:null,fatal:!0,severity:2,message:`Configured parser '${n.parser}' was not found.`,line:0,column:0}];a=n.parser,l=r.parserMap.get(n.parser)}const c=i.allowInlineConfig&&!i.warnInlineConfig?findEslintEnv(o):{},u=Object.assign({builtin:!0},n.env,c),p=Object.keys(u).filter((e=>u[e])).map((e=>getEnv(r,e))).filter((e=>e)),g=resolveParserOptions(l,n.parserOptions||{},p),f=resolveGlobals(n.globals||{},p),d=n.settings||{},m=createLanguageOptions({globals:n.globals,parser:l,parserOptions:g});if(r.lastSourceCode)r.lastSourceCode.scopeManager||(r.lastSourceCode=new SourceCode({text:r.lastSourceCode.text,ast:r.lastSourceCode.ast,parserServices:r.lastSourceCode.parserServices,visitorKeys:r.lastSourceCode.visitorKeys,scopeManager:analyzeScope(r.lastSourceCode.ast,m)}));else{const e=parse(o,m,i.filename);if(!e.success)return[e.error];r.lastSourceCode=e.sourceCode}const b=r.lastSourceCode,h=i.allowInlineConfig?getDirectiveComments(b.ast,(e=>getRule(r,e)),i.warnInlineConfig):{configuredRules:{},enabledGlobals:{},exportedVariables:{},problems:[],disableDirectives:[]};addDeclaredGlobals(b.scopeManager.scopes[0],f,{exportedVariables:h.exportedVariables,enabledGlobals:h.enabledGlobals});const y=Object.assign({},n.rules,h.configuredRules);let v;try{v=runRules(b,y,(e=>getRule(r,e)),a,m,d,i.filename,i.disableFixes,r.cwd,t.physicalFilename)}catch(e){if(e.message+=`\nOccurred while linting ${i.filename}`,debug("An error occurred while traversing"),debug("Filename:",i.filename),e.currentNode){const{line:s}=e.currentNode.loc.start;debug("Line:",s),e.message+=`:${s}`}throw debug("Parser Options:",g),debug("Parser Path:",a),debug("Settings:",d),e.ruleId&&(e.message+=`\nRule: "${e.ruleId}"`),e}return applyDisableDirectives({directives:h.disableDirectives,disableFixes:i.disableFixes,problems:v.concat(h.problems).sort(((e,s)=>e.line-s.line||e.column-s.column)),reportUnusedDisableDirectives:i.reportUnusedDisableDirectives})}verify(e,s,t){debug("Verify");const{configType:r}=internalSlotsMap.get(this),n="string"==typeof t?{filename:t}:t||{};if(s){if("flat"===r){let t=s;return Array.isArray(s)&&"function"==typeof s.getConfig||(t=new FlatConfigArray(s),t.normalizeSync()),this._distinguishSuppressedMessages(this._verifyWithFlatConfigArray(e,t,n,!0))}if("function"==typeof s.extractConfig)return this._distinguishSuppressedMessages(this._verifyWithConfigArray(e,s,n))}return n.preprocess||n.postprocess?this._distinguishSuppressedMessages(this._verifyWithProcessor(e,s,n)):this._distinguishSuppressedMessages(this._verifyWithoutProcessors(e,s,n))}_verifyWithFlatConfigArrayAndProcessor(e,s,t,r){const n=t.filename||"<input>",i=normalizeFilename(n),o=t.physicalFilename||i,a=ensureText(e),l=t.preprocess||(e=>[e]),c=t.postprocess||(e=>e.flat()),u=t.filterCodeBlock||(e=>e.endsWith(".js")),p=path.extname(n);return c(l(a,i).map(((e,i)=>{if(debug("A code block was found: %o",e.filename||"(unnamed)"),"string"==typeof e)return this._verifyWithFlatConfigArrayAndWithoutProcessors(e,s,t);const l=e.text,c=path.join(n,`${i}_${e.filename}`);return u(c,l)?!r||a===l&&path.extname(c)===p?this._verifyWithFlatConfigArrayAndWithoutProcessors(l,s,{...t,filename:c,physicalFilename:o}):(debug("Resolving configuration again because the file content or extension was changed."),this._verifyWithFlatConfigArray(l,r,{...t,filename:c,physicalFilename:o})):(debug("This code block was skipped."),[])})),i)}_verifyWithFlatConfigArrayAndWithoutProcessors(e,s,t){const r=internalSlotsMap.get(this),n=s||{},i=normalizeVerifyOptions(t,n);let o;"string"==typeof e?(r.lastSourceCode=null,o=e):(r.lastSourceCode=e,o=e.text);const a=n.languageOptions;a.ecmaVersion=normalizeEcmaVersionForLanguageOptions(a.ecmaVersion);const l={...getGlobalsForEcmaVersion(a.ecmaVersion),..."commonjs"===a.sourceType?globals.commonjs:void 0,...a.globals};if(isEspree(a.parser)){const e=a.parserOptions;a.sourceType&&(e.sourceType=a.sourceType,"module"===e.sourceType&&e.ecmaFeatures&&e.ecmaFeatures.globalReturn&&(e.ecmaFeatures.globalReturn=!1))}const c=n.settings||{};if(r.lastSourceCode)r.lastSourceCode.scopeManager||(r.lastSourceCode=new SourceCode({text:r.lastSourceCode.text,ast:r.lastSourceCode.ast,parserServices:r.lastSourceCode.parserServices,visitorKeys:r.lastSourceCode.visitorKeys,scopeManager:analyzeScope(r.lastSourceCode.ast,a)}));else{const e=parse(o,a,i.filename);if(!e.success)return[e.error];r.lastSourceCode=e.sourceCode}const u=r.lastSourceCode,p=i.allowInlineConfig?getDirectiveComments(u.ast,(e=>getRuleFromConfig(e,n)),i.warnInlineConfig):{configuredRules:{},enabledGlobals:{},exportedVariables:{},problems:[],disableDirectives:[]};addDeclaredGlobals(u.scopeManager.scopes[0],l,{exportedVariables:p.exportedVariables,enabledGlobals:p.enabledGlobals});const g=Object.assign({},n.rules,p.configuredRules);let f;try{f=runRules(u,g,(e=>getRuleFromConfig(e,n)),void 0,a,c,i.filename,i.disableFixes,r.cwd,t.physicalFilename)}catch(e){if(e.message+=`\nOccurred while linting ${i.filename}`,debug("An error occurred while traversing"),debug("Filename:",i.filename),e.currentNode){const{line:s}=e.currentNode.loc.start;debug("Line:",s),e.message+=`:${s}`}throw debug("Parser Options:",a.parserOptions),debug("Settings:",c),e.ruleId&&(e.message+=`\nRule: "${e.ruleId}"`),e}return applyDisableDirectives({directives:p.disableDirectives,disableFixes:i.disableFixes,problems:f.concat(p.problems).sort(((e,s)=>e.line-s.line||e.column-s.column)),reportUnusedDisableDirectives:i.reportUnusedDisableDirectives})}_verifyWithConfigArray(e,s,t){debug("With ConfigArray: %s",t.filename),internalSlotsMap.get(this).lastConfigArray=s;const r=s.extractConfig(t.filename),n=r.processor&&s.pluginProcessors.get(r.processor);if(n){debug("Apply the processor: %o",r.processor);const{preprocess:i,postprocess:o,supportsAutofix:a}=n,l=t.disableFixes||!a;return this._verifyWithProcessor(e,r,{...t,disableFixes:l,postprocess:o,preprocess:i},s)}return this._verifyWithoutProcessors(e,r,t)}_verifyWithFlatConfigArray(e,s,t,r=!1){debug("With flat config: %s",t.filename);const n=t.filename||"<input>";internalSlotsMap.get(this).lastConfigArray=s;const i=s.getConfig(n);if(i.processor){debug("Apply the processor: %o",i.processor);const{preprocess:r,postprocess:o,supportsAutofix:a}=i.processor,l=t.disableFixes||!a;return this._verifyWithFlatConfigArrayAndProcessor(e,i,{...t,filename:n,disableFixes:l,postprocess:o,preprocess:r},s)}return r&&(t.preprocess||t.postprocess)?this._verifyWithFlatConfigArrayAndProcessor(e,i,t):this._verifyWithFlatConfigArrayAndWithoutProcessors(e,i,t)}_verifyWithProcessor(e,s,t,r){const n=t.filename||"<input>",i=normalizeFilename(n),o=t.physicalFilename||i,a=ensureText(e),l=t.preprocess||(e=>[e]),c=t.postprocess||(e=>e.flat()),u=t.filterCodeBlock||(e=>e.endsWith(".js")),p=path.extname(n);return c(l(a,i).map(((e,i)=>{if(debug("A code block was found: %o",e.filename||"(unnamed)"),"string"==typeof e)return this._verifyWithoutProcessors(e,s,t);const l=e.text,c=path.join(n,`${i}_${e.filename}`);return u(c,l)?!r||a===l&&path.extname(c)===p?this._verifyWithoutProcessors(l,s,{...t,filename:c,physicalFilename:o}):(debug("Resolving configuration again because the file content or extension was changed."),this._verifyWithConfigArray(l,r,{...t,filename:c,physicalFilename:o})):(debug("This code block was skipped."),[])})),i)}_distinguishSuppressedMessages(e){const s=[],t=[],r=internalSlotsMap.get(this);for(const r of e)r.suppressions?t.push(r):s.push(r);return r.lastSuppressedMessages=t,s}getSourceCode(){return internalSlotsMap.get(this).lastSourceCode}getSuppressedMessages(){return internalSlotsMap.get(this).lastSuppressedMessages}defineRule(e,s){assertEslintrcConfig(this),internalSlotsMap.get(this).ruleMap.define(e,s)}defineRules(e){assertEslintrcConfig(this),Object.getOwnPropertyNames(e).forEach((s=>{this.defineRule(s,e[s])}))}getRules(){assertEslintrcConfig(this);const{lastConfigArray:e,ruleMap:s}=internalSlotsMap.get(this);return new Map(function*(){yield*s,e&&(yield*e.pluginRules)}())}defineParser(e,s){assertEslintrcConfig(this),internalSlotsMap.get(this).parserMap.set(e,s)}verifyAndFix(e,s,t){let r,n=[],i=!1,o=0,a=e;const l=t&&t.filename||`${e.slice(0,10)}...`,c=!t||void 0===t.fix||t.fix;do{if(o++,debug(`Linting code for ${l} (pass ${o})`),n=this.verify(a,s,t),debug(`Generating fixed text for ${l} (pass ${o})`),r=SourceCodeFixer.applyFixes(a,n,c),1===n.length&&n[0].fatal)break;i=i||r.fixed,a=r.output}while(r.fixed&&o<10);return r.fixed&&(r.messages=this.verify(a,s,t)),r.fixed=i,r.output=a,r}}module.exports={Linter:Linter,getLinterInternalSlots:e=>internalSlotsMap.get(e)};
//# sourceMappingURL=/sm/29da76daaefe9fea22fe5896ef801129461d1f0c3045559180fd4ebde3d90b00.map