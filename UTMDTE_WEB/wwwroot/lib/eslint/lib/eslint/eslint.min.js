/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/eslint/eslint.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const path=require("path"),fs=require("fs"),{promisify:promisify}=require("util"),{CLIEngine:CLIEngine,getCLIEngineInternalSlots:getCLIEngineInternalSlots}=require("../cli-engine/cli-engine"),BuiltinRules=require("../rules"),{Legacy:{ConfigOps:{getRuleSeverity:getRuleSeverity}}}=require("@eslint/eslintrc"),{version:version}=require("../../package.json"),writeFile=promisify(fs.writeFile),privateMembersMap=new WeakMap;function isNonEmptyString(e){return"string"==typeof e&&""!==e.trim()}function isArrayOfNonEmptyString(e){return Array.isArray(e)&&e.every(isNonEmptyString)}function isFixType(e){return"directive"===e||"problem"===e||"suggestion"===e||"layout"===e}function isFixTypeArray(e){return Array.isArray(e)&&e.every(isFixType)}class ESLintInvalidOptionsError extends Error{constructor(e){super(`Invalid Options:\n- ${e.join("\n- ")}`),this.code="ESLINT_INVALID_OPTIONS",Error.captureStackTrace(this,ESLintInvalidOptionsError)}}function processOptions({allowInlineConfig:e=!0,baseConfig:t=null,cache:n=!1,cacheLocation:r=".eslintcache",cacheStrategy:o="metadata",cwd:s=process.cwd(),errorOnUnmatchedPattern:i=!0,extensions:a=null,fix:l=!1,fixTypes:u=null,globInputPaths:p=!0,ignore:c=!0,ignorePath:g=null,overrideConfig:f=null,overrideConfigFile:h=null,plugins:d={},reportUnusedDisableDirectives:y=null,resolvePluginsRelativeTo:m=null,rulePaths:b=[],useEslintrc:E=!0,...v}){const w=[],P=Object.keys(v);if(P.length>=1&&(w.push(`Unknown options: ${P.join(", ")}`),P.includes("cacheFile")&&w.push("'cacheFile' has been removed. Please use the 'cacheLocation' option instead."),P.includes("configFile")&&w.push("'configFile' has been removed. Please use the 'overrideConfigFile' option instead."),P.includes("envs")&&w.push("'envs' has been removed. Please use the 'overrideConfig.env' option instead."),P.includes("globals")&&w.push("'globals' has been removed. Please use the 'overrideConfig.globals' option instead."),P.includes("ignorePattern")&&w.push("'ignorePattern' has been removed. Please use the 'overrideConfig.ignorePatterns' option instead."),P.includes("parser")&&w.push("'parser' has been removed. Please use the 'overrideConfig.parser' option instead."),P.includes("parserOptions")&&w.push("'parserOptions' has been removed. Please use the 'overrideConfig.parserOptions' option instead."),P.includes("rules")&&w.push("'rules' has been removed. Please use the 'overrideConfig.rules' option instead.")),"boolean"!=typeof e&&w.push("'allowInlineConfig' must be a boolean."),"object"!=typeof t&&w.push("'baseConfig' must be an object or null."),"boolean"!=typeof n&&w.push("'cache' must be a boolean."),isNonEmptyString(r)||w.push("'cacheLocation' must be a non-empty string."),"metadata"!==o&&"content"!==o&&w.push('\'cacheStrategy\' must be any of "metadata", "content".'),isNonEmptyString(s)&&path.isAbsolute(s)||w.push("'cwd' must be an absolute path."),"boolean"!=typeof i&&w.push("'errorOnUnmatchedPattern' must be a boolean."),isArrayOfNonEmptyString(a)||null===a||w.push("'extensions' must be an array of non-empty strings or null."),"boolean"!=typeof l&&"function"!=typeof l&&w.push("'fix' must be a boolean or a function."),null===u||isFixTypeArray(u)||w.push('\'fixTypes\' must be an array of any of "directive", "problem", "suggestion", and "layout".'),"boolean"!=typeof p&&w.push("'globInputPaths' must be a boolean."),"boolean"!=typeof c&&w.push("'ignore' must be a boolean."),isNonEmptyString(g)||null===g||w.push("'ignorePath' must be a non-empty string or null."),"object"!=typeof f&&w.push("'overrideConfig' must be an object or null."),isNonEmptyString(h)||null===h||w.push("'overrideConfigFile' must be a non-empty string or null."),"object"!=typeof d?w.push("'plugins' must be an object or null."):null!==d&&Object.keys(d).includes("")&&w.push("'plugins' must not include an empty string."),Array.isArray(d)&&w.push("'plugins' doesn't add plugins to configuration to load. Please use the 'overrideConfig.plugins' option instead."),"error"!==y&&"warn"!==y&&"off"!==y&&null!==y&&w.push('\'reportUnusedDisableDirectives\' must be any of "error", "warn", "off", and null.'),isNonEmptyString(m)||null===m||w.push("'resolvePluginsRelativeTo' must be a non-empty string or null."),isArrayOfNonEmptyString(b)||w.push("'rulePaths' must be an array of non-empty strings."),"boolean"!=typeof E&&w.push("'useEslintrc' must be a boolean."),w.length>0)throw new ESLintInvalidOptionsError(w);return{allowInlineConfig:e,baseConfig:t,cache:n,cacheLocation:r,cacheStrategy:o,configFile:h,cwd:s,errorOnUnmatchedPattern:i,extensions:a,fix:l,fixTypes:u,globInputPaths:p,ignore:c,ignorePath:g,reportUnusedDisableDirectives:y,resolvePluginsRelativeTo:m,rulePaths:b,useEslintrc:E}}function hasDefinedProperty(e){if("object"==typeof e&&null!==e)for(const t in e)if(void 0!==e[t])return!0;return!1}function createRulesMeta(e){return Array.from(e).reduce(((e,[t,n])=>(e[t]=n.meta,e)),{})}const usedDeprecatedRulesCache=new WeakMap;function getOrFindUsedDeprecatedRules(e,t){const{configArrayFactory:n,options:{cwd:r}}=getCLIEngineInternalSlots(e),o=path.isAbsolute(t)?t:path.join(r,"__placeholder__.js"),s=n.getConfigArrayForFile(o),i=s.extractConfig(o);if(!usedDeprecatedRulesCache.has(i)){const e=s.pluginRules,t=[];for(const[n,r]of Object.entries(i.rules)){if(0===getRuleSeverity(r))continue;const o=e.get(n)||BuiltinRules.get(n),s=o&&o.meta;s&&s.deprecated&&t.push({ruleId:n,replacedBy:s.replacedBy||[]})}usedDeprecatedRulesCache.set(i,Object.freeze(t))}return usedDeprecatedRulesCache.get(i)}function processCLIEngineLintReport(e,{results:t}){const n={configurable:!0,enumerable:!0,get(){return getOrFindUsedDeprecatedRules(e,this.filePath)}};for(const e of t)Object.defineProperty(e,"usedDeprecatedRules",n);return t}function compareResultsByFilePath(e,t){return e.filePath<t.filePath?-1:e.filePath>t.filePath?1:0}class ESLint{constructor(e={}){const t=processOptions(e),n=new CLIEngine(t,{preloadedPlugins:e.plugins}),{configArrayFactory:r,lastConfigArrays:o}=getCLIEngineInternalSlots(n);let s=!1;hasDefinedProperty(e.overrideConfig)&&(r.setOverrideConfig(e.overrideConfig),s=!0),s&&(r.clearCache(),o[0]=r.getConfigArrayForFile()),privateMembersMap.set(this,{cliEngine:n,options:t})}static get version(){return version}static async outputFixes(e){if(!Array.isArray(e))throw new Error("'results' must be an array");await Promise.all(e.filter((e=>{if("object"!=typeof e||null===e)throw new Error("'results' must include only objects");return"string"==typeof e.output&&path.isAbsolute(e.filePath)})).map((e=>writeFile(e.filePath,e.output))))}static getErrorResults(e){return CLIEngine.getErrorResults(e)}getRulesMetaForResults(e){const t=new Set;for(const n of e){for(const{ruleId:e}of n.messages)t.add(e);for(const{ruleId:e}of n.suppressedMessages)t.add(e)}const{cliEngine:n}=privateMembersMap.get(this),r=n.getRules(),o=new Map;for(const[e,n]of r)t.has(e)&&o.set(e,n);return createRulesMeta(o)}async lintFiles(e){if(!isNonEmptyString(e)&&!isArrayOfNonEmptyString(e))throw new Error("'patterns' must be a non-empty string or an array of non-empty strings");const{cliEngine:t}=privateMembersMap.get(this);return processCLIEngineLintReport(t,t.executeOnFiles(e))}async lintText(e,t={}){if("string"!=typeof e)throw new Error("'code' must be a string");if("object"!=typeof t)throw new Error("'options' must be an object, null, or undefined");const{filePath:n,warnIgnored:r=!1,...o}=t||{},s=Object.keys(o);if(s.length>0)throw new Error(`'options' must not include the unknown option(s): ${s.join(", ")}`);if(void 0!==n&&!isNonEmptyString(n))throw new Error("'options.filePath' must be a non-empty string or undefined");if("boolean"!=typeof r)throw new Error("'options.warnIgnored' must be a boolean or undefined");const{cliEngine:i}=privateMembersMap.get(this);return processCLIEngineLintReport(i,i.executeOnText(e,n,r))}async loadFormatter(e="stylish"){if("string"!=typeof e)throw new Error("'name' must be a string");const{cliEngine:t,options:n}=privateMembersMap.get(this),r=t.getFormatter(e);if("function"!=typeof r)throw new Error(`Formatter must be a function, but got a ${typeof r}.`);return{format(e){let o=null;return e.sort(compareResultsByFilePath),r(e,{get cwd(){return n.cwd},get rulesMeta(){return o||(o=createRulesMeta(t.getRules())),o}})}}}async calculateConfigForFile(e){if(!isNonEmptyString(e))throw new Error("'filePath' must be a non-empty string");const{cliEngine:t}=privateMembersMap.get(this);return t.getConfigForFile(e)}async isPathIgnored(e){if(!isNonEmptyString(e))throw new Error("'filePath' must be a non-empty string");const{cliEngine:t}=privateMembersMap.get(this);return t.isPathIgnored(e)}}module.exports={ESLint:ESLint,getESLintPrivateMembers:e=>privateMembersMap.get(e)};
//# sourceMappingURL=/sm/060b8835aff1b62afcb5d27e80aa83773d456488953721cc8f23dcaf47c8e996.map