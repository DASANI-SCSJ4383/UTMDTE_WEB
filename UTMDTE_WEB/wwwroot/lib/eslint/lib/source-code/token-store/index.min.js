/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint@8.11.0/lib/source-code/token-store/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const assert=require("assert"),{isCommentToken:isCommentToken}=require("eslint-utils"),cursors=require("./cursors"),ForwardTokenCursor=require("./forward-token-cursor"),PaddedTokenCursor=require("./padded-token-cursor"),utils=require("./utils"),TOKENS=Symbol("tokens"),COMMENTS=Symbol("comments"),INDEX_MAP=Symbol("indexMap");function createIndexMap(e,r){const t=Object.create(null);let n=0,s=0,o=0,i=null;for(;n<e.length||s<r.length;){for(o=s<r.length?r[s].range[0]:Number.MAX_SAFE_INTEGER;n<e.length&&(i=e[n].range)[0]<o;)t[i[0]]=n,t[i[1]-1]=n,n+=1;for(o=n<e.length?e[n].range[0]:Number.MAX_SAFE_INTEGER;s<r.length&&(i=r[s].range)[0]<o;)t[i[0]]=n,t[i[1]-1]=n,s+=1}return t}function createCursorWithSkip(e,r,t,n,s,o,i){let u=!1,a=0,h=null;return"number"==typeof i?a=0|i:"function"==typeof i?h=i:i&&(u=!!i.includeComments,a=0|i.skip,h=i.filter||null),assert(a>=0,"options.skip should be zero or a positive integer."),assert(!h||"function"==typeof h,"options.filter should be a function."),e.createCursor(r,t,n,s,o,u,h,a,-1)}function createCursorWithCount(e,r,t,n,s,o,i){let u=!1,a=0,h=!1,c=null;return"number"==typeof i?(a=0|i,h=!0):"function"==typeof i?c=i:i&&(u=!!i.includeComments,a=0|i.count,h="number"==typeof i.count,c=i.filter||null),assert(a>=0,"options.count should be zero or a positive integer."),assert(!c||"function"==typeof c,"options.filter should be a function."),e.createCursor(r,t,n,s,o,u,c,0,h?a:-1)}function createCursorWithPadding(e,r,t,n,s,o,i){return void 0===o&&void 0===i?new ForwardTokenCursor(e,r,t,n,s):"number"==typeof o||void 0===o?new PaddedTokenCursor(e,r,t,n,s,0|o,0|i):createCursorWithCount(cursors.forward,e,r,t,n,s,o)}function getAdjacentCommentTokensFromCursor(e){const r=[];let t=e.getOneToken();for(;t&&isCommentToken(t);)r.push(t),t=e.getOneToken();return r}module.exports=class{constructor(e,r){this[TOKENS]=e,this[COMMENTS]=r,this[INDEX_MAP]=createIndexMap(e,r)}getTokenByRangeStart(e,r){const t=r&&r.includeComments,n=cursors.forward.createBaseCursor(this[TOKENS],this[COMMENTS],this[INDEX_MAP],e,-1,t).getOneToken();return n&&n.range[0]===e?n:null}getFirstToken(e,r){return createCursorWithSkip(cursors.forward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[0],e.range[1],r).getOneToken()}getLastToken(e,r){return createCursorWithSkip(cursors.backward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[0],e.range[1],r).getOneToken()}getTokenBefore(e,r){return createCursorWithSkip(cursors.backward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],-1,e.range[0],r).getOneToken()}getTokenAfter(e,r){return createCursorWithSkip(cursors.forward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[1],-1,r).getOneToken()}getFirstTokenBetween(e,r,t){return createCursorWithSkip(cursors.forward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[1],r.range[0],t).getOneToken()}getLastTokenBetween(e,r,t){return createCursorWithSkip(cursors.backward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[1],r.range[0],t).getOneToken()}getTokenOrCommentBefore(e,r){return this.getTokenBefore(e,{includeComments:!0,skip:r})}getTokenOrCommentAfter(e,r){return this.getTokenAfter(e,{includeComments:!0,skip:r})}getFirstTokens(e,r){return createCursorWithCount(cursors.forward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[0],e.range[1],r).getAllTokens()}getLastTokens(e,r){return createCursorWithCount(cursors.backward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[0],e.range[1],r).getAllTokens().reverse()}getTokensBefore(e,r){return createCursorWithCount(cursors.backward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],-1,e.range[0],r).getAllTokens().reverse()}getTokensAfter(e,r){return createCursorWithCount(cursors.forward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[1],-1,r).getAllTokens()}getFirstTokensBetween(e,r,t){return createCursorWithCount(cursors.forward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[1],r.range[0],t).getAllTokens()}getLastTokensBetween(e,r,t){return createCursorWithCount(cursors.backward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[1],r.range[0],t).getAllTokens().reverse()}getTokens(e,r,t){return createCursorWithPadding(this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[0],e.range[1],r,t).getAllTokens()}getTokensBetween(e,r,t){return createCursorWithPadding(this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[1],r.range[0],t,t).getAllTokens()}commentsExistBetween(e,r){const t=utils.search(this[COMMENTS],e.range[1]);return t<this[COMMENTS].length&&this[COMMENTS][t].range[1]<=r.range[0]}getCommentsBefore(e){return getAdjacentCommentTokensFromCursor(createCursorWithCount(cursors.backward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],-1,e.range[0],{includeComments:!0})).reverse()}getCommentsAfter(e){return getAdjacentCommentTokensFromCursor(createCursorWithCount(cursors.forward,this[TOKENS],this[COMMENTS],this[INDEX_MAP],e.range[1],-1,{includeComments:!0}))}getCommentsInside(e){return this.getTokens(e,{includeComments:!0,filter:isCommentToken})}};
//# sourceMappingURL=/sm/c06d23d65eac1771ac8331ff5b7f1115984685c432d3c99feca3c63079159fc9.map