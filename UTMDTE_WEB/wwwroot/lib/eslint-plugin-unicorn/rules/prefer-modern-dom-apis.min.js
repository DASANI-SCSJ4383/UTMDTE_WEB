/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint-plugin-unicorn@41.0.1/rules/prefer-modern-dom-apis.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const isValueNotUsable=require("./utils/is-value-not-usable.js"),{methodCallSelector:methodCallSelector}=require("./selectors/index.js"),messages={replaceChildOrInsertBefore:"Prefer `{{oldChildNode}}.{{preferredMethod}}({{newChildNode}})` over `{{parentNode}}.{{method}}({{newChildNode}}, {{oldChildNode}})`.",insertAdjacentTextOrInsertAdjacentElement:"Prefer `{{reference}}.{{preferredMethod}}({{content}})` over `{{reference}}.{{method}}({{position}}, {{content}})`."},replaceChildOrInsertBeforeSelector=[methodCallSelector({methods:["replaceChild","insertBefore"],argumentsLength:2}),'[arguments.0.type="Identifier"]','[arguments.0.name!="undefined"]','[arguments.1.type="Identifier"]','[arguments.1.name!="undefined"]','[callee.object.type="Identifier"]'].join(""),forbiddenMethods=new Map([["replaceChild","replaceWith"],["insertBefore","before"]]),checkForReplaceChildOrInsertBefore=(e,t)=>{const r=t.callee.property.name,n=t.callee.object.name,[o,a]=t.arguments.map((({name:e})=>e)),d=forbiddenMethods.get(r),s=isValueNotUsable(t)?e=>e.replaceText(t,`${a}.${d}(${o})`):void 0;return{node:t,messageId:"replaceChildOrInsertBefore",data:{parentNode:n,method:r,preferredMethod:d,newChildNode:o,oldChildNode:a},fix:s}},insertAdjacentTextOrInsertAdjacentElementSelector=[methodCallSelector({methods:["insertAdjacentText","insertAdjacentElement"],argumentsLength:2}),'[arguments.0.type="Literal"]',':matches([arguments.1.type="Literal"], [arguments.1.type="Identifier"])','[callee.object.type="Identifier"]'].join(""),positionReplacers=new Map([["beforebegin","before"],["afterbegin","prepend"],["beforeend","append"],["afterend","after"]]),checkForInsertAdjacentTextOrInsertAdjacentElement=(e,t)=>{const r=t.callee.property.name,[n,o]=t.arguments,a=n.value;if(!positionReplacers.has(a))return;const d=positionReplacers.get(a),s=e.getSource(o),l=e.getSource(t.callee.object),c="insertAdjacentElement"!==r||isValueNotUsable(t)?e=>e.replaceText(t,`${l}.${d}(${s})`):void 0;return{node:t,messageId:"insertAdjacentTextOrInsertAdjacentElement",data:{reference:l,method:r,preferredMethod:d,position:e.getSource(n),content:s},fix:c}},create=e=>({[replaceChildOrInsertBeforeSelector]:e=>checkForReplaceChildOrInsertBefore(0,e),[insertAdjacentTextOrInsertAdjacentElementSelector]:t=>checkForInsertAdjacentTextOrInsertAdjacentElement(e,t)});module.exports={create:create,meta:{type:"suggestion",docs:{description:"Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`."},fixable:"code",messages:messages}};
//# sourceMappingURL=/sm/e7ef00d21ca94686777b92c2b0c7fee03d4a3934d801115c55d7eb855269ad8c.map