/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint-plugin-unicorn@41.0.1/rules/prefer-ternary.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const{isParenthesized:isParenthesized}=require("eslint-utils"),avoidCapture=require("./utils/avoid-capture.js"),needsSemicolon=require("./utils/needs-semicolon.js"),isSameReference=require("./utils/is-same-reference.js"),getIndentString=require("./utils/get-indent-string.js"),{getParenthesizedText:getParenthesizedText}=require("./utils/parentheses.js"),shouldAddParenthesesToConditionalExpressionChild=require("./utils/should-add-parentheses-to-conditional-expression-child.js"),{extendFixRange:extendFixRange}=require("./fix/index.js"),getScopes=require("./utils/get-scopes.js"),messageId="prefer-ternary",selector=["IfStatement",":not(IfStatement > .alternate)",'[test.type!="ConditionalExpression"]',"[consequent]","[alternate]"].join(""),isTernary=e=>e&&"ConditionalExpression"===e.type;function getNodeBody(e){if(e){if("ExpressionStatement"===e.type)return getNodeBody(e.expression);if("BlockStatement"===e.type){const t=e.body.filter((({type:e})=>"EmptyStatement"!==e));if(1===t.length)return getNodeBody(t[0])}return e}}const isSingleLineNode=e=>e.loc.start.line===e.loc.end.line,create=e=>{const t="only-single-line"===e.options[0],n=e.getSourceCode(),r=new WeakMap,s=(e,t)=>t.every((t=>{const n=r.get(t);return!n||!n.has(e)})),a=e=>{let t=getParenthesizedText(e,n);return!isParenthesized(e,n)&&shouldAddParenthesesToConditionalExpressionChild(e)&&(t=`(${t})`),t};function o(e,t){const{before:r="",after:s=";",consequent:a,alternate:i,node:l}=e,{checkThrowStatement:d,returnFalseIfNotMergeable:u}={checkThrowStatement:!1,returnFalseIfNotMergeable:!1,...t};if(!a||!i||a.type!==i.type)return!u&&e;const{type:c,argument:g,delegate:f,left:p,right:m,operator:y}=a;if("ReturnStatement"===c&&!isTernary(g)&&!isTernary(i.argument))return o({before:`${r}return `,after:s,consequent:null===g?"undefined":g,alternate:null===i.argument?"undefined":i.argument,node:l});if("YieldExpression"===c&&f===i.delegate&&!isTernary(g)&&!isTernary(i.argument))return o({before:`${r}yield${f?"*":""} (`,after:`)${s}`,consequent:null===g?"undefined":g,alternate:null===i.argument?"undefined":i.argument,node:l});if("AwaitExpression"===c&&!isTernary(g)&&!isTernary(i.argument))return o({before:`${r}await (`,after:`)${s}`,consequent:g,alternate:i.argument,node:l});if(d&&"ThrowStatement"===c&&!isTernary(g)&&!isTernary(i.argument)){const{parent:e}=l,t=e&&"BlockStatement"!==e.type;return{type:c,before:`${r}${t?"{\n{{INDENT_STRING}}":""}const {{ERROR_NAME}} = `,after:";\n{{INDENT_STRING}}throw {{ERROR_NAME}};"+(t?"\n}":""),consequent:g,alternate:i.argument}}return"AssignmentExpression"!==c||y!==i.operator||isTernary(p)||isTernary(i.left)||isTernary(m)||isTernary(i.right)||!isSameReference(p,i.left)?!u&&e:o({before:`${r}${n.getText(p)} ${y} `,after:s,consequent:m,alternate:i.right,node:l})}return{[selector](i){const l=getNodeBody(i.consequent),d=getNodeBody(i.alternate);if(t&&[l,d,i.test].some((e=>!isSingleLineNode(e))))return;const u=o({node:i,consequent:l,alternate:d},{checkThrowStatement:!0,returnFalseIfNotMergeable:!0});if(!u)return;const c=e.getScope();return{node:i,messageId:messageId,*fix(e){const t=a(i.test),o="string"==typeof u.consequent?u.consequent:a(u.consequent),l="string"==typeof u.alternate?u.alternate:a(u.alternate);let{type:d,before:g,after:f}=u,p=!1;if("ThrowStatement"===d){const e=getScopes(c),t=avoidCapture("error",e,s);for(const n of e){r.has(n)||r.set(n,new Set);r.get(n).add(t)}const a=getIndentString(i,n);f=f.replace("{{INDENT_STRING}}",a).replace("{{ERROR_NAME}}",t),g=g.replace("{{INDENT_STRING}}",a).replace("{{ERROR_NAME}}",t),p=!0}let m=`${g}${t} ? ${o} : ${l}${f}`;const y=n.getTokenBefore(i);needsSemicolon(y,n,m)&&(m=`;${m}`),yield e.replaceText(i,m),p&&(yield*extendFixRange(e,n.ast.range))}}}}},schema=[{enum:["always","only-single-line"],default:"always"}];module.exports={create:create,meta:{type:"suggestion",docs:{description:"Prefer ternary expressions over simple `if-else` statements."},fixable:"code",schema:schema,messages:{[messageId]:"This `if` statement can be replaced by a ternary expression."}}};
//# sourceMappingURL=/sm/d114aca352f6a205013f42091a0f7d9f0efce7e70f5ec109d943b4f03011f81a.map