/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint-plugin-unicorn@41.0.1/rules/prefer-switch.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const{hasSideEffect:hasSideEffect}=require("eslint-utils"),isSameReference=require("./utils/is-same-reference.js"),getIndentString=require("./utils/get-indent-string.js"),MESSAGE_ID="prefer-switch",messages={[MESSAGE_ID]:"Use `switch` instead of multiple `else-if`."},isSame=(e,t)=>e===t||isSameReference(e,t);function getEqualityComparisons(e){const t=[e],n=[];for(;t.length>0;)if("LogicalExpression"!==(e=t.pop()).type||"||"!==e.operator){if("BinaryExpression"!==e.type||"==="!==e.operator)return[];n.push(e)}else t.push(e.right,e.left);return n}function getCommonReferences(e,t){for(const{left:n,right:s}of e)if(0===(t=t.filter((e=>isSame(e,n)||isSame(e,s)))).length)break;return t}function getStatements(e){let t;const n=[];for(;e&&"IfStatement"===e.type;e=e.alternate){const{test:s}=e,r=getEqualityComparisons(s);if(0===r.length)break;if(!t){const[{left:e,right:n}]=r;t=[e,n]}const a=getCommonReferences(r,t);if(0===a.length)break;t=a,n.push({statement:e,compareExpressions:r})}return{ifStatements:n,discriminant:t&&t[0]}}const breakAbleNodeTypes=new Set(["WhileStatement","DoWhileStatement","ForStatement","ForOfStatement","ForInStatement","SwitchStatement"]),getBreakTarget=e=>{for(;e.parent;e=e.parent)if(breakAbleNodeTypes.has(e.type))return e},isNodeInsideNode=(e,t)=>e.range[0]>=t.range[0]&&e.range[1]<=t.range[1];function hasBreakInside(e,t){for(const n of e){if(!isNodeInsideNode(n,t))continue;const e=getBreakTarget(n);if(!e)return!0;if(isNodeInsideNode(t,e))return!0}return!1}function*insertBracesIfNotBlockStatement(e,t,n){e&&"BlockStatement"!==e.type&&(yield t.insertTextBefore(e,`{\n${n}`),yield t.insertTextAfter(e,`\n${n}}`))}function*insertBreakStatement(e,t,n,s){if("BlockStatement"===e.type){const r=n.getLastToken(e);yield t.insertTextBefore(r,`\n${s}break;\n${s}`)}else yield t.insertTextAfter(e,`\n${s}break;`)}function getBlockStatementLastNode(e){const{body:t}=e;for(let e=t.length-1;e>=0;e--){const n=t[e];if("FunctionDeclaration"!==n.type&&"EmptyStatement"!==n.type){if("BlockStatement"!==n.type)return n;{const e=getBlockStatementLastNode(n);if(e)return e}}}}function shouldInsertBreakStatement(e){switch(e.type){case"ReturnStatement":case"ThrowStatement":return!1;case"IfStatement":return!e.alternate||shouldInsertBreakStatement(e.consequent)||shouldInsertBreakStatement(e.alternate);case"BlockStatement":{const t=getBlockStatementLastNode(e);return!t||shouldInsertBreakStatement(t)}default:return!0}}function fix({discriminant:e,ifStatements:t},n,s){const r=n.getText(e);return function*(a){const i=t[0].statement,o=getIndentString(i,n);yield a.insertTextBefore(i,`switch (${r}) {`);const c=t[t.length-1].statement;if(c.alternate){const{alternate:e}=c;yield a.insertTextBefore(e,`\n${o}default: `)}else switch(s.emptyDefaultCase){case"no-default-comment":yield a.insertTextAfter(i,`\n${o}// No default`);break;case"do-nothing-comment":yield a.insertTextAfter(i,`\n${o}default:\n${o}// Do nothing`)}yield a.insertTextAfter(i,`\n${o}}`);for(const{statement:s,compareExpressions:r}of t){const{consequent:t,alternate:i,range:c}=s,f=[c[0],t.range[0]];if(i){const[,e]=t.range,[n]=i.range;yield a.replaceTextRange([e,n],"")}yield a.replaceTextRange(f,"");for(const{left:s,right:i}of r){const r=isSame(s,e)?i:s,c=n.getText(r);yield a.insertTextBefore(t,`\n${o}case ${c}: `)}shouldInsertBreakStatement(t)&&(yield*insertBreakStatement(t,a,n,o),yield*insertBracesIfNotBlockStatement(t,a,o))}}}const create=e=>{const t={minimumCases:3,emptyDefaultCase:"no-default-comment",insertBreakInDefaultCase:!1,...e.options[0]},n=e.getSourceCode(),s=new Set,r=[],a=new Set;return{IfStatement(e){s.add(e)},"BreakStatement:not([label])"(e){r.push(e)},*"Program:exit"(){for(const e of s){if(a.has(e))continue;const{discriminant:s,ifStatements:i}=getStatements(e);if(!s||i.length<t.minimumCases)continue;for(const{statement:e}of i)a.add(e);const o={loc:{start:e.loc.start,end:e.consequent.loc.start},messageId:MESSAGE_ID};hasSideEffect(s,n)||i.some((({statement:e})=>hasBreakInside(r,e)))||(o.fix=fix({discriminant:s,ifStatements:i},n,t)),yield o}}}},schema=[{type:"object",additionalProperties:!1,properties:{minimumCases:{type:"integer",minimum:2,default:3},emptyDefaultCase:{enum:["no-default-comment","do-nothing-comment","no-default-case"],default:"no-default-comment"}}}];module.exports={create:create,meta:{type:"suggestion",docs:{description:"Prefer `switch` over multiple `else-if`."},fixable:"code",schema:schema,messages:messages}};
//# sourceMappingURL=/sm/053557dfbe50bbb19c01d1f061e2681a3b6b5879b7437300730953edb327a25e.map