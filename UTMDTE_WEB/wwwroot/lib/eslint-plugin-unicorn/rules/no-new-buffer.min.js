/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint-plugin-unicorn@41.0.1/rules/no-new-buffer.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const{getStaticValue:getStaticValue}=require("eslint-utils"),{newExpressionSelector:newExpressionSelector}=require("./selectors/index.js"),{switchNewExpressionToCallExpression:switchNewExpressionToCallExpression}=require("./fix/index.js"),isNumber=require("./utils/is-number.js"),ERROR="error",ERROR_UNKNOWN="error-unknown",SUGGESTION="suggestion",messages={[ERROR]:"`new Buffer()` is deprecated, use `Buffer.{{method}}()` instead.",[ERROR_UNKNOWN]:"`new Buffer()` is deprecated, use `Buffer.alloc()` or `Buffer.from()` instead.",[SUGGESTION]:"Switch to `Buffer.{{method}}()`."},inferMethod=(e,r)=>{if(1!==e.length)return"from";const[t]=e;if("SpreadElement"===t.type)return;if("ArrayExpression"===t.type||"TemplateLiteral"===t.type)return"from";if(isNumber(t,r))return"alloc";const s=getStaticValue(t,r);if(s){const{value:e}=s;if("string"==typeof e||Array.isArray(e))return"from"}};function fix(e,r,t){return function*(s){yield s.insertTextAfter(e.callee,`.${t}`),yield*switchNewExpressionToCallExpression(e,r,s)}}const create=e=>{const r=e.getSourceCode();return{[newExpressionSelector("Buffer")](t){const s=inferMethod(t.arguments,e.getScope());return s?{node:t,messageId:ERROR,data:{method:s},fix:fix(t,r,s)}:{node:t,messageId:ERROR_UNKNOWN,suggest:["from","alloc"].map((e=>({messageId:SUGGESTION,data:{method:e},fix:fix(t,r,e)})))}}}};module.exports={create:create,meta:{type:"problem",docs:{description:"Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`."},fixable:"code",hasSuggestions:!0,messages:messages}};
//# sourceMappingURL=/sm/e6276e372a3ad5e0084a100aaf3f075c628d501fda63bb8e3e74f8ecea8cb61f.map