/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint-plugin-unicorn@41.0.1/rules/prefer-add-event-listener.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const{isParenthesized:isParenthesized}=require("eslint-utils"),eventTypes=require("./shared/dom-events.js"),{STATIC_REQUIRE_SOURCE_SELECTOR:STATIC_REQUIRE_SOURCE_SELECTOR}=require("./selectors/index.js"),MESSAGE_ID="prefer-add-event-listener",messages={[MESSAGE_ID]:"Prefer `{{replacement}}` over `{{method}}`.{{extra}}"},extraMessages={beforeunload:"Use `event.preventDefault(); event.returnValue = 'foo'` to trigger the prompt.",message:"Note that there is difference between `SharedWorker#onmessage` and `SharedWorker#addEventListener('message')`.",error:"Note that there is difference between `{window,element}.onerror` and `{window,element}.addEventListener('error')`."},getEventMethodName=e=>e.property.name,getEventTypeName=e=>e.slice("on".length),fixCode=(e,t,r,n)=>{const s=getEventTypeName(getEventMethodName(n));let o=t.getText(n.object);isParenthesized(n.object,t)&&(o=`(${o})`);let a=t.getText(r.right);isParenthesized(r.right,t)&&(a=`(${a})`);const i=`${o}.addEventListener('${s}', ${a})`;return e.replaceText(r,i)},shouldFixBeforeUnload=(e,t)=>("ArrowFunctionExpression"===e.type||"FunctionExpression"===e.type)&&("BlockStatement"===e.body.type&&!t.get(e)),isClearing=e=>"Literal"===e.type?"null"===e.raw:"Identifier"===e.type&&"undefined"===e.name,create=e=>{const t=e.options[0]||{},r=new Set(t.excludedPackages||["koa","sax"]);let n;const s=new WeakMap;let o;return{onCodePathStart(e,t){o={node:t,upper:o,returnsSomething:!1}},onCodePathEnd(){s.set(o.node,o.returnsSomething),o=o.upper},[STATIC_REQUIRE_SOURCE_SELECTOR](e){!n&&r.has(e.value)&&(n=!0)},"ImportDeclaration > Literal"(e){!n&&r.has(e.value)&&(n=!0)},ReturnStatement(e){o.returnsSomething=o.returnsSomething||Boolean(e.argument)},"AssignmentExpression:exit"(t){if(n)return;const{left:r,right:o}=t;if("MemberExpression"!==r.type||r.computed)return;const a=getEventMethodName(r);if(!a||!a.startsWith("on"))return;const i=getEventTypeName(a);if(!eventTypes.has(i))return;let d,m="addEventListener",p="";return isClearing(o)?m="removeEventListener":"beforeunload"!==i||shouldFixBeforeUnload(o,s)?"message"===i?p=extraMessages.message:"error"===i?p=extraMessages.error:d=n=>fixCode(n,e.getSourceCode(),t,r):p=extraMessages.beforeunload,{node:r.property,messageId:MESSAGE_ID,data:{replacement:m,method:a,extra:p?` ${p}`:""},fix:d}}}},schema=[{type:"object",additionalProperties:!1,properties:{excludedPackages:{type:"array",items:{type:"string"},uniqueItems:!0}}}];module.exports={create:create,meta:{type:"suggestion",docs:{description:"Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions."},fixable:"code",schema:schema,messages:messages}};
//# sourceMappingURL=/sm/88eb978467e6697eb3caa25a1e22633519d55059a16ad88adc4f884848fb60c2.map