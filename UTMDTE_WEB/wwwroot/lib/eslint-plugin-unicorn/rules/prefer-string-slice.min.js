/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint-plugin-unicorn@41.0.1/rules/prefer-string-slice.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const{getStaticValue:getStaticValue}=require("eslint-utils"),{getParenthesizedText:getParenthesizedText,getParenthesizedRange:getParenthesizedRange}=require("./utils/parentheses.js"),{methodCallSelector:methodCallSelector}=require("./selectors/index.js"),isNumber=require("./utils/is-number.js"),{replaceArgument:replaceArgument}=require("./fix/index.js"),MESSAGE_ID_SUBSTR="substr",MESSAGE_ID_SUBSTRING="substring",messages={substr:"Prefer `String#slice()` over `String#substr()`.",substring:"Prefer `String#slice()` over `String#substring()`."},selector=methodCallSelector({methods:["substr","substring"],includeOptionalMember:!0,includeOptionalCall:!0}),isLiteralNumber=e=>e&&"Literal"===e.type&&"number"==typeof e.value,getNumericValue=e=>isLiteralNumber(e)?e.value:"UnaryExpression"===e.type&&"-"===e.operator?-getNumericValue(e.argument):void 0,isLengthProperty=e=>e&&"MemberExpression"===e.type&&!1===e.computed&&"Identifier"===e.property.type&&"length"===e.property.name;function*fixSubstrArguments({node:e,fixer:t,context:r,abort:i}){const s=e.arguments,[n,a]=s;if(!a)return;const u=r.getScope(),o=r.getSourceCode(),l=getStaticValue(n,u),g=getParenthesizedRange(a,o),c=e=>replaceArgument(t,a,e,o);if(l&&0===l.value){if(isLiteralNumber(a)||isLengthProperty(a))return;return"number"==typeof getNumericValue(a)?void(yield c(Math.max(0,getNumericValue(a)))):(yield t.insertTextBeforeRange(g,"Math.max(0, "),void(yield t.insertTextAfterRange(g,")")))}if(s.every((e=>isLiteralNumber(e))))yield c(n.value+a.value);else{if(!s.every((e=>isNumber(e,r.getScope()))))return i();{const e=getParenthesizedText(n,o);yield t.insertTextBeforeRange(g,`${e} + `)}}}function*fixSubstringArguments({node:e,fixer:t,context:r,abort:i}){const s=r.getSourceCode(),[n,a]=e.arguments,u=n?getNumericValue(n):void 0,o=getParenthesizedText(n,s),l=e=>replaceArgument(t,n,e,s);if(!a){if(isLengthProperty(n))return;if(void 0!==u)return void(yield l(Math.max(0,u)));const e=getParenthesizedRange(n,s);return yield t.insertTextBeforeRange(e,"Math.max(0, "),void(yield t.insertTextAfterRange(e,")"))}const g=getNumericValue(a),c=getParenthesizedText(a,s),d=e=>replaceArgument(t,a,e,s);if(void 0!==u&&void 0!==g){const e=[Math.max(0,u),Math.max(0,g)];return u>g&&e.reverse(),e[0]!==u&&(yield l(e[0])),void(e[1]!==g&&(yield d(e[1])))}return 0===u||0===g?(yield l(0),void(yield d(`Math.max(0, ${0===u?c:o})`))):i()}const create=e=>({[selector](t){const r=t.callee.property.name;return{node:t,messageId:r,*fix(i,{abort:s}){if(yield i.replaceText(t.callee.property,"slice"),0===t.arguments.length)return;if(t.arguments.length>2||t.arguments.some((e=>"SpreadElement"===e.type)))return s();const n="substr"===r?fixSubstrArguments:fixSubstringArguments;yield*n({node:t,fixer:i,context:e,abort:s})}}}});module.exports={create:create,meta:{type:"suggestion",docs:{description:"Prefer `String#slice()` over `String#substr()` and `String#substring()`."},fixable:"code",messages:messages}};
//# sourceMappingURL=/sm/875ff359723683250d2911d5085b2559c575dd8a189368e5cbb0c5ae116e1d41.map