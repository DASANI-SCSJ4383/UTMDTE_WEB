/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint-plugin-unicorn@41.0.1/rules/prefer-type-error.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const{newExpressionSelector:newExpressionSelector}=require("./selectors/index.js"),MESSAGE_ID="prefer-type-error",messages={[MESSAGE_ID]:"`new Error()` is too unspecific for a type check. Use `new TypeError()` instead."},tcIdentifiers=new Set(["isArguments","isArray","isArrayBuffer","isArrayLike","isArrayLikeObject","isBigInt","isBoolean","isBuffer","isDate","isElement","isError","isFinite","isFunction","isInteger","isLength","isMap","isNaN","isNative","isNil","isNull","isNumber","isObject","isObjectLike","isPlainObject","isPrototypeOf","isRegExp","isSafeInteger","isSet","isString","isSymbol","isTypedArray","isUndefined","isView","isWeakMap","isWeakSet","isWindow","isXMLDoc"]),tcGlobalIdentifiers=new Set(["isNaN","isFinite"]),selector=["ThrowStatement",newExpressionSelector({name:"Error",path:"argument"})].join(""),isTypecheckingIdentifier=(e,i,s)=>void 0!==i&&i.arguments.length>0&&"Identifier"===e.type&&(!0===s&&tcIdentifiers.has(e.name)||!1===s&&tcGlobalIdentifiers.has(e.name)),isLone=e=>e.parent&&e.parent.body&&1===e.parent.body.length,isTypecheckingMemberExpression=(e,i)=>!!isTypecheckingIdentifier(e.property,i,!0)||"MemberExpression"===e.object.type&&isTypecheckingMemberExpression(e.object,i),isTypecheckingExpression=(e,i)=>{switch(e.type){case"Identifier":return isTypecheckingIdentifier(e,i,!1);case"MemberExpression":return isTypecheckingMemberExpression(e,i);case"CallExpression":return isTypecheckingExpression(e.callee,e);case"UnaryExpression":return"typeof"===e.operator||"!"===e.operator&&isTypecheckingExpression(e.argument);case"BinaryExpression":return"instanceof"===e.operator||isTypecheckingExpression(e.left,i)||isTypecheckingExpression(e.right,i);case"LogicalExpression":return isTypecheckingExpression(e.left,i)&&isTypecheckingExpression(e.right,i);default:return!1}},isTypechecking=e=>"IfStatement"===e.type&&isTypecheckingExpression(e.test),create=()=>({[selector](e){if(isLone(e)&&e.parent.parent&&isTypechecking(e.parent.parent)){const i=e.argument.callee;return{node:i,messageId:MESSAGE_ID,fix:e=>e.insertTextBefore(i,"Type")}}}});module.exports={create:create,meta:{type:"suggestion",docs:{description:"Enforce throwing `TypeError` in type checking conditions."},fixable:"code",messages:messages}};
//# sourceMappingURL=/sm/0087844db44c09ff04410f2fe663c21526b6f7491a5bad7b609f0eac26a31f80.map