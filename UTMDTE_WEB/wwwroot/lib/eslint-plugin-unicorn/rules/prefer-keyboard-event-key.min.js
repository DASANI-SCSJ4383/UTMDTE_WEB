/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/eslint-plugin-unicorn@41.0.1/rules/prefer-keyboard-event-key.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const quoteString=require("./utils/quote-string.js"),translateToKey=require("./shared/event-keys.js"),MESSAGE_ID="prefer-keyboard-event-key",messages={[MESSAGE_ID]:"Use `.key` instead of `.{{name}}`."},keys=new Set(["keyCode","charCode","which"]),isPropertyNamedAddEventListener=e=>e&&"CallExpression"===e.type&&e.callee&&"MemberExpression"===e.callee.type&&e.callee.property&&"addEventListener"===e.callee.property.name,getEventNodeAndReferences=(e,t)=>{const r=getMatchingAncestorOfType(t,"CallExpression",isPropertyNamedAddEventListener),n=r&&r.arguments&&r.arguments[1];switch(n&&n.type){case"ArrowFunctionExpression":case"FunctionExpression":{const t=e.getDeclaredVariables(n)[0],r=t&&t.references;return{event:n.params&&n.params[0],references:r}}default:return{}}},isPropertyOf=(e,t)=>e&&e.parent&&"MemberExpression"===e.parent.type&&e.parent.object&&e.parent.object===t,getMatchingAncestorOfType=(e,t,r=(()=>!0))=>{let n=e;for(;n;){if(n.type===t&&r(n))return n;n=n.parent}},getParentByLevel=(e,t)=>{let r=e;for(;r&&t;)t--,r=r.parent;if(0===t)return r},fix=e=>t=>{const r=getParentByLevel(e,3);if(!r||"IfStatement"!==r.type)return;const{type:n,operator:s,right:a}=r.test;if("BinaryExpression"!==n||"=="!==s&&"==="!==s||"Literal"!==a.type||"number"!=typeof a.value)return;const o=translateToKey[a.value]||String.fromCodePoint(a.value);return o?[t.replaceText(e,"key"),t.replaceText(a,quoteString(o))]:void 0},getProblem=e=>({messageId:MESSAGE_ID,data:{name:e.name},node:e,fix:fix(e)}),create=e=>({'Identifier:matches([name="keyCode"], [name="charCode"], [name="which"])'(t){const{event:r,references:n}=getEventNodeAndReferences(e,t);if(r)return n&&n.some((e=>isPropertyOf(t,e.identifier)))?getProblem(t):void 0},Property(t){const r=t.value&&t.value.name;if(!keys.has(r))return;const{event:n,references:s}=getEventNodeAndReferences(e,t);if(!n)return;const a=getMatchingAncestorOfType(t,"VariableDeclarator"),o=a&&a.init&&a.init;if(s&&s.some((e=>e.identifier===o)))return getProblem(t.value);if("ObjectPattern"===n.type)for(const e of n.properties)if(e===t)return getProblem(t.value)}});module.exports={create:create,meta:{type:"suggestion",docs:{description:"Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`."},fixable:"code",messages:messages}};
//# sourceMappingURL=/sm/5d2123863c571a2219af1488860e1620fd6b34a571b7c03b8fbe967652506767.map