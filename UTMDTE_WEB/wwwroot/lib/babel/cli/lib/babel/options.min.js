/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/@babel/cli@7.17.6/lib/babel/options.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";function _fs(){const e=require("fs");return _fs=function(){return e},e}function _commander(){const e=require("commander");return _commander=function(){return e},e}function _core(){const e=require("@babel/core");return _core=function(){return e},e}function _glob(){const e=require("glob");return _glob=function(){return e},e}function parseArgv(e){_commander().parse(e);const o=[];let n=_commander().args.reduce((function(e,o){let n=_glob().sync(o);return n.length||(n=[o]),e.push(...n),e}),[]);if(n=Array.from(new Set(n)),n.forEach((function(e){_fs().existsSync(e)||o.push(e+" does not exist")})),_commander().outDir&&!n.length&&o.push("--out-dir requires filenames"),_commander().outFile&&_commander().outDir&&o.push("--out-file and --out-dir cannot be used together"),_commander().relative&&!_commander().outDir&&o.push("--relative requires --out-dir usage"),_commander().watch&&(_commander().outFile||_commander().outDir||o.push("--watch requires --out-file or --out-dir"),n.length||o.push("--watch requires filenames")),_commander().skipInitialBuild&&!_commander().watch&&o.push("--skip-initial-build requires --watch"),_commander().deleteDirOnStart&&!_commander().outDir&&o.push("--delete-dir-on-start requires --out-dir"),_commander().verbose&&_commander().quiet&&o.push("--verbose and --quiet cannot be used together"),_commander().outDir||0!==n.length||"string"==typeof _commander().filename||!1===_commander().babelrc||o.push("stdin compilation requires either -f/--filename [filename] or --no-babelrc"),_commander().keepFileExtension&&_commander().outFileExtension&&o.push("--out-file-extension cannot be used with --keep-file-extension"),o.length)return console.error("babel:"),o.forEach((function(e){console.error("  "+e)})),null;const t=_commander().opts(),i={presets:t.presets,plugins:t.plugins,rootMode:t.rootMode,configFile:t.configFile,envName:t.envName,sourceType:t.sourceType,ignore:t.ignore,only:t.only,retainLines:t.retainLines,compact:t.compact,minified:t.minified,auxiliaryCommentBefore:t.auxiliaryCommentBefore,auxiliaryCommentAfter:t.auxiliaryCommentAfter,sourceMaps:t.sourceMaps,sourceFileName:t.sourceFileName,sourceRoot:t.sourceRoot,babelrc:!0===t.babelrc?void 0:t.babelrc,highlightCode:!0===t.highlightCode?void 0:t.highlightCode,comments:!0===t.comments?void 0:t.comments};Object.assign(i,{moduleRoot:t.moduleRoot,moduleIds:t.moduleIds,moduleId:t.moduleId});for(const e of Object.keys(i))void 0===i[e]&&delete i[e];return{babelOptions:i,cliOptions:{filename:t.filename,filenames:n,extensions:t.extensions,keepFileExtension:t.keepFileExtension,outFileExtension:t.outFileExtension,watch:t.watch,skipInitialBuild:t.skipInitialBuild,outFile:t.outFile,outDir:t.outDir,relative:t.relative,copyFiles:t.copyFiles,copyIgnored:t.copyFiles&&t.copyIgnored,includeDotfiles:t.includeDotfiles,verbose:t.verbose,quiet:t.quiet,deleteDirOnStart:t.deleteDirOnStart,sourceMapTarget:t.sourceMapTarget}}}function booleanify(e){return"true"===e||1==e||!("false"===e||0==e||!e)&&e}function collect(e,o){if("string"!=typeof e)return o;const n=e.split(",");return o?(o.push(...n),o):n}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=parseArgv,_commander().option("-f, --filename [filename]","The filename to use when reading from stdin. This will be used in source-maps, errors etc."),_commander().option("--presets [list]","A comma-separated list of preset names.",collect),_commander().option("--plugins [list]","A comma-separated list of plugin names.",collect),_commander().option("--config-file [path]","Path to a .babelrc file to use."),_commander().option("--env-name [name]","The name of the 'env' to use when loading configs and plugins. Defaults to the value of BABEL_ENV, or else NODE_ENV, or else 'development'."),_commander().option("--root-mode [mode]","The project-root resolution mode. One of 'root' (the default), 'upward', or 'upward-optional'."),_commander().option("--source-type [script|module]",""),_commander().option("--no-babelrc","Whether or not to look up .babelrc and .babelignore files."),_commander().option("--ignore [list]","List of glob paths to **not** compile.",collect),_commander().option("--only [list]","List of glob paths to **only** compile.",collect),_commander().option("--no-highlight-code","Enable or disable ANSI syntax highlighting of code frames. (on by default)"),_commander().option("--no-comments","Write comments to generated output. (true by default)"),_commander().option("--retain-lines","Retain line numbers. This will result in really ugly code."),_commander().option("--compact [true|false|auto]","Do not include superfluous whitespace characters and line terminators.",booleanify),_commander().option("--minified","Save as many bytes when printing. (false by default)"),_commander().option("--auxiliary-comment-before [string]","Print a comment before any injected non-user code."),_commander().option("--auxiliary-comment-after [string]","Print a comment after any injected non-user code."),_commander().option("-s, --source-maps [true|false|inline|both]","",booleanify),_commander().option("--source-map-target [string]","Set `file` on returned source map."),_commander().option("--source-file-name [string]","Set `sources[0]` on returned source map."),_commander().option("--source-root [filename]","The root from which all sources are relative."),_commander().option("--module-root [filename]","Optional prefix for the AMD module formatter that will be prepended to the filename on module definitions."),_commander().option("-M, --module-ids","Insert an explicit id for modules."),_commander().option("--module-id [string]","Specify a custom name for module ids."),_commander().option("-x, --extensions [extensions]","List of extensions to compile when a directory has been the input. ["+_core().DEFAULT_EXTENSIONS.join()+"]",collect),_commander().option("--keep-file-extension","Preserve the file extensions of the input files."),_commander().option("-w, --watch","Recompile files on changes."),_commander().option("--skip-initial-build","Do not compile files before watching."),_commander().option("-o, --out-file [out]","Compile all input files into a single file."),_commander().option("-d, --out-dir [out]","Compile an input directory of modules into an output directory."),_commander().option("--relative","Compile into an output directory relative to input directory or file. Requires --out-dir [out]"),_commander().option("-D, --copy-files","When compiling a directory copy over non-compilable files."),_commander().option("--include-dotfiles","Include dotfiles when compiling and copying non-compilable files."),_commander().option("--no-copy-ignored","Exclude ignored files when copying non-compilable files."),_commander().option("--verbose","Log everything. This option conflicts with --quiet"),_commander().option("--quiet","Don't log anything. This option conflicts with --verbose"),_commander().option("--delete-dir-on-start","Delete the out directory before compilation."),_commander().option("--out-file-extension [string]","Use a specific extension for the output files"),_commander().version("7.17.6 (@babel/core "+_core().version+")"),_commander().usage("[options] <files ...>"),_commander().action((()=>{}));
//# sourceMappingURL=/sm/89c7d2fc620db467152eb167e525eb5d3e01edcfd1ff932b014f35b0a012de2d.map