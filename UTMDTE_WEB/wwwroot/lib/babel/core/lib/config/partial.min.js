/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/@babel/core@7.17.5/lib/config/partial.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";function _path(){const e=require("path");return _path=function(){return e},e}function _gensync(){const e=require("gensync");return _gensync=function(){return e},e}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=loadPrivatePartialConfig,exports.loadPartialConfig=void 0;var _plugin=require("./plugin"),_util=require("./util"),_item=require("./item"),_configChain=require("./config-chain"),_environment=require("./helpers/environment"),_options=require("./validation/options"),_files=require("./files"),_resolveTargets=require("./resolve-targets");const _excluded=["showIgnoredFiles"];function _objectWithoutPropertiesLoose(e,o){if(null==e)return{};var i,t,n={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],o.indexOf(i)>=0||(n[i]=e[i]);return n}function resolveRootMode(e,o){switch(o){case"root":return e;case"upward-optional":{const o=(0,_files.findConfigUpwards)(e);return null===o?e:o}case"upward":{const o=(0,_files.findConfigUpwards)(e);if(null!==o)return o;throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${e}".\nOne of the following config files must be in the directory tree: "${_files.ROOT_CONFIG_FILENAMES.join(", ")}".`),{code:"BABEL_ROOT_NOT_FOUND",dirname:e})}default:throw new Error("Assertion failure - unknown rootMode value.")}}function*loadPrivatePartialConfig(e){if(null!=e&&("object"!=typeof e||Array.isArray(e)))throw new Error("Babel options must be an object, null, or undefined");const o=e?(0,_options.validate)("arguments",e):{},{envName:i=(0,_environment.getEnv)(),cwd:t=".",root:n=".",rootMode:r="root",caller:s,cloneInputAst:l=!0}=o,a=_path().resolve(t),f=resolveRootMode(_path().resolve(a,n),r),c="string"==typeof o.filename?_path().resolve(t,o.filename):void 0,u={filename:c,cwd:a,root:f,envName:i,caller:s,showConfig:(yield*(0,_files.resolveShowConfigPath)(a))===c},d=yield*(0,_configChain.buildRootChain)(o,u);if(!d)return null;const g={assumptions:{}};d.options.forEach((e=>{(0,_util.mergeOptions)(g,e)}));return{options:Object.assign({},g,{targets:(0,_resolveTargets.resolveTargets)(g,f),cloneInputAst:l,babelrc:!1,configFile:!1,browserslistConfigFile:!1,passPerPreset:!1,envName:u.envName,cwd:u.cwd,root:u.root,rootMode:"root",filename:"string"==typeof u.filename?u.filename:void 0,plugins:d.plugins.map((e=>(0,_item.createItemFromDescriptor)(e))),presets:d.presets.map((e=>(0,_item.createItemFromDescriptor)(e)))}),context:u,fileHandling:d.fileHandling,ignore:d.ignore,babelrc:d.babelrc,config:d.config,files:d.files}}const loadPartialConfig=_gensync()((function*(e){let o=!1;if("object"==typeof e&&null!==e&&!Array.isArray(e)){var i=e;({showIgnoredFiles:o}=i),e=_objectWithoutPropertiesLoose(i,_excluded)}const t=yield*loadPrivatePartialConfig(e);if(!t)return null;const{options:n,babelrc:r,ignore:s,config:l,fileHandling:a,files:f}=t;return"ignored"!==a||o?((n.plugins||[]).forEach((e=>{if(e.value instanceof _plugin.default)throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()")})),new PartialConfig(n,r?r.filepath:void 0,s?s.filepath:void 0,l?l.filepath:void 0,a,f)):null}));exports.loadPartialConfig=loadPartialConfig;class PartialConfig{constructor(e,o,i,t,n,r){this.options=void 0,this.babelrc=void 0,this.babelignore=void 0,this.config=void 0,this.fileHandling=void 0,this.files=void 0,this.options=e,this.babelignore=i,this.babelrc=o,this.config=t,this.fileHandling=n,this.files=r,Object.freeze(this)}hasFilesystemConfig(){return void 0!==this.babelrc||void 0!==this.config}}Object.freeze(PartialConfig.prototype);
//# sourceMappingURL=/sm/ebe4c7703091aa339190bdb0e7f3e8d06c2c0923f8cd4227ef67bd9af6c0ee60.map