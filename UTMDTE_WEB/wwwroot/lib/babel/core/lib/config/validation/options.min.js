/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/@babel/core@7.17.5/lib/config/validation/options.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.assumptionsNames=void 0,exports.checkNoUnwrappedItemOptionPairs=checkNoUnwrappedItemOptionPairs,exports.validate=validate;var _plugin=require("../plugin"),_removed=require("./removed"),_optionAssertions=require("./option-assertions");const ROOT_VALIDATORS={cwd:_optionAssertions.assertString,root:_optionAssertions.assertString,rootMode:_optionAssertions.assertRootMode,configFile:_optionAssertions.assertConfigFileSearch,caller:_optionAssertions.assertCallerMetadata,filename:_optionAssertions.assertString,filenameRelative:_optionAssertions.assertString,code:_optionAssertions.assertBoolean,ast:_optionAssertions.assertBoolean,cloneInputAst:_optionAssertions.assertBoolean,envName:_optionAssertions.assertString},BABELRC_VALIDATORS={babelrc:_optionAssertions.assertBoolean,babelrcRoots:_optionAssertions.assertBabelrcSearch},NONPRESET_VALIDATORS={extends:_optionAssertions.assertString,ignore:_optionAssertions.assertIgnoreList,only:_optionAssertions.assertIgnoreList,targets:_optionAssertions.assertTargets,browserslistConfigFile:_optionAssertions.assertConfigFileSearch,browserslistEnv:_optionAssertions.assertString},COMMON_VALIDATORS={inputSourceMap:_optionAssertions.assertInputSourceMap,presets:_optionAssertions.assertPluginList,plugins:_optionAssertions.assertPluginList,passPerPreset:_optionAssertions.assertBoolean,assumptions:_optionAssertions.assertAssumptions,env:assertEnvSet,overrides:assertOverridesList,test:_optionAssertions.assertConfigApplicableTest,include:_optionAssertions.assertConfigApplicableTest,exclude:_optionAssertions.assertConfigApplicableTest,retainLines:_optionAssertions.assertBoolean,comments:_optionAssertions.assertBoolean,shouldPrintComment:_optionAssertions.assertFunction,compact:_optionAssertions.assertCompact,minified:_optionAssertions.assertBoolean,auxiliaryCommentBefore:_optionAssertions.assertString,auxiliaryCommentAfter:_optionAssertions.assertString,sourceType:_optionAssertions.assertSourceType,wrapPluginVisitorMethod:_optionAssertions.assertFunction,highlightCode:_optionAssertions.assertBoolean,sourceMaps:_optionAssertions.assertSourceMaps,sourceMap:_optionAssertions.assertSourceMaps,sourceFileName:_optionAssertions.assertString,sourceRoot:_optionAssertions.assertString,parserOpts:_optionAssertions.assertObject,generatorOpts:_optionAssertions.assertObject};Object.assign(COMMON_VALIDATORS,{getModuleId:_optionAssertions.assertFunction,moduleRoot:_optionAssertions.assertString,moduleIds:_optionAssertions.assertBoolean,moduleId:_optionAssertions.assertString});const assumptionsNames=new Set(["arrayLikeIsIterable","constantReexports","constantSuper","enumerableModuleMeta","ignoreFunctionLength","ignoreToPrimitiveHint","iterableIsArray","mutableTemplateObject","noClassCalls","noDocumentAll","noIncompleteNsImportDetection","noNewArrows","objectRestNoSymbols","privateFieldsAsProperties","pureGetters","setClassMethods","setComputedProperties","setPublicClassFields","setSpreadProperties","skipForOfIteratorClosing","superIsCallableConstructor"]);function getSource(s){return"root"===s.type?s.source:getSource(s.parent)}function validate(s,o){return validateNested({type:"root",source:s},o)}function validateNested(s,o){const e=getSource(s);return assertNoDuplicateSourcemap(o),Object.keys(o).forEach((t=>{const r={type:"option",name:t,parent:s};if("preset"===e&&NONPRESET_VALIDATORS[t])throw new Error(`${(0,_optionAssertions.msg)(r)} is not allowed in preset options`);if("arguments"!==e&&ROOT_VALIDATORS[t])throw new Error(`${(0,_optionAssertions.msg)(r)} is only allowed in root programmatic options`);if("arguments"!==e&&"configfile"!==e&&BABELRC_VALIDATORS[t]){if("babelrcfile"===e||"extendsfile"===e)throw new Error(`${(0,_optionAssertions.msg)(r)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);throw new Error(`${(0,_optionAssertions.msg)(r)} is only allowed in root programmatic options, or babel.config.js/config file options`)}(COMMON_VALIDATORS[t]||NONPRESET_VALIDATORS[t]||BABELRC_VALIDATORS[t]||ROOT_VALIDATORS[t]||throwUnknownError)(r,o[t])})),o}function throwUnknownError(s){const o=s.name;if(_removed.default[o]){const{message:e,version:t=5}=_removed.default[o];throw new Error(`Using removed Babel ${t} option: ${(0,_optionAssertions.msg)(s)} - ${e}`)}{const o=new Error(`Unknown option: ${(0,_optionAssertions.msg)(s)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);throw o.code="BABEL_UNKNOWN_OPTION",o}}function has(s,o){return Object.prototype.hasOwnProperty.call(s,o)}function assertNoDuplicateSourcemap(s){if(has(s,"sourceMap")&&has(s,"sourceMaps"))throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both")}function assertEnvSet(s,o){if("env"===s.parent.type)throw new Error(`${(0,_optionAssertions.msg)(s)} is not allowed inside of another .env block`);const e=s.parent,t=(0,_optionAssertions.assertObject)(s,o);if(t)for(const o of Object.keys(t)){const r=(0,_optionAssertions.assertObject)((0,_optionAssertions.access)(s,o),t[o]);if(!r)continue;validateNested({type:"env",name:o,parent:e},r)}return t}function assertOverridesList(s,o){if("env"===s.parent.type)throw new Error(`${(0,_optionAssertions.msg)(s)} is not allowed inside an .env block`);if("overrides"===s.parent.type)throw new Error(`${(0,_optionAssertions.msg)(s)} is not allowed inside an .overrides block`);const e=s.parent,t=(0,_optionAssertions.assertArray)(s,o);if(t)for(const[o,r]of t.entries()){const t=(0,_optionAssertions.access)(s,o),n=(0,_optionAssertions.assertObject)(t,r);if(!n)throw new Error(`${(0,_optionAssertions.msg)(t)} must be an object`);validateNested({type:"overrides",index:o,parent:e},n)}return t}function checkNoUnwrappedItemOptionPairs(s,o,e,t){if(0===o)return;const r=s[o-1],n=s[o];r.file&&void 0===r.options&&"object"==typeof n.value&&(t.message+=`\n- Maybe you meant to use\n"${e}s": [\n  ["${r.file.request}", ${JSON.stringify(n.value,void 0,2)}]\n]\nTo be a valid ${e}, its name and options should be wrapped in a pair of brackets`)}exports.assumptionsNames=assumptionsNames;
//# sourceMappingURL=/sm/dd4543ac77b8cc64330dae5158a40ab06cdac946ffadd0b8d3dcdc49e8209a1c.map