/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/find-unused-sass-variables@4.0.3/cli.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
#!/usr/bin/env node
import fs from"node:fs";import process from"node:process";import path from"node:path";import{program}from"commander";import picocolors from"picocolors";import fusv from"./index.js";const{version:version}=JSON.parse(fs.readFileSync(new URL("package.json",import.meta.url)));async function main(){const o=program.args,e=program.opts(),r={ignore:e.ignore.split(","),fileExtensions:e.extension};console.log("Looking for unused variables");const s=await Promise.allSettled(o.map((o=>executeForPath(o,r))));let n=0;for(const o of s)"rejected"===o.status&&(console.log(picocolors.red(o.reason)),n=1);process.exit(n)}program.arguments("[folders]").version(version,"-v, --version").option("-i, --ignore <ignoredVars>","ignore variables, comma separated","").option("-e, --extension [fileTypes...]","file extension to search",["scss"]).parse();const executeForPath=async(o,e)=>{const r=path.resolve(o),s=await fusv.findAsync(r,e);console.log(`\nSearching for unused variables in "${picocolors.cyan(r)}" folder, ${picocolors.cyan(e.fileExtensions.join(", "))} files...`),console.log(`${picocolors.cyan(s.total)} total variables.`);const n=s.unused.length;if(n>0){console.log(`${picocolors.yellow(n)} ${n>1?"are":"is"} not used!`);for(const{name:o,file:e,line:r}of s.unused)console.log(`Variable ${picocolors.red(o)} is not being used! ${picocolors.gray(e)}:${picocolors.yellow(r)}`);throw new Error(`Found ${n} unused variable${n>1?"s":""} in "${picocolors.cyan(r)}" folder`)}console.log(picocolors.green(`No unused variables found in "${r}!"`))},args=program.args.filter((o=>"string"==typeof o));args.length>0?main():program.help();
//# sourceMappingURL=/sm/a69ea682069af5d725fc1662a854ed81c3c402c8aeda32e289fdee351093f7ff.map