/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/find-unused-sass-variables@4.0.3/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import fs from"node:fs";import path from"node:path";import{promisify}from"node:util";import glob from"glob";import escapeRegex from"escape-string-regexp";import parse from"./lib/parse-variable.js";const globP=promisify(glob),defaultOptions={ignore:[],fileExtensions:["scss"]},findUnusedVarsAsync=async(e,s)=>{const r=parseOptions(s),i=await sanitizeDirAsync(e),n=(await globP(path.join(i,`**/*.${r.fileExtensions}`))).map((e=>parseFileAsync(e,r)));return makeResults(await Promise.all(n))},findUnusedVarsSync=(e,s)=>{const r=parseOptions(s),i=sanitizeDirSync(e);return makeResults(glob.sync(path.join(i,`**/*.${r.fileExtensions}`)).map((e=>parseFileSync(e,r))))};function makeResults(e){let s=[],r="";for(const i of e)s=[...s,...i.variables],r+=i.sassFileString;return filterVariables(r,s)}const parseFileAsync=async(e,s)=>{const r=await fs.promises.readFile(e,"utf8");return parseData(e,r,s)},parseFileSync=(e,s)=>{const r=fs.readFileSync(e,"utf8");return parseData(e,r,s)},parseData=(e,s,r)=>{s.includes("---")&&(s=s.replace(/---/g,""));return{sassFileString:s,variables:parse(e,s,r.ignore)}},filterVariables=(e,s)=>({unused:s.filter((s=>{const r=new RegExp(`(${escapeRegex(s.name)})\\b(?!-)`,"g");return 1===e.match(r).length})),total:s.length}),parseOptions=e=>{const s={...defaultOptions,...e};if(Boolean(s.ignore)&&!Array.isArray(s.ignore))throw new TypeError("`ignore` should be an Array");s.ignore=s.ignore.map((e=>e.trim()));let r=s.fileExtensions;return r=Array.isArray(r)?r:[r],r=r.map((e=>e.startsWith(".")?e.slice(1):e)),s.fileExtensions=r.length>1?`+(${r.join("|")})`:r,s},sanitizeDirAsync=async e=>{const s=path.isAbsolute(e)?e:path.resolve(e);return checkDir(await fs.promises.lstat(s),s)},sanitizeDirSync=e=>{const s=path.isAbsolute(e)?e:path.resolve(e);return checkDir(fs.statSync(s),s)};function checkDir(e,s){if(!e.isDirectory())throw new Error(`"${s}": Not a valid directory!`);return s}export default{findAsync:findUnusedVarsAsync,find:findUnusedVarsSync};
//# sourceMappingURL=/sm/0887de49769520ac87687427fa3b42f436db72d8adc0c28bf8d1df6bba386ff0.map